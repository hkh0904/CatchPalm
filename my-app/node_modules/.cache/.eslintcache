[{"C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\index.js":"1","C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\App.js":"2","C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\pages\\Userinfo.js":"3","C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\pages\\PlayingPage.js":"4","C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\pages\\SignUp.js":"5","C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\pages\\Login.js":"6","C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\pages\\RankingPage.js":"7","C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\components\\ChatRoomComponents\\ChatRoomItem.js":"8","C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\components\\ChatRoomComponents\\ChatRoomList.js":"9","C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\components\\RankingComponents\\Ranking.js":"10","C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\components\\PlayingComponents\\OpenVidu.js":"11","C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\components\\PlayingComponents\\HandModel.js":"12","C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\components\\PlayingComponents\\UserVideoComponent.js":"13","C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\components\\PlayingComponents\\OvVideo.js":"14"},{"size":425,"mtime":1691557177705,"results":"15","hashOfConfig":"16"},{"size":8130,"mtime":1691558678751,"results":"17","hashOfConfig":"16"},{"size":5576,"mtime":1691461780131,"results":"18","hashOfConfig":"16"},{"size":653,"mtime":1691559192331,"results":"19","hashOfConfig":"16"},{"size":5595,"mtime":1691461780130,"results":"20","hashOfConfig":"16"},{"size":5012,"mtime":1691461780119,"results":"21","hashOfConfig":"16"},{"size":968,"mtime":1691545140594,"results":"22","hashOfConfig":"16"},{"size":23867,"mtime":1691545362342,"results":"23","hashOfConfig":"16"},{"size":10121,"mtime":1691461780108,"results":"24","hashOfConfig":"16"},{"size":4394,"mtime":1691547919005,"results":"25","hashOfConfig":"16"},{"size":12858,"mtime":1691543024845,"results":"26","hashOfConfig":"16"},{"size":18905,"mtime":1691559185399,"results":"27","hashOfConfig":"16"},{"size":773,"mtime":1691543024847,"results":"28","hashOfConfig":"16"},{"size":648,"mtime":1691543024846,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10u1cgn",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\index.js",[],[],"C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\App.js",["77","78","79"],[],"// import './App.css'; // 필요한 경우 주석을 제거하고 사용하세요.\nimport React, { useEffect, useState } from 'react';\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Grid from '@mui/material/Grid';\nimport PlayingPage from './pages/PlayingPage';\nimport ChatRoomItem from \"./components/ChatRoomComponents/ChatRoomItem\";\nimport ChatRoomList from \"./components/ChatRoomComponents/ChatRoomList\"; // chat 리스트방으로\nimport { Button, Drawer } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport Login from './pages/Login';\nimport SignUp from './pages/SignUp';\nimport Userinfo from './pages/Userinfo';\nimport RankingPage from './pages/RankingPage';\nimport axios from 'axios';\n\n\nfunction MainPage() {\n    \n  const navigate = useNavigate();\n\n  ////////로그인 로그아웃 시작////////////////\n  const isLoggedIn = !!localStorage.getItem('token'); \n  // const isLoggedIn = 1;  // 로그인 토큰 확인\n\n\n  const handleLogout = () => {\n    localStorage.removeItem('token'); // 토큰 삭제\n    window.location.reload(); // 페이지 갱신\n  };\n  const handleDeleteAccount = () => {\n    // Confirmation before account deletion\n    if (!window.confirm('정말로 회원 탈퇴를 진행하시겠습니까?')) {\n      return; // If user cancels (clicks 'No'), stop the function\n    }\n    \n    const token = localStorage.getItem('token');\n    \n\n\n\n    fetch('https://localhost:8443/api/v1/users/delete', {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // or however your server expects the token\n      }\n    })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Error during account deletion');\n      }\n    })\n    .then(data => {\n      // Handle successful deletion here, such as by logging out the user\n      localStorage.removeItem('token');\n      window.location.reload();\n    })\n    .catch(error => {\n      // Handle any errors here\n      console.error('Error:', error);\n    });\n  };\n  \n    //// 내 정보보기 시작\n    const [drawerOpen, setDrawerOpen] = useState(false);\n\n    const handleDrawerOpen = () => {\n      setDrawerOpen(!drawerOpen);\n    };\n\n    /// 내정보 보기 끝\n\n\n  const handleButtonClick3 = () => {\n    navigate('/login');\n  };\n  \n  const handleButtonClick4 = () => {\n    navigate('/signup');\n  };\n  ////////////// 로그인 로그아웃 끝////////////////  \n\n\n  //////// 회원정보 받아오기 시작/////////\n  const [userId, setUserId] = useState(null);\n  const token = localStorage.getItem('token');\n\n\n  useEffect(() => {\n    if(!token) return;  // 토큰이 없으면 요청하지 않습니다.\n    axios({\n      method: 'get',\n      url: 'https://localhost:8443/api/v1/users/me',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // your access token here\n      }\n    })\n      .then(response => {\n        const rawUserId = response.data.userId;\n        const cleanedUserId = rawUserId.replace('local:', ''); // 앞에 local: 지우기\n        setUserId(cleanedUserId);\n        localStorage.setItem('userData', JSON.stringify(response.data));\n        console.log(response.data)\n      })\n      .catch(error => {\n        const token = error.response.headers.authorization.slice(7);\n        localStorage.setItem('token', token);\n        axios({\n          method: 'get',\n          url: 'https://localhost:8443/api/v1/users/me',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}` // your access token here\n          }\n        })\n          .then(response => {\n            const rawUserId = response.data.userId;\n            const cleanedUserId = rawUserId.replace('local:', ''); // 앞에 local: 지우기\n            setUserId(cleanedUserId);\n            localStorage.setItem('userData', JSON.stringify(response.data));\n            console.log(response.data)\n          })\n          .catch(error => {\n            console.log(error);\n          })\n      });\n  }, [token]); // useEffect will run once when the component mounts\n  \n\n///////회원정보 받아오기 끝////////////  \n  const handleButtonClick = () => {\n    navigate('/Playing');\n  };\n\n  const handleButtonClick2 = () => {\n    navigate('/ChatRoomList');\n  };\n  \n  return (\n    <React.Fragment>\n      \n      <video autoPlay muted loop className=\"background-video\">\n        <source src=\"assets/background.mp4\" type=\"video/mp4\" />\n      </video>\n\n      <Grid className=\"mainGrid\" container spacing={2}>\n        <Grid item xs={4} md={8} lg={8}>\n        <a href=\"#\">\n            <span></span>\n            <span></span>\n            <span></span>\n            <span></span>\n            Neon button\n          </a>\n          <a href=\"#\">\n            <span></span>\n            <span></span>\n            <span></span>\n            <span></span>\n            Neon button\n          </a>\n          <a href=\"#\">\n            <span></span>\n            <span></span>\n            <span></span>\n            <span></span>\n            Neon button\n          </a>\n          {isLoggedIn ? (\n            <React.Fragment>\n              <Button variant=\"contained\" onClick={handleButtonClick}>\n                Go to Sample Page\n              </Button>\n              <br />\n              <br />\n              \n              <Button variant=\"contained\" onClick={handleButtonClick2}>\n                채팅방리스트로 가기\n              </Button>\n              <Button variant=\"contained\" onClick={handleDrawerOpen}>\n                내 정보 보기\n              </Button>\n              <Button variant=\"contained\" onClick={handleLogout}>\n                로그아웃\n              </Button>\n              <Button variant=\"contained\" onClick={handleDeleteAccount}>\n                회원 탈퇴\n              </Button>\n              <div style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\n              <Button\n                variant=\"contained\"\n                style={{\n                  fontSize: '24px',\n                  padding: '20px 40px',\n                  borderRadius: '50%', // 테두리를 반원으로 만듦\n                  width: '200px', // 버튼의 가로 크기를 조정해 원형으로 보이도록 함\n                  height: '200px', // 버튼의 세로 크기를 조정해 원형으로 보이도록 함\n                }}\n                onClick={() => navigate('/ChatRoomList')}\n              >\n                CatchPalm\n              </Button>\n              </div>\n              \n    <h1>로그인 된 메인페이지</h1>\n\n    \n              \n          <div className=\"white-text\">\n            <p>아이디: {userId}</p>\n          </div>\n\n\n              <Drawer anchor=\"right\" open={drawerOpen} onClose={handleDrawerOpen}>\n                <Userinfo />\n              </Drawer>\n              \n            </React.Fragment>\n          ) : (\n          <React.Fragment>\n            <Button variant=\"contained\" onClick={handleButtonClick3}>\n              로그인\n            </Button> \n            <Button variant=\"contained\" onClick={handleButtonClick4}>\n              회원가입\n            </Button>       \n            \n    <h1>로그인 X 메인페이지</h1>\n    \n          </React.Fragment>\n          )}\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\nfunction App() {\n  \n  return (\n    <Router>\n        <Routes>\n          <Route path=\"/login\" element={<Login />} />\n          <Route path=\"/signup\" element={<SignUp />} />\n          \n          <Route path=\"/userinfo\" element={<Userinfo />} />\n          <Route path=\"/Playing\" element={<PlayingPage />} />\n          <Route path=\"/\" element={<MainPage />} />\n          <Route path=\"/chatRoomList\" element={<ChatRoomList onSelectChatRoom={undefined} />} />\n          <Route path=\"/chat-rooms/:roomNumber\" element={<ChatRoomItem />} />\n          <Route path=\"/ranking\" element={<RankingPage />} />\n        </Routes>\n    </Router>\n  );\n}\n\nexport default App;","C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\pages\\Userinfo.js",[],[],"C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\pages\\PlayingPage.js",[],[],"C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\pages\\SignUp.js",[],[],"C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\pages\\Login.js",[],[],"C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\pages\\RankingPage.js",[],[],"C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\components\\ChatRoomComponents\\ChatRoomItem.js",["80","81","82","83","84","85"],[],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./ChatRoomItem.css\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { over } from \"stompjs\";\r\nimport SockJS from \"sockjs-client\";\r\nimport { useNavigate } from 'react-router-dom'; // useNavigate 불러옴\r\nimport { allResolved } from \"q\";\r\nlet name = \"\";\r\nlet Sock = null;\r\nvar stompClient = null;\r\nlet audio = null;\r\n\r\nvar colors = [\r\n  \"#2196F3\",\r\n  \"#32c787\",\r\n  \"#00BCD4\",\r\n  \"#ff5652\",\r\n  \"#ffc107\",\r\n  \"#ff85af\",\r\n  \"#FF9800\",\r\n  \"#39bbb0\",\r\n];\r\n\r\nconst ChatRoomItem = () => {\r\n  // 게임시작 신호--------------------------------------------------\r\n  const [gameStart, setGameStart] = useState(0); // gameStart 상태로 추가\r\n  const [startMusic, setStartMusic] = useState(); // startMusic 상태로 추가\r\n  const [startRoom, setStartRoom] = useState(); // startRoom 상태로 추가\r\n  const [startMusicName, setStartMusicName] = useState(\"\"); // startMusic 상태로 추가\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n    if (gameStart === 1) {\r\n      // TODO -- 게임 시작시 로직 --\r\n      // 오픈비두로 전달할 데이터.\r\n      var gameStartRes = { // 시작시 게임정보\r\n        roomNumber: startRoom, // 시작한 방\r\n        musicNumber: startMusic, // 음악 번호\r\n        musicName: startMusicName,  // 음악 이름\r\n        nickname: name,\r\n        userNumber: userNumber\r\n      };\r\n      // 게임 창 페이지로 이동하면서 데이터 전달\r\n      // navigate('/게임창경로', { state: { gameData: gameStartRes } });\r\n      alert(\"게임시작\");\r\n    }\r\n  }, [gameStart]); // 게임시작 신호가 오면 수행\r\n  //------------------------------------------------------------------\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n  const [userNumber, setUserNumber] = useState(\"\"); // userNumber 상태로 추가\r\n  const messageAreaRef = useRef(null);\r\n  const { roomNumber } = useParams();\r\n  const [roomInfo, setRoomInfo] = useState(null);\r\n\r\n  const [userInfo, setUserInfo] = useState([]); // 유저정보들\r\n  const [captain, setCaptain] = useState(); // 방장 정보\r\n  const [messages, setMessages] = useState(\"\"); // 보내는 메세지\r\n  // const [messageText, setMessageText] = useState(''); // 받는 메세지\r\n  // 음악 리스트 관련\r\n  const [pickedMusic, setPickedMusic] = useState();\r\n  const [musicName, setMusicName] = useState();\r\n  const [currdeg, setCurrdeg] = useState(0);\r\n  const [showTooltip, setShowTooltip] = useState([false,false,false]);\r\n  const handleMouseEnter = (index) => {\r\n    setShowTooltip((prevState) => {\r\n      const newState = [...prevState];\r\n      newState[index] = true;\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  const handleMouseLeave = (index) => {\r\n    setShowTooltip((prevState) => {\r\n      const newState = [...prevState];\r\n      newState[index] = false;\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  const rotate = (direction) => {\r\n    if (direction === 'next') {\r\n      setCurrdeg(currdeg - 60);\r\n    } else if (direction === 'prev') {\r\n      setCurrdeg(currdeg + 60);\r\n    }\r\n  };\r\n\r\n  const chageMusicBtn = (musicNumber, musicName1) => {\r\n    setPickedMusic(musicNumber);\r\n    setMusicName(musicName1);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (pickedMusic !== null && musicName !== null && stompClient !== null) {\r\n      if(name === captain) { // 방장일 경우만 \r\n        musicChange(); // 변경사항 소켓으로 전달.\r\n      }\r\n      if (audio) { // 음악이 켜져있다면\r\n        audio.pause(); // 음악끄기.\r\n        audio.currentTime = 0;\r\n      }\r\n      audio = new Audio(`/music/${pickedMusic}.mp3`);\r\n      audio.volume = 0.3; // 볼륨 30%로 설정\r\n      audio.play();\r\n    }\r\n  }, [pickedMusic, musicName]); // 선택곡이 바뀌면 수행\r\n\r\n//  채팅관련\r\n  const handleMessageChange = (event) => {\r\n    setMessages(event.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userNumber !== \"\") {\r\n      // 처음에 채팅 바로 시작안되고 userNumber 받아왔을때 채팅 실행\r\n      handleStartChatting();\r\n    }\r\n    axios({\r\n      method: \"get\",\r\n      url: \"https://localhost:8443/api/v1/users/me\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`, // your access token here\r\n      },\r\n    })\r\n      .then((response) => {\r\n        const userNumber = response.data.userNumber;\r\n        setUserNumber(userNumber);\r\n        name = response.data.userNickname;\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"error\");\r\n        const errorToken = localStorage.getItem('token');\r\n            if (!errorToken) { // token이 null 또는 undefined 또는 빈 문자열일 때\r\n              window.location.href = '/'; // 이것은 주소창에 도메인 루트로 이동합니다. 원하는 페이지 URL로 변경하세요.\r\n              return; // 함수 실행을 중단하고 반환합니다.\r\n            }\r\n        const token = error.response.headers.authorization.slice(7);\r\n        localStorage.setItem(\"token\", token);\r\n        axios({\r\n          method: \"get\",\r\n          url: \"https://localhost:8443/api/v1/users/me\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`, // your access token here\r\n          },\r\n        })\r\n          .then((response) => {\r\n            const userNumber = response.data.userNumber;\r\n            setUserNumber(userNumber);\r\n            name = response.data.userNickname;\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      });\r\n    const fetchRoomInfo = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `https://localhost:8443/api/v1/gameRooms/getGameRoomInfo/${roomNumber}`\r\n        );\r\n        const data = response.data;\r\n        setRoomInfo(data);\r\n        setCaptain(data.nickname);\r\n        setPickedMusic(data.musicNumber);\r\n        setMusicName(data.musicName)\r\n        \r\n      } catch (error) {\r\n        console.error(\"Error fetching room info:\", error);\r\n      }\r\n    };\r\n    fetchRoomInfo();\r\n  }, [userNumber]);\r\n\r\n  // 소켓연결---------------------------------\r\n  // 소켓연결 끊길때: 컴포넌트 변경돨 때 수행 소스 -> 웹소켓 연결 끈기.\r\n  useEffect(() => {\r\n    return () => {\r\n      stompClient.disconnect();\r\n      if (audio) { // 음악이 켜져있다면\r\n        audio.pause(); // 음악끄기.\r\n        audio.currentTime = 0;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const connect = () => {\r\n    Sock = new SockJS(\"https://localhost:8443/ws\");\r\n    stompClient = over(Sock);\r\n    stompClient.connect({}, onConnected, onError);\r\n  };\r\n  // 연결 됬다면 구독 매핑 및 연결 유저 정보 전송\r\n  const onConnected = () => {\r\n    stompClient.subscribe(`/topic/chat/${roomNumber}`, onMessageReceived);\r\n    stompClient.send(\"/app/chat.addUser\",\r\n      {},\r\n      JSON.stringify({ sender: name, type: 'JOIN', userNumber: userNumber, roomNumber: roomNumber })\r\n      )\r\n  }\r\n  // 연결이 안된경우\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  };\r\n\r\n  // 서버에서 메세지 수신R\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var message = JSON.parse(payload.body);\r\n    var messageElement = document.createElement(\"li\");\r\n\r\n    // 만약 게임시작 신호라면\r\n    if(message.type === 'START'){\r\n      setGameStart(message.isStart);\r\n      setStartMusic(message.musicNumber);\r\n      setStartRoom(message.roomNumber);\r\n      setStartMusicName(message.musicName);\r\n      return;\r\n    }\r\n\r\n    // 만약 음악 변경 신호면\r\n    else if(message.type === 'MUSIC'){\r\n      setPickedMusic(message.musicNumber);\r\n      setMusicName(message.musicName);\r\n      return;\r\n    }\r\n\r\n    // 만약 레디신호면\r\n    else if (message.type === 'READY') {\r\n      setUserInfo((prevUserInfo) =>\r\n        prevUserInfo.map((user) =>\r\n          user.userNumber === message.userNumber ? { ...user, ready: message.isReady } : user\r\n        )\r\n      );\r\n      return;\r\n    }\r\n    else if (message.type === 'JOIN') {\r\n      messageElement.classList.add('event-message');\r\n      message.content = message.sender + ' joined!';\r\n      setUserInfo(message.userInfo);\r\n    } else if (message.type === 'LEAVE') {\r\n      messageElement.classList.add('event-message');\r\n      message.content = message.sender + ' left!';\r\n      setUserInfo(message.userInfo);\r\n      if (message.captain !== null) { // 방장 정보가 들어왔다면 : 방장이 나감.\r\n        setCaptain(message.captain);\r\n        setUserInfo((prevUserInfo) =>\r\n        prevUserInfo.map((user) =>\r\n          user.userNumber === message.captain ? { ...user, ready: 1} : user\r\n        )\r\n      );\r\n      }\r\n    } else {\r\n      messageElement.classList.add(\"chat-message\");\r\n\r\n      var avatarElement = document.createElement(\"i\");\r\n      var avatarText = document.createTextNode(message.sender[0]);\r\n      avatarElement.appendChild(avatarText);\r\n      avatarElement.style.backgroundColor = getAvatarColor(message.sender);\r\n\r\n      messageElement.appendChild(avatarElement);\r\n\r\n      var usernameElement = document.createElement(\"span\");\r\n      var usernameText = document.createTextNode(message.sender);\r\n      usernameElement.appendChild(usernameText);\r\n      messageElement.appendChild(usernameElement);\r\n    }\r\n\r\n    var textElement = document.createElement(\"p\");\r\n    var messageText = document.createTextNode(message.content);\r\n    textElement.appendChild(messageText);\r\n\r\n    messageElement.appendChild(textElement);\r\n\r\n    messageAreaRef.current.appendChild(messageElement);\r\n    messageAreaRef.current.scrollTop = messageAreaRef.current.scrollHeight;\r\n  };\r\n\r\n  const getAvatarColor = (messageSender) => {\r\n    var hash = 0;\r\n    for (var i = 0; i < messageSender.length; i++) {\r\n      hash = 31 * hash + messageSender.charCodeAt(i);\r\n    }\r\n    var index = Math.abs(hash % colors.length);\r\n    return colors[index];\r\n  };\r\n  \r\n  // 음악 변경 정보 전송\r\n\r\n  const musicChange = () => {\r\n    if (Sock.readyState === SockJS.OPEN &&  pickedMusic && musicName) { // 로그인한 유저정보와 방 정보, 구독설정이 잘 되어 있다면.\r\n      var changedMusic = { // 변경된 음악정보\r\n        roomNumber: roomInfo.roomNumber,\r\n        musicNumber: pickedMusic, // 음악 번호\r\n        musicName: musicName  // 음악 이름\r\n      };\r\n      stompClient.send(\"/app/music.change\", {}, JSON.stringify(changedMusic));\r\n    }\r\n    else {\r\n      console.log(\"변경된 음악 정보 전달 실패.\");\r\n    }\r\n  }\r\n\r\n  // 레디 정보 전송\r\n  const clickReady = (event) => {\r\n    event.preventDefault();\r\n    if (userNumber && roomNumber && stompClient) { // 로그인한 유저정보와 방 정보, 구독설정이 잘 되어 있다면.\r\n      var readyFlag = { // 레디신호 데이터\r\n        roomNumber: roomNumber, // 방 번호\r\n        userNumber: userNumber  // 유저 번호\r\n      };\r\n      stompClient.send(\"/app/ready.click\", {}, JSON.stringify(readyFlag));\r\n    }\r\n    else {\r\n      console.log(\"READY신호 전달 실패.\");\r\n    }\r\n    event.preventDefault();\r\n  }\r\n\r\n  // 게임 스타트 정보 전송\r\n  const clickStart = (event) => {\r\n    event.preventDefault();\r\n\r\n    const readyCount = userInfo.filter(user => user.ready === 1).length;\r\n    if (readyCount === userInfo.length-1) {\r\n      if (userNumber && roomNumber && stompClient) { // 로그인한 유저정보와 방 정보, 구독설정이 잘 되어 있다면.\r\n        var startReq = { // 시작요청 데이터\r\n          roomNumber: roomNumber, // 방 번호\r\n          musicNumber: pickedMusic,  // 음악 번호\r\n          musicName: musicName // 음악 이름\r\n        };\r\n        \r\n        stompClient.send(\"/app/game.start\", {}, JSON.stringify(startReq));\r\n      }\r\n      else {\r\n        console.log(\"게임 시작 실패.\");\r\n      }\r\n    } else {\r\n      alert(\"아직 레디가 완료되지 않았습니다.\");\r\n    }\r\n    event.preventDefault();\r\n  }\r\n\r\n  // 채팅 보내기.\r\n  const handleSendMessage = (event) => {\r\n    event.preventDefault();\r\n    // Implement the logic to send a message using WebSocket\r\n    // You may need to add the WebSocket logic here to send messages.\r\n    if (messages && stompClient) {\r\n      var chatMessage = {\r\n        sender: name,\r\n        content: messages,\r\n        userNum: userNumber,\r\n        type: \"CHAT\",\r\n        roomNumber: roomNumber,\r\n      };\r\n      stompClient.send(\"/app/chat.sendMessage\", {}, JSON.stringify(chatMessage));\r\n      setMessages(\"\");\r\n    }\r\n    event.preventDefault();\r\n  };\r\n  const handleStartChatting = () => {\r\n    // localStorage에서 데이터 가져오기\r\n    connect();\r\n  };\r\n  if (!roomInfo) {\r\n    return <div>Loading...</div>;\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      {/* 음악 리스트 민우짱 */}\r\n      <div>\r\n      <div className=\"container\">\r\n        <div\r\n          className=\"carousel\"\r\n          style={{\r\n            transform: `rotateY(${currdeg}deg)`,\r\n            WebkitTransform: `rotateY(${currdeg}deg)`,\r\n            MozTransform: `rotateY(${currdeg}deg)`,\r\n            OTransform: `rotateY(${currdeg}deg)`,\r\n          }}\r\n        >\r\n          <div className=\"item a\"\r\n          style={{\r\n            backgroundImage: `url(${roomInfo.musics[0].thumbnail})`,\r\n            width: '250px',\r\n            backgroundSize: 'cover',\r\n            }}\r\n            onMouseEnter={() => handleMouseEnter(0)}\r\n            onMouseLeave={() => handleMouseLeave(0)}\r\n          >\r\n            {/* 선택된 곡이면 표시 */}\r\n            {pickedMusic === roomInfo.musics[0].musicNumber &&\r\n              <img className=\"pickedMusic\" src=\"https://assets-v2.lottiefiles.com/a/27d1e422-117c-11ee-afb5-33b1d01a5c73/s3QDBfQGB4.png\" alt=\"User Thumbnail\" />\r\n            }\r\n            {/* 방장만 표시: 곡 선택 버튼 */}\r\n            {captain === name && \r\n              <button className=\"pickbtn\" onClick={() => chageMusicBtn(roomInfo.musics[0].musicNumber, roomInfo.musics[0].musicName)}>PLAY</button>\r\n            }\r\n            {showTooltip[0] && (\r\n              <div\r\n                style={{\r\n                  backgroundColor: 'rgba(0, 0, 0, 0.3)',\r\n                  color: '#fff',\r\n                  borderRadius: '5px',\r\n                  overflow: 'hidden',\r\n                  fontSize: '10px',\r\n                  width: '230px',\r\n                  height: '180px'\r\n                }}\r\n              >\r\n                <div className=\"info-container\">\r\n                  <div className=\"music-name\">{roomInfo.musics[0].musicName}</div>\r\n                  <div className=\"music-details\">\r\n                    <div className=\"detail-item\">Running Time: {roomInfo.musics[0].runningTime}</div>\r\n                    <div className=\"detail-item\">Singer: {roomInfo.musics[0].singer}</div>\r\n                    <div className=\"detail-item\">Level: {roomInfo.musics[0].level}</div>\r\n                    <div className=\"detail-item\">Play Count: {roomInfo.musics[0].playCnt}</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"item b\"\r\n          style={{\r\n            backgroundImage: `url(${roomInfo.musics[1].thumbnail})`,\r\n            width: '250px',\r\n            backgroundSize: 'cover',\r\n            }}\r\n            onMouseEnter={() => handleMouseEnter(1)}\r\n            onMouseLeave={() => handleMouseLeave(1)}\r\n          >\r\n            {/* 선택된 곡이면 표시 */}\r\n            {pickedMusic === roomInfo.musics[1].musicNumber &&\r\n              <img className=\"pickedMusic\" src=\"https://assets-v2.lottiefiles.com/a/27d1e422-117c-11ee-afb5-33b1d01a5c73/s3QDBfQGB4.png\" alt=\"User Thumbnail\" />\r\n            }\r\n            {/* 방장만 표시: 곡 선택 버튼 */}\r\n            {captain === name && \r\n              <button className=\"pickbtn\" onClick={() => chageMusicBtn(roomInfo.musics[1].musicNumber, roomInfo.musics[1].musicName)}>PLAY</button>\r\n            }\r\n            {showTooltip[1] && (\r\n              <div\r\n                style={{\r\n                  backgroundColor: 'rgba(0, 0, 0, 0.3)',\r\n                  color: '#fff',\r\n                  borderRadius: '5px',\r\n                  overflow: 'hidden',\r\n                  fontSize: '10px',\r\n                  width: '230px',\r\n                  height: '180px'\r\n                }}\r\n              >\r\n                <div className=\"info-container\">\r\n                  <div className=\"music-name\">{roomInfo.musics[1].musicName}</div>\r\n                  <div className=\"music-details\">\r\n                    <div className=\"detail-item\">Running Time: {roomInfo.musics[1].runningTime}</div>\r\n                    <div className=\"detail-item\">Singer: {roomInfo.musics[1].singer}</div>\r\n                    <div className=\"detail-item\">Level: {roomInfo.musics[1].level}</div>\r\n                    <div className=\"detail-item\">Play Count: {roomInfo.musics[1].playCnt}</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"item c\"\r\n          style={{\r\n            backgroundImage: `url(${roomInfo.musics[2].thumbnail})`,\r\n            width: '250px',\r\n            backgroundSize: 'cover',\r\n            }}\r\n            onMouseEnter={() => handleMouseEnter(2)}\r\n            onMouseLeave={() => handleMouseLeave(2)}\r\n          >\r\n            {/* 선택된 곡이면 표시 */}\r\n            {pickedMusic === roomInfo.musics[2].musicNumber &&\r\n              <img className=\"pickedMusic\" src=\"https://assets-v2.lottiefiles.com/a/27d1e422-117c-11ee-afb5-33b1d01a5c73/s3QDBfQGB4.png\" alt=\"User Thumbnail\" />\r\n            }\r\n            {/* 방장만 표시: 곡 선택 버튼 */}\r\n            {captain === name && \r\n              <button className=\"pickbtn\" onClick={() => chageMusicBtn(roomInfo.musics[2].musicNumber, roomInfo.musics[2].musicName)}>PLAY</button>\r\n            }\r\n            {showTooltip[2] && (\r\n              <div\r\n                style={{\r\n                  backgroundColor: 'rgba(0, 0, 0, 0.3)',\r\n                  color: '#fff',\r\n                  borderRadius: '5px',\r\n                  overflow: 'hidden',\r\n                  fontSize: '10px',\r\n                  width: '230px',\r\n                  height: '180px'\r\n                }}\r\n              >\r\n                <div className=\"info-container\">\r\n                  <div className=\"music-name\">{roomInfo.musics[2].musicName}</div>\r\n                  <div className=\"music-details\">\r\n                    <div className=\"detail-item\">Running Time: {roomInfo.musics[2].runningTime}</div>\r\n                    <div className=\"detail-item\">Singer: {roomInfo.musics[2].singer}</div>\r\n                    <div className=\"detail-item\">Level: {roomInfo.musics[2].level}</div>\r\n                    <div className=\"detail-item\">Play Count: {roomInfo.musics[2].playCnt}</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n          {/* 가데이터 */}\r\n          <div className=\"item d\"\r\n          style={{\r\n            backgroundImage: `url(\"https://lh3.googleusercontent.com/AjWNrfzz6BqjRL5diZ-bPxFqGOsNk20xS6jcqoQWpNGWdch404mDWKVBkl4s9n74aLjXJWgldqm3Dc8=w544-h544-l90-rj\")`,\r\n            width: '250px',\r\n            backgroundSize: 'cover',\r\n            }}>\r\n            <div style={{\r\n              backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n              color: '#fff',\r\n              borderRadius: '5px',\r\n              overflow: 'hidden',\r\n              height: '180px',\r\n              display: 'list-item',\r\n            }}>\r\n              <div className=\"music-name\">COMMING SOON</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"item e\"style={{\r\n            backgroundImage: `url(\"https://i1.sndcdn.com/artworks-IaaTwyICGFYMLY7A-lZhVQQ-t500x500.jpg\")`,\r\n            width: '250px',\r\n            backgroundSize: 'cover',\r\n          }}>\r\n            <div style={{\r\n              backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n              color: '#fff',\r\n              borderRadius: '5px',\r\n              overflow: 'hidden',\r\n              height: '180px',\r\n              display: 'list-item',\r\n            }}>\r\n              <div className=\"music-name\">COMMING SOON</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"item f\" style={{\r\n            backgroundImage: `url(\"https://lh3.googleusercontent.com/FzLKj6zFEJna0gRNDeZRH4nuQwEyN-YbCaC-bIGLoia6EhirHUachdvdEdR3VdB7pArgFCW8mtpLPL0=w544-h544-l90-rj\")`,\r\n            width: '250px',\r\n            backgroundSize: 'cover',\r\n          }}>\r\n            <div style={{\r\n              backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n              color: '#fff',\r\n              borderRadius: '5px',\r\n              overflow: 'hidden',\r\n              height: '180px',\r\n              display: 'list-item',\r\n            }}>\r\n              <div className=\"music-name\">COMMING SOON</div>\r\n            </div>\r\n          </div>\r\n          \r\n          </div>\r\n        </div>\r\n      </div>\r\n        <div className=\"next\" onClick={() => rotate('next')}>Next</div>\r\n      <div className=\"prev\" onClick={() => rotate('prev')}>Prev</div>\r\n\r\n      <div className='showMusicName'>\r\n        {musicName}\r\n      </div>\r\n\r\n      <div id=\"chat-page\" className=\"hidden\">\r\n        <div className=\"chat-container\">\r\n          <div className=\"chat-header\">\r\n            <h2 id=\"roomN\">CHATTINGS\r\n            {/* {userInfo && userInfo.map((user, index) => (\r\n              <div key={index}>\r\n                <img src={user.profileImg} alt=\"프로필 이미지\" />\r\n                <br></br>\r\n                <span>{user.nickname}</span>\r\n              </div>\r\n            ))} */}\r\n            </h2>\r\n          </div>\r\n          <ul ref={messageAreaRef}></ul>\r\n          <form id=\"messageForm\" name=\"messageForm\" onSubmit={handleSendMessage}>\r\n            <div className=\"form-group\">\r\n              <div className=\"input-group clearfix\">\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"message\"\r\n                  placeholder=\"Type a message...\"\r\n                  autoComplete=\"off\"\r\n                  className=\"form-control\"\r\n                  value={messages}\r\n                  onChange={handleMessageChange}\r\n                />\r\n                <button type=\"submit\" className=\"primary\">\r\n                  Send\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n\r\n        {/* 유저 리스트 민우짱 */}\r\n        <div className='user-info'>\r\n          <div className=\"user-item\">\r\n            <div className=\"nickname\">참가자 : {userInfo.length} / {roomInfo.capacity}</div>\r\n          </div>\r\n          {userInfo && userInfo.map((user, index) => (\r\n            <div className=\"user-item\" style={{ \r\n                backgroundColor : user.nickname === captain ? '#f367d5' : userInfo[index].ready === 0 ? 'white' : '#8aeec6'\r\n              }}>\r\n              <img className=\"userImg\" src=\"https://pds.joongang.co.kr/news/component/htmlphoto_mmdata/201608/04/htm_2016080484837486184.jpg\" alt=\"User Thumbnail\" />\r\n              <div className=\"nickname\">{user.nickname}</div>\r\n              {captain === user.nickname && \r\n                <img className=\"captainlogo\" src=\"https://cdn-icons-png.flaticon.com/512/679/679660.png\" alt=\"Captain\" />\r\n              }\r\n              {captain !== user.nickname && name === user.nickname &&\r\n                <button class=\"button\" onClick={clickReady}>ready</button>\r\n              }\r\n              {captain === user.nickname && name === user.nickname &&\r\n                <button class=\"startbutton\" onClick={clickStart}>start</button>\r\n              }\r\n            </div>\r\n\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoomItem;\r\n","C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\components\\ChatRoomComponents\\ChatRoomList.js",["86","87"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport \"./ChatRoomList.css\";\r\n\r\nlet CreatedroomNumber = ''; // 전역 변수로 선언\r\n\r\nconst Modal = ({ isOpen, onClose, onCreateRoom }) => {\r\n  const [showPasswordInput, setShowPasswordInput] = useState(false);\r\n\r\n  const [showCapacityOptions, setShowCapacityOptions] = useState(false); // 방 정원 부분\r\n\r\n  const handleTogglePasswordInput = () => {\r\n    setShowPasswordInput(!showPasswordInput);\r\n  };\r\n\r\n  const handleCapacityOptionClick = (option) => {\r\n    setRoomData((prevData) => ({\r\n      ...prevData,\r\n      capacity: option,\r\n    }));\r\n    setShowCapacityOptions(false);\r\n  };\r\n  const [userNumber, setUserNumber] = useState(''); // userNumber 상태로 추가\r\n  const token = localStorage.getItem('token');\r\n  useEffect(() => {\r\n    // localStorage에서 데이터 가져오기\r\n    const token = localStorage.getItem('token');\r\n    axios({\r\n      method: 'get',\r\n      url: 'https://localhost:8443/api/v1/users/me',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}` // your access token here\r\n      }\r\n    })\r\n      .then(response => {\r\n        const userNumber = response.data.userNumber;\r\n        setUserNumber(userNumber);\r\n        console.log(userNumber);\r\n      })\r\n      .catch(error => {\r\n        const errorToken = localStorage.getItem('token');\r\n        if (!errorToken) { // token이 null 또는 undefined 또는 빈 문자열일 때\r\n          window.location.href = '/'; // 이것은 주소창에 도메인 루트로 이동합니다. 원하는 페이지 URL로 변경하세요.\r\n          return; // 함수 실행을 중단하고 반환합니다.\r\n        }\r\n        console.error(\"error\");\r\n        const token = error.response.headers.authorization.slice(7);\r\n        localStorage.setItem('token', token);\r\n        axios({\r\n          method: 'get',\r\n          url: 'https://localhost:8443/api/v1/users/me',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}` // your access token here\r\n          }\r\n        })\r\n          .then(response => {\r\n            const userNumber = response.data.userNumber;\r\n            setUserNumber(userNumber);\r\n          })\r\n          .catch(error => {\r\n            console.log(error);\r\n          })\r\n      });\r\n  }, [token]);\r\n\r\n  \r\n  const [roomData, setRoomData] = useState({\r\n    capacity: '',\r\n    categoryNumber: '',\r\n    password: '',\r\n    title: '',\r\n    userNumber: userNumber,\r\n    roomNumber: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      setRoomData({\r\n        capacity: '',\r\n        categoryNumber: '',\r\n        password: '',\r\n        title: '',\r\n        userNumber: userNumber,\r\n        roomNumber: ''\r\n      });\r\n    }\r\n  }, [isOpen, userNumber]);\r\n\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setRoomData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n      userNumber: userNumber // 기존 데이터에서 userNumber를 그대로 사용\r\n    }));\r\n  };\r\n\r\n  const handleCreateRoom = () => {\r\n    onCreateRoom(roomData);\r\n    onClose();\r\n  };\r\n\r\n  if (!isOpen) {\r\n    return null;\r\n  }\r\n\r\n  const handleChangeCategory = (categoryNumber) => {\r\n    setRoomData((prevData) => ({\r\n      ...prevData,\r\n      categoryNumber: categoryNumber,\r\n    }));\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-content\">\r\n        <h2>방만들기 창</h2>\r\n        <div>\r\n          <label>제목</label>\r\n          <input type=\"text\" name=\"title\" value={roomData.title} onChange={handleChange} />\r\n        </div>\r\n        <div>\r\n          <label>게임 유형</label>\r\n            <button onClick={() => handleChangeCategory(2)} className={roomData.categoryNumber === 2 ? 'active' : ''}\r\n            style={{\r\n              backgroundColor: roomData.categoryNumber === 2 ? 'blue' : 'transparent',\r\n              color: roomData.categoryNumber === 2 ? 'white' : 'blue',\r\n              border: '1px solid blue' \r\n            }}>\r\n              개인전\r\n            </button>\r\n            <button onClick={() => handleChangeCategory(1)} className={roomData.categoryNumber === 1 ? 'active' : ''}\r\n            style={{\r\n              backgroundColor: roomData.categoryNumber === 1 ? 'green' : 'transparent',\r\n              color: roomData.categoryNumber === 1 ? 'white' : 'green',\r\n              border: '1px solid green' \r\n            }}>\r\n              팀전\r\n            </button>\r\n        </div>\r\n        <div>\r\n          <label>\r\n            비밀번호\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showPasswordInput}\r\n              onChange={handleTogglePasswordInput}\r\n            />\r\n          </label>\r\n          {showPasswordInput && (\r\n            <input\r\n              type=\"text\"\r\n              name=\"password\"\r\n              value={roomData.password}\r\n              onChange={handleChange}\r\n            />\r\n          )}\r\n        </div>\r\n        <div>\r\n          <label>capacity</label>\r\n          {roomData.categoryNumber === 2 ? (\r\n            <div>\r\n              <input\r\n                type=\"text\"\r\n                name=\"capacity\"\r\n                value={roomData.capacity}\r\n                onChange={handleChange}\r\n                onFocus={() => setShowCapacityOptions(true)}\r\n                readOnly // 입력요소 쓰는거 방지\r\n              />\r\n              {showCapacityOptions && (\r\n                <ul className=\"capacity-options\">\r\n                  <li onClick={() => handleCapacityOptionClick(1)}>1</li>\r\n                  <li onClick={() => handleCapacityOptionClick(2)}>2</li>\r\n                  <li onClick={() => handleCapacityOptionClick(3)}>3</li>\r\n                  <li onClick={() => handleCapacityOptionClick(4)}>4</li>\r\n                </ul>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <input type=\"number\" name=\"capacity\" value={4} disabled />\r\n          )}\r\n          </div>\r\n        <button onClick={() => { handleCreateRoom();}}>확인</button>\r\n        <button onClick={onClose}>닫기</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ChatRoomList = ({}) => {\r\n  const [chatRooms, setChatRooms] = useState([]);\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n  const navigate = useNavigate();\r\n  // 비밀번호 관련\r\n  const [inputPassword, setInputPassword] = useState('');\r\n  const [showPasswordInput, setShowPasswordInput] = useState(false);\r\n\r\n  useEffect(() => {\r\n    \r\n    const fetchChatRooms = async () => {\r\n      try {\r\n        const response = await axios.get('https://localhost:8443/api/v1/gameRooms/listRooms');\r\n        const data = response.data;\r\n        setChatRooms(data);\r\n      } catch (error) {\r\n        console.error('Error fetching chat rooms:', error);\r\n      }\r\n    };\r\n    fetchChatRooms();\r\n  }, []);\r\n\r\n  const handleEnterChatRoom = (roomNumber) => {\r\n    navigate(`/chat-rooms/${roomNumber}`);\r\n  };\r\n\r\n  const checkEnterChatRoom = async (roomNumber, password) => {\r\n    var reqPassword = \"\";\r\n    if (password) {\r\n      reqPassword = inputPassword;\r\n    }\r\n    const enterData = { \"roomNumber\": roomNumber, \"password\": reqPassword };\r\n\r\n    try {\r\n      const response = await axios.post('https://localhost:8443/api/v1/gameRooms/authentication', enterData);\r\n  \r\n      const resultMessage = response.data.message;\r\n  \r\n      if (response.data.message == \"입장성공\") {\r\n        handleEnterChatRoom(roomNumber);\r\n      }\r\n      else {\r\n        alert(resultMessage);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error authentication', error);\r\n    }\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    setModalOpen(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n\r\n    setModalOpen(false);\r\n  };\r\n\r\n  const handleCreateRoom = async (roomData) => {\r\n    try {\r\n      const response = await axios.post('https://localhost:8443/api/v1/gameRooms/create', roomData);\r\n      CreatedroomNumber = response.data.roomNumber;\r\n      handleEnterChatRoom(CreatedroomNumber);\r\n    } catch (error) {\r\n      console.error('Error craating a new room:', error);\r\n    }\r\n  };\r\n\r\n  // 비밀번호 입력창 보이기/숨기기 함수\r\n  const togglePasswordInput = () => {\r\n    setShowPasswordInput(!showPasswordInput);\r\n  };\r\n  \r\n  // 비밀번호가 입력되면 실행되는 함수\r\n  const handlePasswordInput = (event) => {\r\n    setInputPassword(event.target.value);\r\n  };\r\n  \r\n  \r\n  return (\r\n    <div>\r\n      <Modal isOpen={isModalOpen} onClose={handleCloseModal} onCreateRoom={handleCreateRoom} />\r\n      <div>\r\n        <button onClick={handleOpenModal}>방만들기</button>\r\n        <hr></hr>\r\n      </div>\r\n      {chatRooms.map((room) => (\r\n        \r\n        <div key={room.id}>\r\n          {/* 비밀번호 있을때 버튼 */}\r\n          {room.password  && (\r\n            <button onClick={togglePasswordInput}>비밀번호 입력</button>\r\n          )}\r\n          {/* 비밀번호 입력창 */}\r\n          {showPasswordInput && (\r\n            <div>\r\n              <label>비밀번호 입력:</label>\r\n              <input\r\n                type=\"password\"\r\n                value={inputPassword}\r\n                onChange={handlePasswordInput}\r\n              />\r\n              <button onClick={() => checkEnterChatRoom(room.roomNumber, room.password)} style={{ cursor: 'pointer' }}>입장하기</button>\r\n            </div>\r\n          )}\r\n          {/* 비밀번호 없을때 버튼 */}\r\n          {!room.password  && (\r\n            <button onClick={() => checkEnterChatRoom(room.roomNumber, room.password)} style={{ cursor: 'pointer' }}>입장하기</button>\r\n          )}\r\n          \r\n        {/* <InputPassword isOpen={passwordModalOpen} onClose={closePasswordModal} /> */}\r\n          <p>방제목: {room.title}</p>\r\n          <p>{room.typeName}</p>\r\n          <p>방장: {room.nickname}</p>\r\n          <p>현재원/정원 {room.cntUser}/{room.capacity}</p>\r\n          <hr />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoomList;","C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\components\\RankingComponents\\Ranking.js",["88","89","90"],[],"import React, { useEffect, useState } from 'react';\r\nimport { useLocation } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport style from './Ranking.module.css';\r\n\r\n\r\nfunction MyComponent() {\r\n  const [rankList, setRankList] = useState([]);\r\n  const [ranking, setRanking] = useState(0);\r\n  const [musicList,setMusicList] = useState([]);\r\n  const [musicNumber,setMusicNumber] = useState(1);\r\n\r\n  const [userNumber, setUserNumber] = useState(''); // userNumber 상태로 추가\r\n  const token = localStorage.getItem('token');\r\n\r\n  useEffect(() => {\r\n    // localStorage에서 데이터 가져오기\r\n    const token = localStorage.getItem('token');\r\n    axios({\r\n      method: 'get',\r\n      url: 'https://localhost:8443/api/v1/users/me',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}` // your access token here\r\n      }\r\n    })\r\n      .then(response => {\r\n        const userNumber = response.data.userNumber;\r\n        setUserNumber(userNumber);\r\n        console.log(userNumber);\r\n      })\r\n      .catch(error => {\r\n        const errorToken = localStorage.getItem('token');\r\n        if (!errorToken) { // token이 null 또는 undefined 또는 빈 문자열일 때\r\n          window.location.href = '/'; // 이것은 주소창에 도메인 루트로 이동합니다. 원하는 페이지 URL로 변경하세요.\r\n          return; // 함수 실행을 중단하고 반환합니다.\r\n        }\r\n        const token = error.response.headers.authorization.slice(7);\r\n        localStorage.setItem('token', token);\r\n        axios({\r\n          method: 'get',\r\n          url: 'https://localhost:8443/api/v1/users/me',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}` // your access token here\r\n          }\r\n        })\r\n          .then(response => {\r\n            const userNumber = response.data.userNumber;\r\n            setUserNumber(userNumber);\r\n            console.log(userNumber);\r\n          })\r\n          .catch(error => {\r\n            console.log(error);\r\n          })\r\n      });\r\n  }, [token]);\r\n\r\n  \r\n  useEffect(()=>{\r\n    axios.get(`https://localhost:8443/api/v1/game/music`)\r\n      .then(response => {\r\n        const data = response.data;\r\n        setMusicList(data.musics);\r\n      })\r\n      .catch(error => {\r\n        // error handling\r\n        console.error('Something went wrong', error);\r\n      });\r\n  },[musicNumber,userNumber]); // empty dependency array means this effect runs once on mount\r\n\r\n  useEffect(() => {\r\n    axios.get(`https://localhost:8443/api/v1/game/rank?musicNumber=${musicNumber}&userNumber=${userNumber}`)\r\n      .then(response => {\r\n        const data = response.data;\r\n        setRankList(data.ranks);\r\n        setRanking(data.userRanking);\r\n      })\r\n      .catch(error => {\r\n        // error handling\r\n        console.error('Something went wrong', error);\r\n      });\r\n  }, [musicNumber,userNumber]); // empty dependency array means this effect runs once on mount\r\n\r\n  return (\r\n    <div className={style.flex_container}>\r\n      <div className={`${style.flex_item} ${style.item1}`}> \r\n        <ul>\r\n          {musicList && musicList.map((item, index) => \r\n            <li key={index} style={{color:`white`,fontSize:`20px`}}>\r\n              music Number: {item.musicNumber}, music Name: {item.musicName}, music level: {item.level} music thumbnail: {item.thumbnail}\r\n            </li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n      <div className={`${style.flex_item} ${style.item2}`}> \r\n        <ul>\r\n          {musicList && musicList.map((item, index) => \r\n            <li key={index} style={{color:`white`,fontSize:`20px`}}>\r\n              music Number2: {item.musicNumber}, music Name: {item.musicName}, music level: {item.level} music thumbnail: {item.thumbnail}\r\n            </li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n      <div className={`${style.flex_item} ${style.item3}`}> \r\n        <ul>\r\n          {rankList && rankList.map((item, index) => \r\n            <li key={index} style={{color:`white`}}>\r\n              Rank Number: {item.rankNumber}, Score: {item.score}, Play Date Time: {item.playDateTime}\r\n              User: {item.userDTO.nickname}, Music: {item.musicDTO.musicName} 안녕하세요\r\n            </li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MyComponent;","C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\components\\PlayingComponents\\OpenVidu.js",[],[],"C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\components\\PlayingComponents\\HandModel.js",["91","92","93","94"],[],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { HAND_CONNECTIONS } from \"@mediapipe/hands\";\r\nimport { drawLandmarks, drawConnectors } from \"@mediapipe/drawing_utils\";\r\nimport { Button } from \"@mui/material\";\r\nimport axios from \"axios\";\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { FilesetResolver, GestureRecognizer } from \"@mediapipe/tasks-vision\"; // 정적 임포트\r\n\r\nlet gestureRecognizer = undefined;\r\nlet category1Name = undefined;\r\nlet category2Name = undefined;\r\nlet hitSound = new Audio(\"/assets/Hit.mp3\");\r\nlet shouldStopPrediction = false; // 처음에는 false로 설정\r\n\r\n// mediaPipe 모션네임\r\nconst motionNames = {\r\n  1: \"Closed_Fist\",\r\n  2: \"Open_Palm\",\r\n  3: \"Pointing_Up\",\r\n  4: \"Victory\",\r\n  5: \"Thumb_Up\",\r\n  6: \"Thumb_Down\",\r\n  7: \"ILoveYou\",\r\n};\r\n\r\n// Gesture Recognizer를 생성하는 비동기 함수\r\nconst createGestureRecognizer = async () => {\r\n  const vision = await FilesetResolver.forVisionTasks(\r\n    \"https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.0/wasm\"\r\n  );\r\n  gestureRecognizer = await GestureRecognizer.createFromOptions(vision, {\r\n    baseOptions: {\r\n      modelAssetPath:\r\n        \"https://storage.googleapis.com/mediapipe-models/gesture_recognizer/gesture_recognizer/float16/1/gesture_recognizer.task\",\r\n      delegate: \"GPU\",\r\n    },\r\n    runningMode: \"VIDEO\",\r\n    numHands: 2,\r\n  });\r\n};\r\n\r\nexport default function HandModel() {\r\n  // 컴포넌트 상태 및 ref를 선언\r\n  const token = localStorage.getItem(\"token\");\r\n  const videoRef = useRef(null); // 비디오 엘리먼트를 참조하기 위한 ref\r\n  const videoSrcRef = useRef(null); \r\n  const showBackground = useState(false);\r\n  const [videoHidden, setVideoHidden] = useState(true);\r\n  const [videoSize, setVideoSize] = useState({ width: 0, height: 0 }); // 비디오의 크기를 저장하는 상태\r\n  const [countdown, setCountdown] = useState(3);\r\n  const navigate = useNavigate();\r\n  const [score, setScore] = useState(0);\r\n  const scoreRef = useRef(score);\r\n  const [userNum, setUserNum] = useState(null);\r\n  const userNumRef = useRef(userNum);\r\n  const [musicNum, setMusicNum] = useState(null);\r\n  const musicNumRef = useRef(musicNum)\r\n\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    const unblock = window.history.pushState(null, \"\", window.location.href);\r\n    window.onpopstate = function(event) {\r\n      window.history.go(1);\r\n      alert(\"게임 중 뒤로 가기는 사용할 수 없습니다.\"); // 알림 추가\r\n      navigate(location);\r\n    };\r\n\r\n    return () => {\r\n      window.onpopstate = null;\r\n    };\r\n  }, [navigate, location]);\r\n  // 배경의 표시 상태를 토글하는 함수\r\n  const toggleBackground = () => {\r\n    setVideoHidden(!videoHidden);\r\n  };\r\n  \r\n  // window의 크기를 저장하는 상태\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n  });\r\n  \r\n  useEffect(() => {\r\n    const handleBeforeUnload = (e) => {\r\n        e.preventDefault();\r\n        e.returnValue = '정말로 페이지를 떠나시겠습니까?';\r\n    };\r\n    \r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n\r\n    return () => {\r\n        window.removeEventListener('beforeunload', handleBeforeUnload);\r\n    };\r\n}, []);\r\n\r\n  \r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: \"https://localhost:8443/api/v1/users/me\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`, // your access token here\r\n      },\r\n    })\r\n    .then((response) => {\r\n      setUserNum(response.data.userNumber)\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"error\");\r\n      const token = error.response.headers.authorization.slice(7);\r\n      localStorage.setItem(\"token\", token);\r\n      axios({\r\n        method: \"get\",\r\n        url: \"https://localhost:8443/api/v1/users/me\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`, // your access token here\r\n        },\r\n      })\r\n        .then((response) => {\r\n          setUserNum(response.data.userNumber)\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    })\r\n  }, [userNum]);\r\n\r\n  const sendData = async () => {\r\n    // 객체 생성\r\n    const data = {\r\n        musicNumber: musicNumRef.current,\r\n        score: scoreRef.current, \r\n        userNumber: userNumRef.current\r\n    };\r\n    console.log(data);\r\n\r\n    // 헤더 설정\r\n    const headers = {\r\n        'Authorization': `Bearer ${token}`\r\n    };\r\n\r\n    try {\r\n        // POST 요청을 통해 데이터 전송\r\n        const response = await axios.post('https://localhost:8443/api/v1/game/log', data, { headers: headers });\r\n        console.log(\"Response:\", response.data);\r\n    } catch (error) {\r\n        console.error(\"Error sending the data:\", error);\r\n    }\r\n}\r\n\r\n\r\n  // window의 크기가 변경될 때 windowSize 상태를 업데이트하는 함수\r\n  const updateWindowDimensions = () => {\r\n    setWindowSize({ width: window.innerWidth, height: window.innerHeight });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scoreRef.current = score;  // score 값이 변경될 때마다 ref를 업데이트합니다.\r\n    userNumRef.current = userNum; \r\n    musicNumRef.current = musicNum;\r\n  }, [score, userNum, musicNum]);\r\n\r\n    const props = useSpring({\r\n      from: { val: 0 },\r\n      to: { val: score },\r\n      config: { duration: 800 },\r\n      reset: false,\r\n    });\r\n  \r\n    const increaseScore = (amount) => {\r\n      setScore((prevScore) => prevScore + amount);\r\n    };\r\n\r\n  // window의 크기가 변경될 때마다 updateWindowDimensions 함수를 실행하도록 이벤트 리스너를 등록하는 useEffect\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", updateWindowDimensions);\r\n    return () => window.removeEventListener(\"resize\", updateWindowDimensions);\r\n  }, []);\r\n\r\n  // 컴포넌트가 마운트될 때 카운트다운을 시작\r\n  useEffect(() => {\r\n    shouldStopPrediction = false;\r\n    const fetchDataAndPredict = async () => {\r\n        const data = await fetchData();  // fetchData가 데이터를 반환하도록 수정\r\n        await createGestureRecognizer();\r\n        await handleStartStreaming();\r\n        await predictWebcam();\r\n        return data;  // 데이터 반환\r\n    };\r\n    \r\n    fetchDataAndPredict().then((data) => {\r\n      const audio = new Audio(\"/music/6.mp3\");\r\n      const finish = new Audio(\"/assets/Finish.mp3\");\r\n      audio.volume = 0.3; // 볼륨 30%로 설정\r\n      finish.volume = 0.3; //\r\n      audio.loop = false;\r\n      finish.loop = false;\r\n      \r\n      const timer = setInterval(() => {\r\n        setCountdown((prevCountdown) => {\r\n          if (prevCountdown > 1) {\r\n            return prevCountdown - 1;\r\n          } else {\r\n            clearInterval(timer);\r\n            audio.play();\r\n\r\n            if (videoSrcRef.current) {\r\n              videoSrcRef.current.play();\r\n            }\r\n            createCircles(data);\r\n            // Audio가 끝날 때 'finish' 재생\r\n            audio.onended = () => {\r\n              finish.play();\r\n\r\n              // 'finish'가 끝나면 비디오를 멈추고 메인 페이지로 이동\r\n              finish.onended = () => {\r\n                if (videoRef.current && videoRef.current.srcObject) {\r\n                  const tracks = videoRef.current.srcObject.getTracks();\r\n                  tracks.forEach((track) => {\r\n                    track.stop();\r\n                  });\r\n                    shouldStopPrediction = true;  // or stopPredictWebcam();\r\n                  videoRef.current.srcObject = null;\r\n                  // 페이지 이동\r\n                  sendData()\r\n                \r\n                  navigate('/');\r\n                }\r\n              }\r\n            };\r\n            return () => {\r\n              shouldStopPrediction = true;\r\n              videoRef.current.srcObject = null;\r\n            };\r\n          }\r\n        });\r\n      }, 500);\r\n    });\r\n  }, []);\r\n\r\n\r\n  // 웹캠 스트림을 시작하는 비동기 함수\r\n  const handleStartStreaming = async () => {\r\n    try {\r\n      const height = windowSize.height;\r\n      const width = (height * 15) / 9;\r\n\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        video: { width: { ideal: width }, height: { ideal: height } },\r\n      });\r\n\r\n      videoRef.current.srcObject = stream;\r\n      videoRef.current.width = width;\r\n      videoRef.current.height = height;\r\n\r\n      setVideoSize({ width, height });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n// fetchData 함수를 수정하여 데이터를 가져와서 반환\r\nconst fetchData = async () => {\r\n  try {\r\n      const response = await axios.get(\"/music/6.json\");\r\n      const data = response.data; // 가져온 데이터\r\n      return data;  // 데이터 반환\r\n  } catch (error) {\r\n    console.error(\"Error fetching the JSON data:\", error);\r\n  }\r\n};\r\n\r\n  // fetchData 함수를 수정하여 데이터를 가져와서 nodes에 저장하고 웹캠 위에 원 그리기\r\n  const createCircles = async (data) => {\r\n    data.forEach((node) => {\r\n      setTimeout(() => {\r\n        // circle 클래스를 가진 div를 생성합니다.\r\n        const circleDiv = document.createElement(\"div\");\r\n        circleDiv.className = \"circle\";\r\n        // circle Node의 테두리 div\r\n        const circleOut = document.createElement(\"div\");\r\n        circleOut.className = \"circle-out\";\r\n\r\n        // MOTION_NUM을 확인하여 'motion' + MOTION_NUM 클래스를 추가합니다.\r\n        circleDiv.classList.add('motion' + node.MOTION_NUM);\r\n\r\n        // webcam의 위치와 크기를 얻습니다.\r\n        const webcamWrapper = document.getElementById(\"webcamWrapper\");\r\n        const webcamRect = webcamWrapper.getBoundingClientRect();\r\n\r\n        // div의 위치를 설정합니다. X-COORDINATE와 Y-COORDINATE 값은 0~1 범위라고 가정합니다.\r\n        circleDiv.style.left = `calc(${webcamRect.width -\r\n            (webcamRect.left + node[\"X-COORDINATE\"] * webcamRect.width)}px - 50px)`;\r\n        circleDiv.style.top = `calc(${\r\n            webcamRect.top + node[\"Y-COORDINATE\"] * webcamRect.height}px - 50px)`;\r\n        circleOut.style.left = `calc(${webcamRect.width -\r\n            (webcamRect.left + node[\"X-COORDINATE\"] * webcamRect.width)}px - 100px)`;\r\n        circleOut.style.top = `calc(${\r\n            webcamRect.top + node[\"Y-COORDINATE\"] * webcamRect.height}px - 100px)`;\r\n\r\n        // div를 웹캠의 컨테이너인 webcamWrapper에 추가합니다.\r\n        webcamWrapper.appendChild(circleDiv);\r\n        webcamWrapper.appendChild(circleOut);\r\n\r\n        // 애니메이션 시작\r\n        let scale = 1;\r\n        let scaleStep = 0.018;\r\n\r\n        function animate() {\r\n          scale -= scaleStep;\r\n          circleOut.style.transform = `scale(${scale})`;\r\n      \r\n          if(scale > 0.2) {  // 원의 크기가 0.3가 될 때까지만 애니메이션을 계속합니다.\r\n              requestAnimationFrame(animate);\r\n          } else {  // scale이 0.2 이하가 되면 div를 삭제합니다.\r\n              webcamWrapper.removeChild(circleDiv);\r\n              webcamWrapper.removeChild(circleOut);\r\n          }\r\n        }\r\n        animate();\r\n      }, node.APPEAR_TIME * 1000); // APPEAR_TIME은 초 단위로 가정합니다.\r\n    });\r\n  } \r\n\r\n  // 웹캠에서 예측을 수행하는 비동기 함수\r\n  async function predictWebcam() {\r\n    if (shouldStopPrediction) return;\r\n    let nowInMs = Date.now();\r\n    let results = gestureRecognizer.recognizeForVideo(\r\n      videoRef.current,\r\n      nowInMs\r\n    );\r\n\r\n    // 캔버스에 그리기 위한 설정\r\n    const canvasElement = document.getElementById(\"canvas\");\r\n    const canvasCtx = canvasElement.getContext(\"2d\");\r\n    canvasCtx.save();\r\n    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\r\n    // 결과가 있다면 캔버스에 그림\r\n    // 결과가 있다면 캔버스에 그림\r\nif (results.landmarks) {\r\n  for (let landmarks of results.landmarks) {\r\n    // 커넥터를 그릴 때 색상을 검은색(#000000), 굵기는 5로 변경합니다.\r\n    drawConnectors(canvasCtx, landmarks, HAND_CONNECTIONS, {\r\n      color: \"beige\",\r\n      lineWidth: 5,\r\n    });\r\n    // 각 랜드마크에 대해서는 선 색상을 강아지 발색인 베이지색(#F5F5DC), 굵기는 2로 변경합니다.\r\n    drawLandmarks(canvasCtx, landmarks, { color: \"#F5F5DC\", lineWidth: 2 });\r\n  }\r\n}\r\ncanvasCtx.restore();\r\n\r\n\r\n    let handX = 0;\r\n    let handY = 0;\r\n\r\n    // 예측 결과를 처리\r\n    if (results.gestures.length > 0) {\r\n      // console.log(`x: ${results.landmarks[0][9].x.toFixed(5)}, y: ${results.landmarks[0][9].y.toFixed(5)}`);\r\n      category1Name = results.gestures[0][0].categoryName;\r\n      handX = results.landmarks[0][9].x;\r\n      handY = results.landmarks[0][9].y;\r\n      hideCircle(handX, handY, category1Name);\r\n\r\n      // 두 번째 예측 결과가 있다면 처리\r\n      if (results.gestures.length > 1) {\r\n        category2Name = results.gestures[1][0].categoryName;\r\n        handX = results.landmarks[1][9].x;\r\n        handY = results.landmarks[1][9].y;\r\n        hideCircle(handX, handY, category2Name);\r\n      }\r\n    }\r\n\r\n    // shouldStopPrediction 상태가 true라면 함수 종료\r\n    \r\n    // 다음 프레임을 요청하여 계속해서 예측을 수행\r\n    window.requestAnimationFrame(predictWebcam);\r\n  }\r\n\r\n  function hideCircle(handX, handY, categoryName) {\r\n    const circleElements = document.querySelectorAll(\".circle\");\r\n    circleElements.forEach((circleElement) => {\r\n        // 원형 div의 위치를 얻습니다. (0~1 범위로 변환)\r\n        const circleX =\r\n            1 -\r\n            parseFloat((parseFloat(circleElement.style.left.replace(/[^\\d.]/g, ''))) + 50) /\r\n            document.getElementById(\"webcamWrapper\").offsetWidth;\r\n        const circleY =\r\n            parseFloat((parseFloat(circleElement.style.top.replace(/[^\\d.]/g, ''))) + 50) /\r\n            document.getElementById(\"webcamWrapper\").offsetHeight;\r\n\r\n        const motionNum = circleElement.className.split(\" \")[1].replace(\"motion\", \"\");\r\n\r\n        if (motionNames[motionNum] === categoryName) { \r\n            // 손의 위치와 원형 div의 위치 사이의 거리를 계산합니다.\r\n            const distance = Math.sqrt(\r\n            Math.pow(handX - circleX, 2) + Math.pow(handY - circleY, 2)\r\n            );\r\n        \r\n            // 거리가 특정 임계값 이하이면 원형 div를 삭제합니다.\r\n            const threshold = 0.05; // 필요에 따라 이 값을 조정할 수 있습니다.\r\n            if (distance <= threshold && circleElement.style.display !== \"none\") {\r\n                circleElement.style.display = \"none\";\r\n                \r\n                \r\n                // circleElement와 동일한 위치에 있는 .circle-out 요소를 찾습니다.\r\n                const circleOutElement = Array.from(document.querySelectorAll(\".circle-out\")).find((element) => {\r\n                    const circleOutX = \r\n                        1 -\r\n                        parseFloat((parseFloat(element.style.left.replace(/[^\\d.]/g, ''))) + 100) /\r\n                        document.getElementById(\"webcamWrapper\").offsetWidth;\r\n                    const circleOutY =\r\n                        parseFloat((parseFloat(element.style.top.replace(/[^\\d.]/g, ''))) + 100) /\r\n                        document.getElementById(\"webcamWrapper\").offsetHeight;\r\n                    \r\n                    return Math.abs(circleOutX - circleX) < threshold && Math.abs(circleOutY - circleY) < threshold;\r\n                });\r\n\r\n                if (circleOutElement) {\r\n                  // Parse the scale value from the transform style\r\n                  let scaleValue = parseFloat(circleOutElement.style.transform.replace(\"scale(\", \"\").replace(\")\", \"\"));\r\n              \r\n                  if (scaleValue >= 0.65) {\r\n                      circleOutElement.style.display = \"none\";\r\n                      hitSound.play()\r\n                      console.log(\"Miss\", scaleValue)\r\n                  }\r\n                  else if (scaleValue < 0.65 && scaleValue > 0.58) {\r\n                      circleOutElement.style.display = \"none\";\r\n                      hitSound.play()\r\n                      increaseScore(200);\r\n                      console.log(\"Great\", scaleValue)\r\n                  }\r\n                  else if (scaleValue <= 0.58 && scaleValue >= 0.42) {\r\n                      circleOutElement.style.display = \"none\";\r\n                      hitSound.play()\r\n                      increaseScore(300);\r\n                      console.log(\"Perfect\", scaleValue)\r\n                  }\r\n                  else {\r\n                      circleOutElement.style.display = \"none\";\r\n                      hitSound.play()\r\n                      increaseScore(200);\r\n                      console.log(\"Under Great\", scaleValue)\r\n                  }\r\n              }\r\n              \r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n  // 컴포넌트의 반환 값 (렌더링 결과)\r\n  return (\r\n    <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n      <div id=\"loading\" hidden={videoSize.width !== 0}>\r\n      <h1>로딩중입니다.</h1>\r\n    </div>\r\n    <div\r\n      id=\"webcamWrapper\"\r\n      hidden={videoSize.width === 0}\r\n        style={{\r\n          position: \"relative\",\r\n          width: videoSize.width,\r\n          height: videoSize.height\r\n        }}\r\n      >\r\n      <div id=\"score\">\r\n      <animated.div>\r\n        {props.val.to(val => `Score : ${Math.floor(val)}`)}\r\n      </animated.div>\r\n    </div>\r\n      <video\r\n        hidden={!videoHidden} // videoHidden 상태에 따라 숨김/표시를 결정합니다.\r\n        ref={videoSrcRef} // videoSrcRef를 사용합니다.\r\n        id=\"videoSrc\"\r\n        src=\"/music/YOASOBI-IDOL.mp4\" // 비디오 파일의 URL을 지정합니다.\r\n        style={{\r\n          position: \"absolute\",\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          objectFit: \"cover\",\r\n          transform: \"scaleX(1)\",\r\n        }}/>\r\n      <video\r\n        hidden={videoHidden}\r\n        ref={videoRef}\r\n        id=\"webcam\"\r\n        autoPlay\r\n        style={{ position: \"absolute\", transform: \"scaleX(-1)\", filter: \"brightness(40%)\"}}/>\r\n      <canvas\r\n        id=\"canvas\"\r\n        width={videoSize.width}\r\n        height={videoSize.height}/>\r\n            <Button\r\n              id = \"toggleWebcam\"\r\n              variant=\"contained\"\r\n              onClick={toggleBackground}>\r\n              {showBackground ? \"Webcam ON\" : \"Webcam OFF\"}\r\n            </Button>\r\n      {countdown > 0 && (\r\n        <div id=\"countdown\" style={{ fontSize: \"100px\" }}>\r\n          {countdown}\r\n        </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}","C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\components\\PlayingComponents\\UserVideoComponent.js",[],[],"C:\\ssafy\\workspace\\Common_project_2_real\\catchpalm\\my-app\\src\\components\\PlayingComponents\\OvVideo.js",[],[],{"ruleId":"95","severity":1,"message":"96","line":152,"column":9,"nodeType":"97","endLine":152,"endColumn":21},{"ruleId":"95","severity":1,"message":"96","line":159,"column":11,"nodeType":"97","endLine":159,"endColumn":23},{"ruleId":"95","severity":1,"message":"96","line":166,"column":11,"nodeType":"97","endLine":166,"endColumn":23},{"ruleId":"98","severity":1,"message":"99","line":8,"column":10,"nodeType":"100","messageId":"101","endLine":8,"endColumn":21},{"ruleId":"98","severity":1,"message":"102","line":31,"column":9,"nodeType":"100","messageId":"101","endLine":31,"endColumn":17},{"ruleId":"98","severity":1,"message":"103","line":36,"column":11,"nodeType":"100","messageId":"101","endLine":36,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":47,"column":6,"nodeType":"106","endLine":47,"endColumn":17,"suggestions":"107"},{"ruleId":"104","severity":1,"message":"108","line":107,"column":6,"nodeType":"106","endLine":107,"endColumn":30,"suggestions":"109"},{"ruleId":"104","severity":1,"message":"110","line":174,"column":6,"nodeType":"106","endLine":174,"endColumn":18,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":196,"column":23,"nodeType":"114","messageId":"115","endLine":196,"endColumn":25},{"ruleId":"116","severity":1,"message":"117","line":234,"column":33,"nodeType":"118","messageId":"115","endLine":234,"endColumn":35},{"ruleId":"98","severity":1,"message":"119","line":2,"column":10,"nodeType":"100","messageId":"101","endLine":2,"endColumn":21},{"ruleId":"98","severity":1,"message":"120","line":9,"column":10,"nodeType":"100","messageId":"101","endLine":9,"endColumn":17},{"ruleId":"98","severity":1,"message":"121","line":11,"column":22,"nodeType":"100","messageId":"101","endLine":11,"endColumn":36},{"ruleId":"98","severity":1,"message":"122","line":57,"column":20,"nodeType":"100","messageId":"101","endLine":57,"endColumn":31},{"ruleId":"98","severity":1,"message":"123","line":63,"column":11,"nodeType":"100","messageId":"101","endLine":63,"endColumn":18},{"ruleId":"104","severity":1,"message":"124","line":130,"column":6,"nodeType":"106","endLine":130,"endColumn":15,"suggestions":"125"},{"ruleId":"104","severity":1,"message":"126","line":243,"column":6,"nodeType":"106","endLine":243,"endColumn":8,"suggestions":"127"},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'allResolved' is defined but never used.","Identifier","unusedVar","'navigate' is assigned a value but never used.","'gameStartRes' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'startMusic', 'startMusicName', 'startRoom', and 'userNumber'. Either include them or remove the dependency array.","ArrayExpression",["128"],"React Hook useEffect has missing dependencies: 'captain' and 'musicChange'. Either include them or remove the dependency array.",["129"],"React Hook useEffect has missing dependencies: 'handleStartChatting', 'roomNumber', and 'token'. Either include them or remove the dependency array.",["130"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'useLocation' is defined but never used.","'ranking' is assigned a value but never used.","'setMusicNumber' is assigned a value but never used.","'setMusicNum' is assigned a value but never used.","'unblock' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["131"],"React Hook useEffect has missing dependencies: 'handleStartStreaming', 'navigate', 'predictWebcam', and 'sendData'. Either include them or remove the dependency array.",["132"],{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},"Update the dependencies array to be: [gameStart, startMusic, startMusicName, startRoom, userNumber]",{"range":"143","text":"144"},"Update the dependencies array to be: [pickedMusic, musicName, captain, musicChange]",{"range":"145","text":"146"},"Update the dependencies array to be: [handleStartChatting, roomNumber, token, userNumber]",{"range":"147","text":"148"},"Update the dependencies array to be: [token, userNum]",{"range":"149","text":"150"},"Update the dependencies array to be: [handleStartStreaming, navigate, predictWebcam, sendData]",{"range":"151","text":"152"},[1452,1463],"[gameStart, startMusic, startMusicName, startRoom, userNumber]",[3415,3439],"[pickedMusic, musicName, captain, musicChange]",[5634,5646],"[handleStartChatting, roomNumber, token, userNumber]",[4066,4075],"[token, userNum]",[7541,7543],"[handleStartStreaming, navigate, predictWebcam, sendData]"]