{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OpenViduLogger = void 0;\nvar jsnlog_1 = require(\"jsnlog\");\nvar ConsoleLogger_1 = require(\"./ConsoleLogger\");\nvar OpenViduLoggerConfiguration_1 = require(\"./OpenViduLoggerConfiguration\");\nvar OpenViduLogger = /** @class */function () {\n  function OpenViduLogger() {\n    this.JSNLOG_URL = '/openvidu/elk/openvidu-browser-logs';\n    this.MAX_JSNLOG_BATCH_LOG_MESSAGES = 100;\n    this.MAX_MSECONDS_BATCH_MESSAGES = 5000;\n    this.MAX_LENGTH_STRING_JSON = 1000;\n    this.defaultConsoleLogger = new ConsoleLogger_1.ConsoleLogger(globalThis.console);\n    this.isProdMode = false;\n    this.isJSNLogSetup = false;\n  }\n  /**\n   * @hidden\n   */\n  OpenViduLogger.configureJSNLog = function (openVidu, token) {\n    var _this = this;\n    try {\n      // If dev mode or...\n      if (globalThis['LOG_JSNLOG_RESULTS'] ||\n      // If instance is created and it is OpenVidu Pro\n      this.instance && openVidu.isAtLeastPro &&\n      // If logs are enabled\n      this.instance.isOpenViduBrowserLogsDebugActive(openVidu) &&\n      // Only reconfigure it if session or finalUserId has changed\n      this.instance.canConfigureJSNLog(openVidu, this.instance)) {\n        // Check if app logs can be sent\n        // and replace console.log function to send\n        // logs of the application\n        if (openVidu.sendBrowserLogs === OpenViduLoggerConfiguration_1.OpenViduLoggerConfiguration.debug_app) {\n          this.instance.replaceWindowConsole();\n        }\n        // isJSNLogSetup will not be true until completed setup\n        this.instance.isJSNLogSetup = false;\n        this.instance.info('Configuring JSNLogs.');\n        var finalUserId_1 = openVidu.finalUserId;\n        var sessionId_1 = openVidu.session.sessionId;\n        var beforeSendCallback = function (xhr) {\n          // If 401 or 403 or 404 modify ready and status so JSNLog don't retry to send logs\n          // https://github.com/mperdeck/jsnlog.js/blob/v2.30.0/jsnlog.ts#L805-L818\n          var parentReadyStateFunction = xhr.onreadystatechange;\n          xhr.onreadystatechange = function () {\n            if (_this.isInvalidResponse(xhr)) {\n              Object.defineProperty(xhr, 'readyState', {\n                value: 4\n              });\n              Object.defineProperty(xhr, 'status', {\n                value: 200\n              });\n              // Disable JSNLog too to not send periodically errors\n              _this.instance.disableLogger();\n            }\n            parentReadyStateFunction();\n          };\n          // Headers to identify and authenticate logs\n          xhr.setRequestHeader('Authorization', 'Basic ' + btoa(\"\".concat(finalUserId_1, \"%/%\").concat(sessionId_1) + ':' + token));\n          xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n          // Additional headers for OpenVidu\n          xhr.setRequestHeader('OV-Final-User-Id', finalUserId_1);\n          xhr.setRequestHeader('OV-Session-Id', sessionId_1);\n          xhr.setRequestHeader('OV-Token', token);\n        };\n        // Creation of the appender.\n        this.instance.currentAppender = jsnlog_1.JL.createAjaxAppender(\"appender-\".concat(finalUserId_1, \"-\").concat(sessionId_1));\n        this.instance.currentAppender.setOptions({\n          beforeSend: beforeSendCallback,\n          maxBatchSize: 1000,\n          batchSize: this.instance.MAX_JSNLOG_BATCH_LOG_MESSAGES,\n          batchTimeout: this.instance.MAX_MSECONDS_BATCH_MESSAGES\n        });\n        // Avoid circular dependencies\n        var logSerializer = function (obj) {\n          var getCircularReplacer = function () {\n            var seen = new WeakSet();\n            return function (key, value) {\n              if (typeof value === 'object' && value != null) {\n                if (seen.has(value) || globalThis.HTMLElement && value instanceof HTMLElement) {\n                  return;\n                }\n                seen.add(value);\n              }\n              return value;\n            };\n          };\n          // Cut long messages\n          var stringifyJson = JSON.stringify(obj, getCircularReplacer());\n          if (stringifyJson.length > _this.instance.MAX_LENGTH_STRING_JSON) {\n            stringifyJson = \"\".concat(stringifyJson.substring(0, _this.instance.MAX_LENGTH_STRING_JSON), \"...\");\n          }\n          if (globalThis['LOG_JSNLOG_RESULTS']) {\n            console.log(stringifyJson);\n          }\n          return stringifyJson;\n        };\n        // Initialize JL to send logs\n        jsnlog_1.JL.setOptions({\n          defaultAjaxUrl: openVidu.httpUri + this.instance.JSNLOG_URL,\n          serialize: logSerializer,\n          enabled: true\n        });\n        (0, jsnlog_1.JL)().setOptions({\n          appenders: [this.instance.currentAppender]\n        });\n        this.instance.isJSNLogSetup = true;\n        this.instance.loggingSessionId = sessionId_1;\n        this.instance.info('JSNLog configured.');\n      }\n    } catch (e) {\n      // Print error\n      console.error('Error configuring JSNLog: ');\n      console.error(e);\n      // Restore defaults values just in case any exception happen-\n      this.instance.disableLogger();\n    }\n  };\n  /**\n   * @hidden\n   */\n  OpenViduLogger.getInstance = function () {\n    if (!OpenViduLogger.instance) {\n      OpenViduLogger.instance = new OpenViduLogger();\n    }\n    return OpenViduLogger.instance;\n  };\n  OpenViduLogger.isInvalidResponse = function (xhr) {\n    return xhr.status == 401 || xhr.status == 403 || xhr.status == 404 || xhr.status == 0;\n  };\n  OpenViduLogger.prototype.canConfigureJSNLog = function (openVidu, logger) {\n    return openVidu.session.sessionId != logger.loggingSessionId;\n  };\n  OpenViduLogger.prototype.isOpenViduBrowserLogsDebugActive = function (openVidu) {\n    return openVidu.sendBrowserLogs === OpenViduLoggerConfiguration_1.OpenViduLoggerConfiguration.debug || openVidu.sendBrowserLogs === OpenViduLoggerConfiguration_1.OpenViduLoggerConfiguration.debug_app;\n  };\n  // Return console functions with jsnlog integration\n  OpenViduLogger.prototype.getConsoleWithJSNLog = function () {\n    return function (openViduLogger) {\n      return {\n        log: function () {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          openViduLogger.defaultConsoleLogger.log.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n          if (openViduLogger.isJSNLogSetup) {\n            (0, jsnlog_1.JL)().info(arguments);\n          }\n        },\n        info: function () {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          openViduLogger.defaultConsoleLogger.info.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n          if (openViduLogger.isJSNLogSetup) {\n            (0, jsnlog_1.JL)().info(arguments);\n          }\n        },\n        debug: function () {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          openViduLogger.defaultConsoleLogger.debug.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n        },\n        warn: function () {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          openViduLogger.defaultConsoleLogger.warn.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n          if (openViduLogger.isJSNLogSetup) {\n            (0, jsnlog_1.JL)().warn(arguments);\n          }\n        },\n        error: function () {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          openViduLogger.defaultConsoleLogger.error.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n          if (openViduLogger.isJSNLogSetup) {\n            (0, jsnlog_1.JL)().error(arguments);\n          }\n        }\n      };\n    }(this);\n  };\n  OpenViduLogger.prototype.replaceWindowConsole = function () {\n    globalThis.console = this.defaultConsoleLogger.logger;\n    globalThis.console.log = this.getConsoleWithJSNLog().log;\n    globalThis.console.info = this.getConsoleWithJSNLog().info;\n    globalThis.console.debug = this.getConsoleWithJSNLog().debug;\n    globalThis.console.warn = this.getConsoleWithJSNLog().warn;\n    globalThis.console.error = this.getConsoleWithJSNLog().error;\n  };\n  OpenViduLogger.prototype.disableLogger = function () {\n    jsnlog_1.JL.setOptions({\n      enabled: false\n    });\n    this.isJSNLogSetup = false;\n    this.loggingSessionId = undefined;\n    this.currentAppender = undefined;\n    globalThis.console = this.defaultConsoleLogger.logger;\n    globalThis.console.log = this.defaultConsoleLogger.log;\n    globalThis.console.info = this.defaultConsoleLogger.info;\n    globalThis.console.debug = this.defaultConsoleLogger.debug;\n    globalThis.console.warn = this.defaultConsoleLogger.warn;\n    globalThis.console.error = this.defaultConsoleLogger.error;\n  };\n  /**\n   * @hidden\n   */\n  OpenViduLogger.prototype.log = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this.isProdMode) {\n      this.defaultConsoleLogger.log.apply(this.defaultConsoleLogger.logger, arguments);\n    }\n    if (this.isJSNLogSetup) {\n      (0, jsnlog_1.JL)().info(arguments);\n    }\n  };\n  /**\n   * @hidden\n   */\n  OpenViduLogger.prototype.debug = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this.isProdMode) {\n      this.defaultConsoleLogger.debug.apply(this.defaultConsoleLogger.logger, arguments);\n    }\n  };\n  /**\n   * @hidden\n   */\n  OpenViduLogger.prototype.info = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this.isProdMode) {\n      this.defaultConsoleLogger.info.apply(this.defaultConsoleLogger.logger, arguments);\n    }\n    if (this.isJSNLogSetup) {\n      (0, jsnlog_1.JL)().info(arguments);\n    }\n  };\n  /**\n   * @hidden\n   */\n  OpenViduLogger.prototype.warn = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this.defaultConsoleLogger.warn.apply(this.defaultConsoleLogger.logger, arguments);\n    if (this.isJSNLogSetup) {\n      (0, jsnlog_1.JL)().warn(arguments);\n    }\n  };\n  /**\n   * @hidden\n   */\n  OpenViduLogger.prototype.error = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this.defaultConsoleLogger.error.apply(this.defaultConsoleLogger.logger, arguments);\n    if (this.isJSNLogSetup) {\n      (0, jsnlog_1.JL)().error(arguments);\n    }\n  };\n  /**\n   * @hidden\n   */\n  OpenViduLogger.prototype.flush = function () {\n    if (this.isJSNLogSetup && this.currentAppender != null) {\n      this.currentAppender.sendBatch();\n    }\n  };\n  OpenViduLogger.prototype.enableProdMode = function () {\n    this.isProdMode = true;\n  };\n  return OpenViduLogger;\n}();\nexports.OpenViduLogger = OpenViduLogger;","map":{"version":3,"names":["jsnlog_1","require","ConsoleLogger_1","OpenViduLoggerConfiguration_1","OpenViduLogger","JSNLOG_URL","MAX_JSNLOG_BATCH_LOG_MESSAGES","MAX_MSECONDS_BATCH_MESSAGES","MAX_LENGTH_STRING_JSON","defaultConsoleLogger","ConsoleLogger","globalThis","console","isProdMode","isJSNLogSetup","configureJSNLog","openVidu","token","_this","instance","isAtLeastPro","isOpenViduBrowserLogsDebugActive","canConfigureJSNLog","sendBrowserLogs","OpenViduLoggerConfiguration","debug_app","replaceWindowConsole","info","finalUserId_1","finalUserId","sessionId_1","session","sessionId","beforeSendCallback","xhr","parentReadyStateFunction","onreadystatechange","isInvalidResponse","Object","defineProperty","value","disableLogger","setRequestHeader","btoa","concat","currentAppender","JL","createAjaxAppender","setOptions","beforeSend","maxBatchSize","batchSize","batchTimeout","logSerializer","obj","getCircularReplacer","seen","WeakSet","key","has","HTMLElement","add","stringifyJson","JSON","stringify","length","substring","log","defaultAjaxUrl","httpUri","serialize","enabled","appenders","loggingSessionId","e","error","getInstance","status","prototype","logger","debug","getConsoleWithJSNLog","openViduLogger","args","_i","arguments","apply","warn","undefined","flush","sendBatch","enableProdMode","exports"],"sources":["C:\\Users\\SSAFY\\Desktop\\catchpalm\\my-app\\node_modules\\openvidu-browser\\src\\OpenViduInternal\\Logger\\OpenViduLogger.ts"],"sourcesContent":["import { JL } from 'jsnlog';\nimport { OpenVidu } from '../../OpenVidu/OpenVidu';\nimport { ConsoleLogger } from './ConsoleLogger';\nimport { OpenViduLoggerConfiguration } from './OpenViduLoggerConfiguration';\n\nexport class OpenViduLogger {\n    private static instance: OpenViduLogger;\n\n    private JSNLOG_URL: string = '/openvidu/elk/openvidu-browser-logs';\n    private MAX_JSNLOG_BATCH_LOG_MESSAGES: number = 100;\n    private MAX_MSECONDS_BATCH_MESSAGES: number = 5000;\n    private MAX_LENGTH_STRING_JSON: number = 1000;\n\n    private defaultConsoleLogger: ConsoleLogger = new ConsoleLogger(globalThis.console);\n\n    private currentAppender: any;\n\n    private isProdMode = false;\n    private isJSNLogSetup = false;\n\n    // This two variables are used to restart JSNLog\n    // on different sessions and different userIds\n    private loggingSessionId: string | undefined;\n\n    /**\n     * @hidden\n     */\n    static configureJSNLog(openVidu: OpenVidu, token: string) {\n        try {\n            // If dev mode or...\n            if (\n                globalThis['LOG_JSNLOG_RESULTS'] ||\n                // If instance is created and it is OpenVidu Pro\n                (this.instance &&\n                    openVidu.isAtLeastPro &&\n                    // If logs are enabled\n                    this.instance.isOpenViduBrowserLogsDebugActive(openVidu) &&\n                    // Only reconfigure it if session or finalUserId has changed\n                    this.instance.canConfigureJSNLog(openVidu, this.instance))\n            ) {\n                // Check if app logs can be sent\n                // and replace console.log function to send\n                // logs of the application\n                if (openVidu.sendBrowserLogs === OpenViduLoggerConfiguration.debug_app) {\n                    this.instance.replaceWindowConsole();\n                }\n\n                // isJSNLogSetup will not be true until completed setup\n                this.instance.isJSNLogSetup = false;\n                this.instance.info('Configuring JSNLogs.');\n\n                const finalUserId = openVidu.finalUserId;\n                const sessionId = openVidu.session.sessionId;\n\n                const beforeSendCallback = (xhr) => {\n                    // If 401 or 403 or 404 modify ready and status so JSNLog don't retry to send logs\n                    // https://github.com/mperdeck/jsnlog.js/blob/v2.30.0/jsnlog.ts#L805-L818\n                    const parentReadyStateFunction = xhr.onreadystatechange;\n                    xhr.onreadystatechange = () => {\n                        if (this.isInvalidResponse(xhr)) {\n                            Object.defineProperty(xhr, 'readyState', { value: 4 });\n                            Object.defineProperty(xhr, 'status', { value: 200 });\n                            // Disable JSNLog too to not send periodically errors\n                            this.instance.disableLogger();\n                        }\n                        parentReadyStateFunction();\n                    };\n\n                    // Headers to identify and authenticate logs\n                    xhr.setRequestHeader('Authorization', 'Basic ' + btoa(`${finalUserId}%/%${sessionId}` + ':' + token));\n                    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n                    // Additional headers for OpenVidu\n                    xhr.setRequestHeader('OV-Final-User-Id', finalUserId);\n                    xhr.setRequestHeader('OV-Session-Id', sessionId);\n                    xhr.setRequestHeader('OV-Token', token);\n                };\n\n                // Creation of the appender.\n                this.instance.currentAppender = JL.createAjaxAppender(`appender-${finalUserId}-${sessionId}`);\n                this.instance.currentAppender.setOptions({\n                    beforeSend: beforeSendCallback,\n                    maxBatchSize: 1000,\n                    batchSize: this.instance.MAX_JSNLOG_BATCH_LOG_MESSAGES,\n                    batchTimeout: this.instance.MAX_MSECONDS_BATCH_MESSAGES\n                });\n\n                // Avoid circular dependencies\n                const logSerializer = (obj): string => {\n                    const getCircularReplacer = () => {\n                        const seen = new WeakSet();\n                        return (key, value) => {\n                            if (typeof value === 'object' && value != null) {\n                                if (seen.has(value) || (globalThis.HTMLElement && value instanceof HTMLElement)) {\n                                    return;\n                                }\n                                seen.add(value);\n                            }\n                            return value;\n                        };\n                    };\n\n                    // Cut long messages\n                    let stringifyJson = JSON.stringify(obj, getCircularReplacer());\n                    if (stringifyJson.length > this.instance.MAX_LENGTH_STRING_JSON) {\n                        stringifyJson = `${stringifyJson.substring(0, this.instance.MAX_LENGTH_STRING_JSON)}...`;\n                    }\n\n                    if (globalThis['LOG_JSNLOG_RESULTS']) {\n                        console.log(stringifyJson);\n                    }\n\n                    return stringifyJson;\n                };\n\n                // Initialize JL to send logs\n                JL.setOptions({\n                    defaultAjaxUrl: openVidu.httpUri + this.instance.JSNLOG_URL,\n                    serialize: logSerializer,\n                    enabled: true\n                });\n                JL().setOptions({\n                    appenders: [this.instance.currentAppender]\n                });\n\n                this.instance.isJSNLogSetup = true;\n                this.instance.loggingSessionId = sessionId;\n                this.instance.info('JSNLog configured.');\n            }\n        } catch (e) {\n            // Print error\n            console.error('Error configuring JSNLog: ');\n            console.error(e);\n            // Restore defaults values just in case any exception happen-\n            this.instance.disableLogger();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    static getInstance(): OpenViduLogger {\n        if (!OpenViduLogger.instance) {\n            OpenViduLogger.instance = new OpenViduLogger();\n        }\n        return OpenViduLogger.instance;\n    }\n\n    private static isInvalidResponse(xhr: XMLHttpRequest) {\n        return xhr.status == 401 || xhr.status == 403 || xhr.status == 404 || xhr.status == 0;\n    }\n\n    private canConfigureJSNLog(openVidu: OpenVidu, logger: OpenViduLogger): boolean {\n        return openVidu.session.sessionId != logger.loggingSessionId;\n    }\n\n    private isOpenViduBrowserLogsDebugActive(openVidu: OpenVidu) {\n        return (\n            openVidu.sendBrowserLogs === OpenViduLoggerConfiguration.debug ||\n            openVidu.sendBrowserLogs === OpenViduLoggerConfiguration.debug_app\n        );\n    }\n\n    // Return console functions with jsnlog integration\n    private getConsoleWithJSNLog() {\n        return (function (openViduLogger: OpenViduLogger) {\n            return {\n                log: function (...args) {\n                    openViduLogger.defaultConsoleLogger.log.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n                    if (openViduLogger.isJSNLogSetup) {\n                        JL().info(arguments);\n                    }\n                },\n                info: function (...args) {\n                    openViduLogger.defaultConsoleLogger.info.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n                    if (openViduLogger.isJSNLogSetup) {\n                        JL().info(arguments);\n                    }\n                },\n                debug: function (...args) {\n                    openViduLogger.defaultConsoleLogger.debug.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n                },\n                warn: function (...args) {\n                    openViduLogger.defaultConsoleLogger.warn.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n                    if (openViduLogger.isJSNLogSetup) {\n                        JL().warn(arguments);\n                    }\n                },\n                error: function (...args) {\n                    openViduLogger.defaultConsoleLogger.error.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n                    if (openViduLogger.isJSNLogSetup) {\n                        JL().error(arguments);\n                    }\n                }\n            };\n        })(this);\n    }\n\n    private replaceWindowConsole() {\n        globalThis.console = this.defaultConsoleLogger.logger;\n        globalThis.console.log = this.getConsoleWithJSNLog().log;\n        globalThis.console.info = this.getConsoleWithJSNLog().info;\n        globalThis.console.debug = this.getConsoleWithJSNLog().debug;\n        globalThis.console.warn = this.getConsoleWithJSNLog().warn;\n        globalThis.console.error = this.getConsoleWithJSNLog().error;\n    }\n\n    private disableLogger() {\n        JL.setOptions({ enabled: false });\n        this.isJSNLogSetup = false;\n        this.loggingSessionId = undefined;\n        this.currentAppender = undefined;\n        globalThis.console = this.defaultConsoleLogger.logger;\n        globalThis.console.log = this.defaultConsoleLogger.log;\n        globalThis.console.info = this.defaultConsoleLogger.info;\n        globalThis.console.debug = this.defaultConsoleLogger.debug;\n        globalThis.console.warn = this.defaultConsoleLogger.warn;\n        globalThis.console.error = this.defaultConsoleLogger.error;\n    }\n\n    /**\n     * @hidden\n     */\n    log(...args: any[]) {\n        if (!this.isProdMode) {\n            this.defaultConsoleLogger.log.apply(this.defaultConsoleLogger.logger, arguments);\n        }\n        if (this.isJSNLogSetup) {\n            JL().info(arguments);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    debug(...args: any[]) {\n        if (!this.isProdMode) {\n            this.defaultConsoleLogger.debug.apply(this.defaultConsoleLogger.logger, arguments);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    info(...args: any[]) {\n        if (!this.isProdMode) {\n            this.defaultConsoleLogger.info.apply(this.defaultConsoleLogger.logger, arguments);\n        }\n        if (this.isJSNLogSetup) {\n            JL().info(arguments);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    warn(...args: any[]) {\n        this.defaultConsoleLogger.warn.apply(this.defaultConsoleLogger.logger, arguments);\n        if (this.isJSNLogSetup) {\n            JL().warn(arguments);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    error(...args: any[]) {\n        this.defaultConsoleLogger.error.apply(this.defaultConsoleLogger.logger, arguments);\n        if (this.isJSNLogSetup) {\n            JL().error(arguments);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    flush() {\n        if (this.isJSNLogSetup && this.currentAppender != null) {\n            this.currentAppender.sendBatch();\n        }\n    }\n\n    enableProdMode() {\n        this.isProdMode = true;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}