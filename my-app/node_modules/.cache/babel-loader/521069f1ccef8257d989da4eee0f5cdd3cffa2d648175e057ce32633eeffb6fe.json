{"ast":null,"code":"\"use strict\";\n\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebRtcPeerSendrecv = exports.WebRtcPeerSendonly = exports.WebRtcPeerRecvonly = exports.WebRtcPeer = void 0;\nvar freeice = require(\"freeice\");\nvar uuid_1 = require(\"uuid\");\nvar ExceptionEvent_1 = require(\"../Events/ExceptionEvent\");\nvar OpenViduLogger_1 = require(\"../Logger/OpenViduLogger\");\nvar Platform_1 = require(\"../Utils/Platform\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * @hidden\n */\nvar platform;\nvar WebRtcPeer = /** @class */function () {\n  function WebRtcPeer(configuration) {\n    var _this = this;\n    this.remoteCandidatesQueue = [];\n    this.localCandidatesQueue = [];\n    this.iceCandidateList = [];\n    platform = Platform_1.PlatformUtils.getInstance();\n    this.configuration = __assign(__assign({}, configuration), {\n      iceServers: !!configuration.iceServers && configuration.iceServers.length > 0 ? configuration.iceServers : freeice(),\n      mediaStream: configuration.mediaStream !== undefined ? configuration.mediaStream : null,\n      mode: !!configuration.mode ? configuration.mode : 'sendrecv',\n      id: !!configuration.id ? configuration.id : this.generateUniqueId()\n    });\n    // prettier-ignore\n    logger.debug(\"[WebRtcPeer] configuration:\\n\".concat(JSON.stringify(this.configuration, null, 2)));\n    this.pc = new RTCPeerConnection({\n      iceServers: this.configuration.iceServers\n    });\n    this.pc.addEventListener('icecandidate', function (event) {\n      if (event.candidate !== null) {\n        // `RTCPeerConnectionIceEvent.candidate` is supposed to be an RTCIceCandidate:\n        // https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnectioniceevent-candidate\n        //\n        // But in practice, it is actually an RTCIceCandidateInit that can be used to\n        // obtain a proper candidate, using the RTCIceCandidate constructor:\n        // https://w3c.github.io/webrtc-pc/#dom-rtcicecandidate-constructor\n        var candidateInit = event.candidate;\n        var iceCandidate = new RTCIceCandidate(candidateInit);\n        _this.configuration.onIceCandidate(iceCandidate);\n        if (iceCandidate.candidate !== '') {\n          _this.localCandidatesQueue.push(iceCandidate);\n        }\n      }\n    });\n    this.pc.addEventListener('signalingstatechange', function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var candidate, error_1;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!(this.pc.signalingState === 'stable')) return [3 /*break*/, 6];\n              _a.label = 1;\n            case 1:\n              if (!(this.iceCandidateList.length > 0)) return [3 /*break*/, 6];\n              candidate = this.iceCandidateList.shift();\n              _a.label = 2;\n            case 2:\n              _a.trys.push([2, 4,, 5]);\n              return [4 /*yield*/, this.pc.addIceCandidate(candidate)];\n            case 3:\n              _a.sent();\n              return [3 /*break*/, 5];\n            case 4:\n              error_1 = _a.sent();\n              logger.error('Error when calling RTCPeerConnection#addIceCandidate for RTCPeerConnection ' + this.getId(), error_1);\n              return [3 /*break*/, 5];\n            case 5:\n              return [3 /*break*/, 1];\n            case 6:\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  }\n\n  WebRtcPeer.prototype.getId = function () {\n    return this.configuration.id;\n  };\n  /**\n   * This method frees the resources used by WebRtcPeer\n   */\n  WebRtcPeer.prototype.dispose = function () {\n    logger.debug('Disposing WebRtcPeer');\n    if (this.pc) {\n      if (this.pc.signalingState === 'closed') {\n        return;\n      }\n      this.pc.close();\n      this.remoteCandidatesQueue = [];\n      this.localCandidatesQueue = [];\n    }\n  };\n  // DEPRECATED LEGACY METHOD: Old WebRTC versions don't implement\n  // Transceivers, and instead depend on the deprecated\n  // \"offerToReceiveAudio\" and \"offerToReceiveVideo\".\n  WebRtcPeer.prototype.createOfferLegacy = function () {\n    if (!!this.configuration.mediaStream) {\n      this.deprecatedPeerConnectionTrackApi();\n    }\n    var hasAudio = this.configuration.mediaConstraints.audio;\n    var hasVideo = this.configuration.mediaConstraints.video;\n    var options = {\n      offerToReceiveAudio: this.configuration.mode !== 'sendonly' && hasAudio,\n      offerToReceiveVideo: this.configuration.mode !== 'sendonly' && hasVideo\n    };\n    logger.debug('[createOfferLegacy] RTCPeerConnection.createOffer() options:', JSON.stringify(options));\n    return this.pc.createOffer(options);\n  };\n  /**\n   * Creates an SDP offer from the local RTCPeerConnection to send to the other peer.\n   * Only if the negotiation was initiated by this peer.\n   */\n  WebRtcPeer.prototype.createOffer = function () {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    return __awaiter(this, void 0, void 0, function () {\n      var _i, _j, track, tcInit, trackSettings, trackConsts, trackWidth, trackHeight, trackPixels, maxLayers, l, layerDiv, encoding, tc, sendParams, needSetParams, error_2, message, _k, _l, kind, sdpOffer, error_3, message;\n      return __generator(this, function (_m) {\n        switch (_m.label) {\n          case 0:\n            // TODO: Delete this conditional when all supported browsers are\n            // modern enough to implement the Transceiver methods.\n            if (!('addTransceiver' in this.pc)) {\n              logger.warn('[createOffer] Method RTCPeerConnection.addTransceiver() is NOT available; using LEGACY offerToReceive{Audio,Video}');\n              return [2 /*return*/, this.createOfferLegacy()];\n            } else {\n              logger.debug('[createOffer] Method RTCPeerConnection.addTransceiver() is available; using it');\n            }\n            if (!(this.configuration.mode !== 'recvonly')) return [3 /*break*/, 7];\n            // To send media, assume that all desired media tracks have been\n            // already added by higher level code to our MediaStream.\n            if (!this.configuration.mediaStream) {\n              throw new Error(\"[WebRtcPeer.createOffer] Direction is '\".concat(this.configuration.mode, \"', but no stream was configured to be sent\"));\n            }\n            _i = 0, _j = this.configuration.mediaStream.getTracks();\n            _m.label = 1;\n          case 1:\n            if (!(_i < _j.length)) return [3 /*break*/, 6];\n            track = _j[_i];\n            tcInit = {\n              direction: this.configuration.mode,\n              streams: [this.configuration.mediaStream]\n            };\n            if (track.kind === 'video' && this.configuration.simulcast) {\n              trackSettings = track.getSettings();\n              trackConsts = track.getConstraints();\n              trackWidth = (_c = (_b = (_a = trackSettings.width) !== null && _a !== void 0 ? _a : trackConsts.width.ideal) !== null && _b !== void 0 ? _b : trackConsts.width) !== null && _c !== void 0 ? _c : 0;\n              trackHeight = (_f = (_e = (_d = trackSettings.height) !== null && _d !== void 0 ? _d : trackConsts.height.ideal) !== null && _e !== void 0 ? _e : trackConsts.height) !== null && _f !== void 0 ? _f : 0;\n              logger.info(\"[createOffer] Video track dimensions: \".concat(trackWidth, \"x\").concat(trackHeight));\n              trackPixels = trackWidth * trackHeight;\n              maxLayers = 0;\n              if (trackPixels >= 960 * 540) {\n                maxLayers = 3;\n              } else if (trackPixels >= 480 * 270) {\n                maxLayers = 2;\n              } else {\n                maxLayers = 1;\n              }\n              tcInit.sendEncodings = [];\n              for (l = 0; l < maxLayers; l++) {\n                layerDiv = Math.pow(2, maxLayers - l - 1);\n                encoding = {\n                  rid: 'rdiv' + layerDiv.toString(),\n                  // @ts-ignore -- Property missing from DOM types.\n                  scalabilityMode: 'L1T1'\n                };\n                if (['detail', 'text'].includes(track.contentHint)) {\n                  // Prioritize best resolution, for maximum picture detail.\n                  encoding.scaleResolutionDownBy = 1.0;\n                  // @ts-ignore -- Property missing from DOM types.\n                  encoding.maxFramerate = Math.floor(30 / layerDiv);\n                } else {\n                  encoding.scaleResolutionDownBy = layerDiv;\n                }\n                tcInit.sendEncodings.push(encoding);\n              }\n            }\n            tc = this.pc.addTransceiver(track, tcInit);\n            if (!(track.kind === 'video')) return [3 /*break*/, 5];\n            sendParams = tc.sender.getParameters();\n            needSetParams = false;\n            if (!((_g = sendParams.degradationPreference) === null || _g === void 0 ? void 0 : _g.length)) {\n              // degradationPreference for video: \"balanced\", \"maintain-framerate\", \"maintain-resolution\".\n              // https://www.w3.org/TR/2018/CR-webrtc-20180927/#dom-rtcdegradationpreference\n              if (['detail', 'text'].includes(track.contentHint)) {\n                sendParams.degradationPreference = 'maintain-resolution';\n              } else {\n                sendParams.degradationPreference = 'balanced';\n              }\n              logger.info(\"[createOffer] Video sender Degradation Preference set: \".concat(sendParams.degradationPreference));\n              // FIXME: Firefox implements degradationPreference on each individual encoding!\n              // (set it on every element of the sendParams.encodings array)\n              needSetParams = true;\n            }\n            // FIXME: Check that the simulcast encodings were applied.\n            // Firefox doesn't implement `RTCRtpTransceiverInit.sendEncodings`\n            // so the only way to enable simulcast is with `RTCRtpSender.setParameters()`.\n            //\n            // This next block can be deleted when Firefox fixes bug #1396918:\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n            //\n            // NOTE: This is done in a way that is compatible with all browsers, to save on\n            // browser-conditional code. The idea comes from WebRTC Adapter.js:\n            // * https://github.com/webrtcHacks/adapter/issues/998\n            // * https://github.com/webrtcHacks/adapter/blob/v7.7.0/src/js/firefox/firefox_shim.js#L231-L255\n            if (this.configuration.simulcast) {\n              if (((_h = sendParams.encodings) === null || _h === void 0 ? void 0 : _h.length) !== tcInit.sendEncodings.length) {\n                sendParams.encodings = tcInit.sendEncodings;\n                needSetParams = true;\n              }\n            }\n            if (!needSetParams) return [3 /*break*/, 5];\n            logger.debug(\"[createOffer] Setting new RTCRtpSendParameters to video sender\");\n            _m.label = 2;\n          case 2:\n            _m.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, tc.sender.setParameters(sendParams)];\n          case 3:\n            _m.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            error_2 = _m.sent();\n            message = \"[WebRtcPeer.createOffer] Cannot set RTCRtpSendParameters to video sender\";\n            if (error_2 instanceof Error) {\n              message += \": \".concat(error_2.message);\n            }\n            throw new Error(message);\n          case 5:\n            _i++;\n            return [3 /*break*/, 1];\n          case 6:\n            return [3 /*break*/, 8];\n          case 7:\n            // To just receive media, create new recvonly transceivers.\n            for (_k = 0, _l = ['audio', 'video']; _k < _l.length; _k++) {\n              kind = _l[_k];\n              // Check if the media kind should be used.\n              if (!this.configuration.mediaConstraints[kind]) {\n                continue;\n              }\n              this.configuration.mediaStream = new MediaStream();\n              this.pc.addTransceiver(kind, {\n                direction: this.configuration.mode,\n                streams: [this.configuration.mediaStream]\n              });\n            }\n            _m.label = 8;\n          case 8:\n            _m.trys.push([8, 10,, 11]);\n            return [4 /*yield*/, this.pc.createOffer()];\n          case 9:\n            sdpOffer = _m.sent();\n            return [3 /*break*/, 11];\n          case 10:\n            error_3 = _m.sent();\n            message = \"[WebRtcPeer.createOffer] Browser failed creating an SDP Offer\";\n            if (error_3 instanceof Error) {\n              message += \": \".concat(error_3.message);\n            }\n            throw new Error(message);\n          case 11:\n            return [2 /*return*/, sdpOffer];\n        }\n      });\n    });\n  };\n  WebRtcPeer.prototype.deprecatedPeerConnectionTrackApi = function () {\n    for (var _i = 0, _a = this.configuration.mediaStream.getTracks(); _i < _a.length; _i++) {\n      var track = _a[_i];\n      this.pc.addTrack(track, this.configuration.mediaStream);\n    }\n  };\n  /**\n   * Creates an SDP answer from the local RTCPeerConnection to send to the other peer\n   * Only if the negotiation was initiated by the other peer\n   */\n  WebRtcPeer.prototype.createAnswer = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      // TODO: Delete this conditional when all supported browsers are\n      // modern enough to implement the Transceiver methods.\n      if ('getTransceivers' in _this.pc) {\n        logger.debug('[createAnswer] Method RTCPeerConnection.getTransceivers() is available; using it');\n        var _loop_1 = function (kind) {\n          // Check if the media kind should be used.\n          if (!_this.configuration.mediaConstraints[kind]) {\n            return \"continue\";\n          }\n          var tc = _this.pc.getTransceivers().find(function (tc) {\n            return tc.receiver.track.kind === kind;\n          });\n          if (tc) {\n            // Enforce our desired direction.\n            tc.direction = _this.configuration.mode;\n          } else {\n            return {\n              value: reject(new Error(\"\".concat(kind, \" requested, but no transceiver was created from remote description\")))\n            };\n          }\n        };\n        // Ensure that the PeerConnection already contains one Transceiver\n        // for each kind of media.\n        // The Transceivers should have been already created internally by\n        // the PC itself, when `pc.setRemoteDescription(sdpOffer)` was called.\n        for (var _i = 0, _a = ['audio', 'video']; _i < _a.length; _i++) {\n          var kind = _a[_i];\n          var state_1 = _loop_1(kind);\n          if (typeof state_1 === \"object\") return state_1.value;\n        }\n        _this.pc.createAnswer().then(function (sdpAnswer) {\n          return resolve(sdpAnswer);\n        }).catch(function (error) {\n          return reject(error);\n        });\n      } else {\n        // TODO: Delete else branch when all supported browsers are\n        // modern enough to implement the Transceiver methods\n        var offerAudio = void 0,\n          offerVideo = true;\n        if (!!_this.configuration.mediaConstraints) {\n          offerAudio = typeof _this.configuration.mediaConstraints.audio === 'boolean' ? _this.configuration.mediaConstraints.audio : true;\n          offerVideo = typeof _this.configuration.mediaConstraints.video === 'boolean' ? _this.configuration.mediaConstraints.video : true;\n          var constraints = {\n            offerToReceiveAudio: offerAudio,\n            offerToReceiveVideo: offerVideo\n          };\n          _this.pc.createAnswer(constraints).then(function (sdpAnswer) {\n            return resolve(sdpAnswer);\n          }).catch(function (error) {\n            return reject(error);\n          });\n        }\n      }\n      // else, there is nothing to do; the legacy createAnswer() options do\n      // not offer any control over which tracks are included in the answer.\n    });\n  };\n  /**\n   * This peer initiated negotiation. Step 1/4 of SDP offer-answer protocol\n   */\n  WebRtcPeer.prototype.processLocalOffer = function (offer) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      _this.pc.setLocalDescription(offer).then(function () {\n        var localDescription = _this.pc.localDescription;\n        if (!!localDescription) {\n          logger.debug('Local description set', localDescription.sdp);\n          return resolve();\n        } else {\n          return reject('Local description is not defined');\n        }\n      }).catch(function (error) {\n        return reject(error);\n      });\n    });\n  };\n  /**\n   * Other peer initiated negotiation. Step 2/4 of SDP offer-answer protocol\n   */\n  WebRtcPeer.prototype.processRemoteOffer = function (sdpOffer) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var offer = {\n        type: 'offer',\n        sdp: sdpOffer\n      };\n      logger.debug('SDP offer received, setting remote description', offer);\n      if (_this.pc.signalingState === 'closed') {\n        return reject('RTCPeerConnection is closed when trying to set remote description');\n      }\n      _this.setRemoteDescription(offer).then(function () {\n        return resolve();\n      }).catch(function (error) {\n        return reject(error);\n      });\n    });\n  };\n  /**\n   * Other peer initiated negotiation. Step 3/4 of SDP offer-answer protocol\n   */\n  WebRtcPeer.prototype.processLocalAnswer = function (answer) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      logger.debug('SDP answer created, setting local description');\n      if (_this.pc.signalingState === 'closed') {\n        return reject('RTCPeerConnection is closed when trying to set local description');\n      }\n      _this.pc.setLocalDescription(answer).then(function () {\n        return resolve();\n      }).catch(function (error) {\n        return reject(error);\n      });\n    });\n  };\n  /**\n   * This peer initiated negotiation. Step 4/4 of SDP offer-answer protocol\n   */\n  WebRtcPeer.prototype.processRemoteAnswer = function (sdpAnswer) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var answer = {\n        type: 'answer',\n        sdp: sdpAnswer\n      };\n      logger.debug('SDP answer received, setting remote description');\n      if (_this.pc.signalingState === 'closed') {\n        return reject('RTCPeerConnection is closed when trying to set remote description');\n      }\n      _this.setRemoteDescription(answer).then(function () {\n        // DEBUG: Uncomment for details.\n        // {\n        //     const tc = this.pc.getTransceivers().find((tc) => tc.sender.track?.kind === \"video\");\n        //     // prettier-ignore\n        //     logger.debug(`[processRemoteAnswer] Transceiver send parameters (effective):\\n${JSON.stringify(tc?.sender.getParameters(), null, 2)}`);\n        // }\n        resolve();\n      }).catch(function (error) {\n        return reject(error);\n      });\n    });\n  };\n  /**\n   * @hidden\n   */\n  WebRtcPeer.prototype.setRemoteDescription = function (sdp) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.pc.setRemoteDescription(sdp)];\n      });\n    });\n  };\n  /**\n   * Callback function invoked when an ICE candidate is received\n   */\n  WebRtcPeer.prototype.addIceCandidate = function (iceCandidate) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      logger.debug('Remote ICE candidate received', iceCandidate);\n      _this.remoteCandidatesQueue.push(iceCandidate);\n      switch (_this.pc.signalingState) {\n        case 'closed':\n          reject(new Error('PeerConnection object is closed'));\n          break;\n        case 'stable':\n          if (!!_this.pc.remoteDescription) {\n            _this.pc.addIceCandidate(iceCandidate).then(function () {\n              return resolve();\n            }).catch(function (error) {\n              return reject(error);\n            });\n          } else {\n            _this.iceCandidateList.push(iceCandidate);\n            resolve();\n          }\n          break;\n        default:\n          _this.iceCandidateList.push(iceCandidate);\n          resolve();\n      }\n    });\n  };\n  WebRtcPeer.prototype.addIceConnectionStateChangeListener = function (otherId) {\n    var _this = this;\n    this.pc.addEventListener('iceconnectionstatechange', function () {\n      var iceConnectionState = _this.pc.iceConnectionState;\n      switch (iceConnectionState) {\n        case 'disconnected':\n          // Possible network disconnection\n          var msg1 = 'IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"disconnected\". Possible network disconnection';\n          logger.warn(msg1);\n          _this.configuration.onIceConnectionStateException(ExceptionEvent_1.ExceptionEventName.ICE_CONNECTION_DISCONNECTED, msg1);\n          break;\n        case 'failed':\n          var msg2 = 'IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') to \"failed\"';\n          logger.error(msg2);\n          _this.configuration.onIceConnectionStateException(ExceptionEvent_1.ExceptionEventName.ICE_CONNECTION_FAILED, msg2);\n          break;\n        case 'closed':\n          logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"closed\"');\n          break;\n        case 'new':\n          logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"new\"');\n          break;\n        case 'checking':\n          logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"checking\"');\n          break;\n        case 'connected':\n          logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"connected\"');\n          break;\n        case 'completed':\n          logger.log('IceConnectionState of RTCPeerConnection ' + _this.configuration.id + ' (' + otherId + ') change to \"completed\"');\n          break;\n      }\n    });\n  };\n  /**\n   * @hidden\n   */\n  WebRtcPeer.prototype.generateUniqueId = function () {\n    return (0, uuid_1.v4)();\n  };\n  return WebRtcPeer;\n}();\nexports.WebRtcPeer = WebRtcPeer;\nvar WebRtcPeerRecvonly = /** @class */function (_super) {\n  __extends(WebRtcPeerRecvonly, _super);\n  function WebRtcPeerRecvonly(configuration) {\n    configuration.mode = 'recvonly';\n    return _super.call(this, configuration) || this;\n  }\n  return WebRtcPeerRecvonly;\n}(WebRtcPeer);\nexports.WebRtcPeerRecvonly = WebRtcPeerRecvonly;\nvar WebRtcPeerSendonly = /** @class */function (_super) {\n  __extends(WebRtcPeerSendonly, _super);\n  function WebRtcPeerSendonly(configuration) {\n    configuration.mode = 'sendonly';\n    return _super.call(this, configuration) || this;\n  }\n  return WebRtcPeerSendonly;\n}(WebRtcPeer);\nexports.WebRtcPeerSendonly = WebRtcPeerSendonly;\nvar WebRtcPeerSendrecv = /** @class */function (_super) {\n  __extends(WebRtcPeerSendrecv, _super);\n  function WebRtcPeerSendrecv(configuration) {\n    configuration.mode = 'sendrecv';\n    return _super.call(this, configuration) || this;\n  }\n  return WebRtcPeerSendrecv;\n}(WebRtcPeer);\nexports.WebRtcPeerSendrecv = WebRtcPeerSendrecv;","map":{"version":3,"names":["freeice","require","uuid_1","ExceptionEvent_1","OpenViduLogger_1","Platform_1","logger","OpenViduLogger","getInstance","platform","WebRtcPeer","configuration","_this","remoteCandidatesQueue","localCandidatesQueue","iceCandidateList","PlatformUtils","__assign","iceServers","length","mediaStream","undefined","mode","id","generateUniqueId","debug","concat","JSON","stringify","pc","RTCPeerConnection","addEventListener","event","candidate","candidateInit","iceCandidate","RTCIceCandidate","onIceCandidate","push","__awaiter","signalingState","shift","addIceCandidate","_a","sent","error","getId","error_1","prototype","dispose","close","createOfferLegacy","deprecatedPeerConnectionTrackApi","hasAudio","mediaConstraints","audio","hasVideo","video","options","offerToReceiveAudio","offerToReceiveVideo","createOffer","warn","Error","_j","getTracks","_i","track","tcInit","direction","streams","kind","simulcast","trackSettings","getSettings","trackConsts","getConstraints","trackWidth","_c","_b","width","ideal","trackHeight","_f","_e","_d","height","info","trackPixels","maxLayers","sendEncodings","l","layerDiv","Math","pow","encoding","rid","toString","scalabilityMode","includes","contentHint","scaleResolutionDownBy","maxFramerate","floor","tc","addTransceiver","sendParams","sender","getParameters","needSetParams","_g","degradationPreference","_h","encodings","setParameters","_m","message","error_2","_k","_l","MediaStream","sdpOffer","error_3","addTrack","createAnswer","Promise","resolve","reject","getTransceivers","find","receiver","then","sdpAnswer","catch","offerAudio","offerVideo","constraints","processLocalOffer","offer","setLocalDescription","localDescription","sdp","processRemoteOffer","type","setRemoteDescription","processLocalAnswer","answer","processRemoteAnswer","remoteDescription","addIceConnectionStateChangeListener","otherId","iceConnectionState","msg1","onIceConnectionStateException","ExceptionEventName","ICE_CONNECTION_DISCONNECTED","msg2","ICE_CONNECTION_FAILED","log","v4","exports","WebRtcPeerRecvonly","_super","__extends","call","WebRtcPeerSendonly","WebRtcPeerSendrecv"],"sources":["C:\\Users\\SSAFY\\Desktop\\catchpalm\\my-app\\node_modules\\openvidu-browser\\src\\OpenViduInternal\\WebRtcPeer\\WebRtcPeer.ts"],"sourcesContent":["/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport freeice = require('freeice');\nimport { v4 as uuidv4 } from 'uuid';\nimport { TypeOfVideo } from '../Enums/TypeOfVideo';\nimport { ExceptionEventName } from '../Events/ExceptionEvent';\nimport { OpenViduLogger } from '../Logger/OpenViduLogger';\nimport { PlatformUtils } from '../Utils/Platform';\n\n/**\n * @hidden\n */\nconst logger: OpenViduLogger = OpenViduLogger.getInstance();\n/**\n * @hidden\n */\nlet platform: PlatformUtils;\n\nexport interface WebRtcPeerConfiguration {\n    mediaConstraints: {\n        audio: boolean;\n        video: boolean;\n    };\n    simulcast: boolean;\n    mediaServer: string;\n    onIceCandidate: (event: RTCIceCandidate) => void;\n    onIceConnectionStateException: (exceptionName: ExceptionEventName, message: string, data?: any) => void;\n    iceServers?: RTCIceServer[];\n    mediaStream?: MediaStream | null;\n    mode?: 'sendonly' | 'recvonly' | 'sendrecv';\n    id?: string;\n    typeOfVideo: TypeOfVideo | undefined;\n}\n\nexport class WebRtcPeer {\n    pc: RTCPeerConnection;\n    remoteCandidatesQueue: RTCIceCandidate[] = [];\n    localCandidatesQueue: RTCIceCandidate[] = [];\n\n    // Same as WebRtcPeerConfiguration but without optional fields.\n    protected configuration: Required<WebRtcPeerConfiguration>;\n\n    private iceCandidateList: RTCIceCandidate[] = [];\n\n    constructor(configuration: WebRtcPeerConfiguration) {\n        platform = PlatformUtils.getInstance();\n\n        this.configuration = {\n            ...configuration,\n            iceServers: !!configuration.iceServers && configuration.iceServers.length > 0 ? configuration.iceServers : freeice(),\n            mediaStream: configuration.mediaStream !== undefined ? configuration.mediaStream : null,\n            mode: !!configuration.mode ? configuration.mode : 'sendrecv',\n            id: !!configuration.id ? configuration.id : this.generateUniqueId()\n        };\n        // prettier-ignore\n        logger.debug(`[WebRtcPeer] configuration:\\n${JSON.stringify(this.configuration, null, 2)}`);\n\n        this.pc = new RTCPeerConnection({ iceServers: this.configuration.iceServers });\n\n        this.pc.addEventListener('icecandidate', (event: RTCPeerConnectionIceEvent) => {\n            if (event.candidate !== null) {\n                // `RTCPeerConnectionIceEvent.candidate` is supposed to be an RTCIceCandidate:\n                // https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnectioniceevent-candidate\n                //\n                // But in practice, it is actually an RTCIceCandidateInit that can be used to\n                // obtain a proper candidate, using the RTCIceCandidate constructor:\n                // https://w3c.github.io/webrtc-pc/#dom-rtcicecandidate-constructor\n                const candidateInit: RTCIceCandidateInit = event.candidate as RTCIceCandidateInit;\n                const iceCandidate = new RTCIceCandidate(candidateInit);\n\n                this.configuration.onIceCandidate(iceCandidate);\n                if (iceCandidate.candidate !== '') {\n                    this.localCandidatesQueue.push(iceCandidate);\n                }\n            }\n        });\n\n        this.pc.addEventListener('signalingstatechange', async () => {\n            if (this.pc.signalingState === 'stable') {\n                // SDP Offer/Answer finished. Add stored remote candidates.\n                while (this.iceCandidateList.length > 0) {\n                    let candidate = this.iceCandidateList.shift();\n                    try {\n                        await this.pc.addIceCandidate(<RTCIceCandidate>candidate);\n                    } catch (error) {\n                        logger.error('Error when calling RTCPeerConnection#addIceCandidate for RTCPeerConnection ' + this.getId(), error);\n                    }\n                }\n            }\n        });\n    }\n\n    getId(): string {\n        return this.configuration.id;\n    }\n\n    /**\n     * This method frees the resources used by WebRtcPeer\n     */\n    dispose() {\n        logger.debug('Disposing WebRtcPeer');\n        if (this.pc) {\n            if (this.pc.signalingState === 'closed') {\n                return;\n            }\n            this.pc.close();\n            this.remoteCandidatesQueue = [];\n            this.localCandidatesQueue = [];\n        }\n    }\n\n    // DEPRECATED LEGACY METHOD: Old WebRTC versions don't implement\n    // Transceivers, and instead depend on the deprecated\n    // \"offerToReceiveAudio\" and \"offerToReceiveVideo\".\n    private createOfferLegacy(): Promise<RTCSessionDescriptionInit> {\n        if (!!this.configuration.mediaStream) {\n            this.deprecatedPeerConnectionTrackApi();\n        }\n\n        const hasAudio = this.configuration.mediaConstraints.audio;\n        const hasVideo = this.configuration.mediaConstraints.video;\n\n        const options: RTCOfferOptions = {\n            offerToReceiveAudio: this.configuration.mode !== 'sendonly' && hasAudio,\n            offerToReceiveVideo: this.configuration.mode !== 'sendonly' && hasVideo\n        };\n\n        logger.debug('[createOfferLegacy] RTCPeerConnection.createOffer() options:', JSON.stringify(options));\n\n        return this.pc.createOffer(options);\n    }\n\n    /**\n     * Creates an SDP offer from the local RTCPeerConnection to send to the other peer.\n     * Only if the negotiation was initiated by this peer.\n     */\n    async createOffer(): Promise<RTCSessionDescriptionInit> {\n        // TODO: Delete this conditional when all supported browsers are\n        // modern enough to implement the Transceiver methods.\n        if (!('addTransceiver' in this.pc)) {\n            logger.warn(\n                '[createOffer] Method RTCPeerConnection.addTransceiver() is NOT available; using LEGACY offerToReceive{Audio,Video}'\n            );\n            return this.createOfferLegacy();\n        } else {\n            logger.debug('[createOffer] Method RTCPeerConnection.addTransceiver() is available; using it');\n        }\n\n        // Spec doc: https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-addtransceiver\n\n        if (this.configuration.mode !== 'recvonly') {\n            // To send media, assume that all desired media tracks have been\n            // already added by higher level code to our MediaStream.\n\n            if (!this.configuration.mediaStream) {\n                throw new Error(\n                    `[WebRtcPeer.createOffer] Direction is '${this.configuration.mode}', but no stream was configured to be sent`\n                );\n            }\n\n            for (const track of this.configuration.mediaStream.getTracks()) {\n                const tcInit: RTCRtpTransceiverInit = {\n                    direction: this.configuration.mode,\n                    streams: [this.configuration.mediaStream]\n                };\n\n                if (track.kind === 'video' && this.configuration.simulcast) {\n                    // Check if the requested size is enough to ask for 3 layers.\n                    const trackSettings = track.getSettings();\n                    const trackConsts = track.getConstraints();\n\n                    const trackWidth: number =\n                        trackSettings.width ?? (trackConsts.width as ConstrainULongRange).ideal ?? (trackConsts.width as number) ?? 0;\n                    const trackHeight: number =\n                        trackSettings.height ?? (trackConsts.height as ConstrainULongRange).ideal ?? (trackConsts.height as number) ?? 0;\n                    logger.info(`[createOffer] Video track dimensions: ${trackWidth}x${trackHeight}`);\n\n                    const trackPixels = trackWidth * trackHeight;\n                    let maxLayers = 0;\n                    if (trackPixels >= 960 * 540) {\n                        maxLayers = 3;\n                    } else if (trackPixels >= 480 * 270) {\n                        maxLayers = 2;\n                    } else {\n                        maxLayers = 1;\n                    }\n\n                    tcInit.sendEncodings = [];\n                    for (let l = 0; l < maxLayers; l++) {\n                        const layerDiv = 2 ** (maxLayers - l - 1);\n\n                        const encoding: RTCRtpEncodingParameters = {\n                            rid: 'rdiv' + layerDiv.toString(),\n\n                            // @ts-ignore -- Property missing from DOM types.\n                            scalabilityMode: 'L1T1'\n                        };\n\n                        if (['detail', 'text'].includes(track.contentHint)) {\n                            // Prioritize best resolution, for maximum picture detail.\n                            encoding.scaleResolutionDownBy = 1.0;\n\n                            // @ts-ignore -- Property missing from DOM types.\n                            encoding.maxFramerate = Math.floor(30 / layerDiv);\n                        } else {\n                            encoding.scaleResolutionDownBy = layerDiv;\n                        }\n\n                        tcInit.sendEncodings.push(encoding);\n                    }\n                }\n\n                const tc = this.pc.addTransceiver(track, tcInit);\n\n                if (track.kind === 'video') {\n                    let sendParams = tc.sender.getParameters();\n                    let needSetParams = false;\n\n                    if (!sendParams.degradationPreference?.length) {\n                        // degradationPreference for video: \"balanced\", \"maintain-framerate\", \"maintain-resolution\".\n                        // https://www.w3.org/TR/2018/CR-webrtc-20180927/#dom-rtcdegradationpreference\n                        if (['detail', 'text'].includes(track.contentHint)) {\n                            sendParams.degradationPreference = 'maintain-resolution';\n                        } else {\n                            sendParams.degradationPreference = 'balanced';\n                        }\n\n                        logger.info(`[createOffer] Video sender Degradation Preference set: ${sendParams.degradationPreference}`);\n\n                        // FIXME: Firefox implements degradationPreference on each individual encoding!\n                        // (set it on every element of the sendParams.encodings array)\n\n                        needSetParams = true;\n                    }\n\n                    // FIXME: Check that the simulcast encodings were applied.\n                    // Firefox doesn't implement `RTCRtpTransceiverInit.sendEncodings`\n                    // so the only way to enable simulcast is with `RTCRtpSender.setParameters()`.\n                    //\n                    // This next block can be deleted when Firefox fixes bug #1396918:\n                    // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n                    //\n                    // NOTE: This is done in a way that is compatible with all browsers, to save on\n                    // browser-conditional code. The idea comes from WebRTC Adapter.js:\n                    // * https://github.com/webrtcHacks/adapter/issues/998\n                    // * https://github.com/webrtcHacks/adapter/blob/v7.7.0/src/js/firefox/firefox_shim.js#L231-L255\n                    if (this.configuration.simulcast) {\n                        if (sendParams.encodings?.length !== tcInit.sendEncodings!.length) {\n                            sendParams.encodings = tcInit.sendEncodings!;\n\n                            needSetParams = true;\n                        }\n                    }\n\n                    if (needSetParams) {\n                        logger.debug(`[createOffer] Setting new RTCRtpSendParameters to video sender`);\n                        try {\n                            await tc.sender.setParameters(sendParams);\n                        } catch (error) {\n                            let message = `[WebRtcPeer.createOffer] Cannot set RTCRtpSendParameters to video sender`;\n                            if (error instanceof Error) {\n                                message += `: ${error.message}`;\n                            }\n                            throw new Error(message);\n                        }\n                    }\n                }\n\n                // DEBUG: Uncomment for details.\n                // if (track.kind === \"video\" && this.configuration.simulcast) {\n                //     // Print browser capabilities.\n                //     // prettier-ignore\n                //     logger.debug(`[createOffer] Transceiver send capabilities (static):\\n${JSON.stringify(RTCRtpSender.getCapabilities?.(\"video\"), null, 2)}`);\n                //     // prettier-ignore\n                //     logger.debug(`[createOffer] Transceiver recv capabilities (static):\\n${JSON.stringify(RTCRtpReceiver.getCapabilities?.(\"video\"), null, 2)}`);\n\n                //     // Print requested Transceiver encodings and parameters.\n                //     // prettier-ignore\n                //     logger.debug(`[createOffer] Transceiver send encodings (requested):\\n${JSON.stringify(tcInit.sendEncodings, null, 2)}`);\n                //     // prettier-ignore\n                //     logger.debug(`[createOffer] Transceiver send parameters (accepted):\\n${JSON.stringify(tc.sender.getParameters(), null, 2)}`);\n                // }\n            }\n        } else {\n            // To just receive media, create new recvonly transceivers.\n            for (const kind of ['audio', 'video']) {\n                // Check if the media kind should be used.\n                if (!this.configuration.mediaConstraints[kind]) {\n                    continue;\n                }\n\n                this.configuration.mediaStream = new MediaStream();\n                this.pc.addTransceiver(kind, {\n                    direction: this.configuration.mode,\n                    streams: [this.configuration.mediaStream]\n                });\n            }\n        }\n\n        let sdpOffer: RTCSessionDescriptionInit;\n        try {\n            sdpOffer = await this.pc.createOffer();\n        } catch (error) {\n            let message = `[WebRtcPeer.createOffer] Browser failed creating an SDP Offer`;\n            if (error instanceof Error) {\n                message += `: ${error.message}`;\n            }\n            throw new Error(message);\n        }\n\n        return sdpOffer;\n    }\n\n    deprecatedPeerConnectionTrackApi() {\n        for (const track of this.configuration.mediaStream!.getTracks()) {\n            this.pc.addTrack(track, this.configuration.mediaStream!);\n        }\n    }\n\n    /**\n     * Creates an SDP answer from the local RTCPeerConnection to send to the other peer\n     * Only if the negotiation was initiated by the other peer\n     */\n    createAnswer(): Promise<RTCSessionDescriptionInit> {\n        return new Promise((resolve, reject) => {\n            // TODO: Delete this conditional when all supported browsers are\n            // modern enough to implement the Transceiver methods.\n            if ('getTransceivers' in this.pc) {\n                logger.debug('[createAnswer] Method RTCPeerConnection.getTransceivers() is available; using it');\n\n                // Ensure that the PeerConnection already contains one Transceiver\n                // for each kind of media.\n                // The Transceivers should have been already created internally by\n                // the PC itself, when `pc.setRemoteDescription(sdpOffer)` was called.\n\n                for (const kind of ['audio', 'video']) {\n                    // Check if the media kind should be used.\n                    if (!this.configuration.mediaConstraints[kind]) {\n                        continue;\n                    }\n\n                    let tc = this.pc.getTransceivers().find((tc) => tc.receiver.track.kind === kind);\n\n                    if (tc) {\n                        // Enforce our desired direction.\n                        tc.direction = this.configuration.mode;\n                    } else {\n                        return reject(new Error(`${kind} requested, but no transceiver was created from remote description`));\n                    }\n                }\n\n                this.pc\n                    .createAnswer()\n                    .then((sdpAnswer) => resolve(sdpAnswer))\n                    .catch((error) => reject(error));\n            } else {\n                // TODO: Delete else branch when all supported browsers are\n                // modern enough to implement the Transceiver methods\n\n                let offerAudio,\n                    offerVideo = true;\n                if (!!this.configuration.mediaConstraints) {\n                    offerAudio =\n                        typeof this.configuration.mediaConstraints.audio === 'boolean' ? this.configuration.mediaConstraints.audio : true;\n                    offerVideo =\n                        typeof this.configuration.mediaConstraints.video === 'boolean' ? this.configuration.mediaConstraints.video : true;\n                    const constraints: RTCOfferOptions = {\n                        offerToReceiveAudio: offerAudio,\n                        offerToReceiveVideo: offerVideo\n                    };\n                    (this.pc as RTCPeerConnection).createAnswer(constraints)\n                        .then((sdpAnswer) => resolve(sdpAnswer))\n                        .catch((error) => reject(error));\n                }\n            }\n\n            // else, there is nothing to do; the legacy createAnswer() options do\n            // not offer any control over which tracks are included in the answer.\n        });\n    }\n\n    /**\n     * This peer initiated negotiation. Step 1/4 of SDP offer-answer protocol\n     */\n    processLocalOffer(offer: RTCSessionDescriptionInit): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.pc\n                .setLocalDescription(offer)\n                .then(() => {\n                    const localDescription = this.pc.localDescription;\n                    if (!!localDescription) {\n                        logger.debug('Local description set', localDescription.sdp);\n                        return resolve();\n                    } else {\n                        return reject('Local description is not defined');\n                    }\n                })\n                .catch((error) => reject(error));\n        });\n    }\n\n    /**\n     * Other peer initiated negotiation. Step 2/4 of SDP offer-answer protocol\n     */\n    processRemoteOffer(sdpOffer: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const offer: RTCSessionDescriptionInit = {\n                type: 'offer',\n                sdp: sdpOffer\n            };\n            logger.debug('SDP offer received, setting remote description', offer);\n\n            if (this.pc.signalingState === 'closed') {\n                return reject('RTCPeerConnection is closed when trying to set remote description');\n            }\n            this.setRemoteDescription(offer)\n                .then(() => resolve())\n                .catch((error) => reject(error));\n        });\n    }\n\n    /**\n     * Other peer initiated negotiation. Step 3/4 of SDP offer-answer protocol\n     */\n    processLocalAnswer(answer: RTCSessionDescriptionInit): Promise<void> {\n        return new Promise((resolve, reject) => {\n            logger.debug('SDP answer created, setting local description');\n            if (this.pc.signalingState === 'closed') {\n                return reject('RTCPeerConnection is closed when trying to set local description');\n            }\n            this.pc\n                .setLocalDescription(answer)\n                .then(() => resolve())\n                .catch((error) => reject(error));\n        });\n    }\n\n    /**\n     * This peer initiated negotiation. Step 4/4 of SDP offer-answer protocol\n     */\n    processRemoteAnswer(sdpAnswer: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const answer: RTCSessionDescriptionInit = {\n                type: 'answer',\n                sdp: sdpAnswer\n            };\n            logger.debug('SDP answer received, setting remote description');\n\n            if (this.pc.signalingState === 'closed') {\n                return reject('RTCPeerConnection is closed when trying to set remote description');\n            }\n            this.setRemoteDescription(answer)\n                .then(() => {\n                    // DEBUG: Uncomment for details.\n                    // {\n                    //     const tc = this.pc.getTransceivers().find((tc) => tc.sender.track?.kind === \"video\");\n                    //     // prettier-ignore\n                    //     logger.debug(`[processRemoteAnswer] Transceiver send parameters (effective):\\n${JSON.stringify(tc?.sender.getParameters(), null, 2)}`);\n                    // }\n\n                    resolve();\n                })\n                .catch((error) => reject(error));\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    async setRemoteDescription(sdp: RTCSessionDescriptionInit): Promise<void> {\n        return this.pc.setRemoteDescription(sdp);\n    }\n\n    /**\n     * Callback function invoked when an ICE candidate is received\n     */\n    addIceCandidate(iceCandidate: RTCIceCandidate): Promise<void> {\n        return new Promise((resolve, reject) => {\n            logger.debug('Remote ICE candidate received', iceCandidate);\n            this.remoteCandidatesQueue.push(iceCandidate);\n            switch (this.pc.signalingState) {\n                case 'closed':\n                    reject(new Error('PeerConnection object is closed'));\n                    break;\n                case 'stable':\n                    if (!!this.pc.remoteDescription) {\n                        this.pc\n                            .addIceCandidate(iceCandidate)\n                            .then(() => resolve())\n                            .catch((error) => reject(error));\n                    } else {\n                        this.iceCandidateList.push(iceCandidate);\n                        resolve();\n                    }\n                    break;\n                default:\n                    this.iceCandidateList.push(iceCandidate);\n                    resolve();\n            }\n        });\n    }\n\n    addIceConnectionStateChangeListener(otherId: string) {\n        this.pc.addEventListener('iceconnectionstatechange', () => {\n            const iceConnectionState: RTCIceConnectionState = this.pc.iceConnectionState;\n            switch (iceConnectionState) {\n                case 'disconnected':\n                    // Possible network disconnection\n                    const msg1 =\n                        'IceConnectionState of RTCPeerConnection ' +\n                        this.configuration.id +\n                        ' (' +\n                        otherId +\n                        ') change to \"disconnected\". Possible network disconnection';\n                    logger.warn(msg1);\n                    this.configuration.onIceConnectionStateException(ExceptionEventName.ICE_CONNECTION_DISCONNECTED, msg1);\n                    break;\n                case 'failed':\n                    const msg2 = 'IceConnectionState of RTCPeerConnection ' + this.configuration.id + ' (' + otherId + ') to \"failed\"';\n                    logger.error(msg2);\n                    this.configuration.onIceConnectionStateException(ExceptionEventName.ICE_CONNECTION_FAILED, msg2);\n                    break;\n                case 'closed':\n                    logger.log(\n                        'IceConnectionState of RTCPeerConnection ' + this.configuration.id + ' (' + otherId + ') change to \"closed\"'\n                    );\n                    break;\n                case 'new':\n                    logger.log('IceConnectionState of RTCPeerConnection ' + this.configuration.id + ' (' + otherId + ') change to \"new\"');\n                    break;\n                case 'checking':\n                    logger.log(\n                        'IceConnectionState of RTCPeerConnection ' + this.configuration.id + ' (' + otherId + ') change to \"checking\"'\n                    );\n                    break;\n                case 'connected':\n                    logger.log(\n                        'IceConnectionState of RTCPeerConnection ' + this.configuration.id + ' (' + otherId + ') change to \"connected\"'\n                    );\n                    break;\n                case 'completed':\n                    logger.log(\n                        'IceConnectionState of RTCPeerConnection ' + this.configuration.id + ' (' + otherId + ') change to \"completed\"'\n                    );\n                    break;\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    generateUniqueId(): string {\n        return uuidv4();\n    }\n}\n\nexport class WebRtcPeerRecvonly extends WebRtcPeer {\n    constructor(configuration: WebRtcPeerConfiguration) {\n        configuration.mode = 'recvonly';\n        super(configuration);\n    }\n}\n\nexport class WebRtcPeerSendonly extends WebRtcPeer {\n    constructor(configuration: WebRtcPeerConfiguration) {\n        configuration.mode = 'sendonly';\n        super(configuration);\n    }\n}\n\nexport class WebRtcPeerSendrecv extends WebRtcPeer {\n    constructor(configuration: WebRtcPeerConfiguration) {\n        configuration.mode = 'sendrecv';\n        super(configuration);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}