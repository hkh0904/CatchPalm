{"ast":null,"code":"\"use strict\";\n\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamManager = void 0;\nvar EventDispatcher_1 = require(\"./EventDispatcher\");\nvar StreamManagerEvent_1 = require(\"../OpenViduInternal/Events/StreamManagerEvent\");\nvar VideoElementEvent_1 = require(\"../OpenViduInternal/Events/VideoElementEvent\");\nvar ExceptionEvent_1 = require(\"../OpenViduInternal/Events/ExceptionEvent\");\nvar VideoInsertMode_1 = require(\"../OpenViduInternal/Enums/VideoInsertMode\");\nvar OpenViduLogger_1 = require(\"../OpenViduInternal/Logger/OpenViduLogger\");\nvar Platform_1 = require(\"../OpenViduInternal/Utils/Platform\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * @hidden\n */\nvar platform;\n/**\n * Interface in charge of displaying the media streams in the HTML DOM. This wraps any {@link Publisher} and {@link Subscriber} object.\n * You can insert as many video players fo the same Stream as you want by calling {@link StreamManager.addVideoElement} or\n * {@link StreamManager.createVideoElement}.\n * The use of StreamManager wrapper is particularly useful when you don't need to differentiate between Publisher or Subscriber streams or just\n * want to directly manage your own video elements (even more than one video element per Stream). This scenario is pretty common in\n * declarative, MVC frontend frameworks such as Angular, React or Vue.js\n *\n * See available event listeners at {@link StreamManagerEventMap}.\n */\nvar StreamManager = /** @class */function (_super) {\n  __extends(StreamManager, _super);\n  /**\n   * @hidden\n   */\n  function StreamManager(stream, targetElement) {\n    var _this = _super.call(this) || this;\n    /**\n     * All the videos displaying the Stream of this Publisher/Subscriber\n     */\n    _this.videos = [];\n    /**\n     * @hidden\n     */\n    _this.lazyLaunchVideoElementCreatedEvent = false;\n    platform = Platform_1.PlatformUtils.getInstance();\n    _this.stream = stream;\n    _this.stream.streamManager = _this;\n    _this.remote = !_this.stream.isLocal();\n    if (!!targetElement) {\n      var targEl = void 0;\n      if (typeof targetElement === 'string') {\n        targEl = document.getElementById(targetElement);\n      } else if (targetElement instanceof HTMLElement) {\n        targEl = targetElement;\n      }\n      if (!!targEl) {\n        _this.firstVideoElement = {\n          targetElement: targEl,\n          video: document.createElement('video'),\n          id: '',\n          canplayListenerAdded: false\n        };\n        if (platform.isSafariBrowser() || platform.isIPhoneOrIPad() && (platform.isChromeMobileBrowser() || platform.isEdgeMobileBrowser() || platform.isOperaMobileBrowser() || platform.isFirefoxMobileBrowser())) {\n          _this.firstVideoElement.video.playsInline = true;\n        }\n        _this.targetElement = targEl;\n        _this.element = targEl;\n      }\n    }\n    _this.canPlayListener = function () {\n      _this.deactivateStreamPlayingEventExceptionTimeout();\n      _this.ee.emitEvent('streamPlaying', [new StreamManagerEvent_1.StreamManagerEvent(_this, 'streamPlaying', undefined)]);\n    };\n    return _this;\n  }\n  /**\n   * See {@link EventDispatcher.on}\n   */\n  StreamManager.prototype.on = function (type, handler) {\n    _super.prototype.onAux.call(this, type, \"Event '\" + type + \"' triggered by '\" + (this.remote ? 'Subscriber' : 'Publisher') + \"'\", handler);\n    if (type === 'videoElementCreated') {\n      if (!!this.stream && this.lazyLaunchVideoElementCreatedEvent) {\n        this.ee.emitEvent('videoElementCreated', [new VideoElementEvent_1.VideoElementEvent(this.videos[0].video, this, 'videoElementCreated')]);\n        this.lazyLaunchVideoElementCreatedEvent = false;\n      }\n    }\n    if (type === 'streamPlaying') {\n      if (this.videos[0] && this.videos[0].video && this.videos[0].video.currentTime > 0 && this.videos[0].video.paused === false && this.videos[0].video.ended === false && this.videos[0].video.readyState === 4) {\n        this.ee.emitEvent('streamPlaying', [new StreamManagerEvent_1.StreamManagerEvent(this, 'streamPlaying', undefined)]);\n      }\n    }\n    if (this.stream.hasAudio) {\n      if (type === 'publisherStartSpeaking') {\n        this.stream.enableHarkSpeakingEvent();\n      }\n      if (type === 'publisherStopSpeaking') {\n        this.stream.enableHarkStoppedSpeakingEvent();\n      }\n      if (type === 'streamAudioVolumeChange') {\n        this.stream.enableHarkVolumeChangeEvent(false);\n      }\n    }\n    return this;\n  };\n  /**\n   * See {@link EventDispatcher.once}\n   */\n  StreamManager.prototype.once = function (type, handler) {\n    _super.prototype.onceAux.call(this, type, \"Event '\" + type + \"' triggered once by '\" + (this.remote ? 'Subscriber' : 'Publisher') + \"'\", handler);\n    if (type === 'videoElementCreated') {\n      if (!!this.stream && this.lazyLaunchVideoElementCreatedEvent) {\n        this.ee.emitEvent('videoElementCreated', [new VideoElementEvent_1.VideoElementEvent(this.videos[0].video, this, 'videoElementCreated')]);\n      }\n    }\n    if (type === 'streamPlaying') {\n      if (this.videos[0] && this.videos[0].video && this.videos[0].video.currentTime > 0 && this.videos[0].video.paused === false && this.videos[0].video.ended === false && this.videos[0].video.readyState === 4) {\n        this.ee.emitEvent('streamPlaying', [new StreamManagerEvent_1.StreamManagerEvent(this, 'streamPlaying', undefined)]);\n      }\n    }\n    if (this.stream.hasAudio) {\n      if (type === 'publisherStartSpeaking') {\n        this.stream.enableOnceHarkSpeakingEvent();\n      }\n      if (type === 'publisherStopSpeaking') {\n        this.stream.enableOnceHarkStoppedSpeakingEvent();\n      }\n      if (type === 'streamAudioVolumeChange') {\n        this.stream.enableOnceHarkVolumeChangeEvent(false);\n      }\n    }\n    return this;\n  };\n  /**\n   * See {@link EventDispatcher.off}\n   */\n  StreamManager.prototype.off = function (type, handler) {\n    _super.prototype.offAux.call(this, type, handler);\n    if (type === 'publisherStartSpeaking') {\n      // Both StreamManager and Session can have \"publisherStartSpeaking\" event listeners\n      var remainingStartSpeakingEventListeners = this.ee.getListeners(type).length + this.stream.session.ee.getListeners(type).length;\n      if (remainingStartSpeakingEventListeners === 0) {\n        this.stream.disableHarkSpeakingEvent(false);\n      }\n    }\n    if (type === 'publisherStopSpeaking') {\n      // Both StreamManager and Session can have \"publisherStopSpeaking\" event listeners\n      var remainingStopSpeakingEventListeners = this.ee.getListeners(type).length + this.stream.session.ee.getListeners(type).length;\n      if (remainingStopSpeakingEventListeners === 0) {\n        this.stream.disableHarkStoppedSpeakingEvent(false);\n      }\n    }\n    if (type === 'streamAudioVolumeChange') {\n      // Only StreamManager can have \"streamAudioVolumeChange\" event listeners\n      var remainingVolumeEventListeners = this.ee.getListeners(type).length;\n      if (remainingVolumeEventListeners === 0) {\n        this.stream.disableHarkVolumeChangeEvent(false);\n      }\n    }\n    return this;\n  };\n  /**\n   * Makes `video` element parameter display this {@link stream}. This is useful when you are\n   * [managing the video elements on your own](/en/stable/cheatsheet/manage-videos/#you-take-care-of-the-video-players)\n   *\n   * Calling this method with a video already added to other Publisher/Subscriber will cause the video element to be\n   * disassociated from that previous Publisher/Subscriber and to be associated to this one.\n   *\n   * @returns 1 if the video wasn't associated to any other Publisher/Subscriber and has been successfully added to this one.\n   * 0 if the video was already added to this Publisher/Subscriber. -1 if the video was previously associated to any other\n   * Publisher/Subscriber and has been successfully disassociated from that one and properly added to this one.\n   */\n  StreamManager.prototype.addVideoElement = function (video) {\n    this.initializeVideoProperties(video);\n    if (!this.remote && this.stream.displayMyRemote()) {\n      if (video.srcObject !== this.stream.getMediaStream()) {\n        video.srcObject = this.stream.getMediaStream();\n      }\n    }\n    // If the video element is already part of this StreamManager do nothing\n    for (var _i = 0, _a = this.videos; _i < _a.length; _i++) {\n      var v = _a[_i];\n      if (v.video === video) {\n        return 0;\n      }\n    }\n    var returnNumber = 1;\n    for (var _b = 0, _c = this.stream.session.streamManagers; _b < _c.length; _b++) {\n      var streamManager = _c[_b];\n      if (streamManager.disassociateVideo(video)) {\n        returnNumber = -1;\n        break;\n      }\n    }\n    this.stream.session.streamManagers.forEach(function (streamManager) {\n      streamManager.disassociateVideo(video);\n    });\n    this.pushNewStreamManagerVideo({\n      video: video,\n      id: video.id,\n      canplayListenerAdded: false\n    });\n    logger.info('New video element associated to ', this);\n    return returnNumber;\n  };\n  /**\n   * Creates a new video element displaying this {@link stream}. This allows you to have multiple video elements displaying the same media stream.\n   *\n   * #### Events dispatched\n   *\n   * The Publisher/Subscriber object will dispatch a `videoElementCreated` event once the HTML video element has been added to DOM. See {@link VideoElementEvent}\n   *\n   * @param targetElement HTML DOM element (or its `id` attribute) in which the video element of the Publisher/Subscriber will be inserted\n   * @param insertMode How the video element will be inserted accordingly to `targetElemet`\n   *\n   * @returns The created HTMLVideoElement\n   */\n  StreamManager.prototype.createVideoElement = function (targetElement, insertMode) {\n    var targEl;\n    if (typeof targetElement === 'string') {\n      targEl = document.getElementById(targetElement);\n      if (!targEl) {\n        throw new Error(\"The provided 'targetElement' couldn't be resolved to any HTML element: \" + targetElement);\n      }\n    } else if (targetElement instanceof HTMLElement) {\n      targEl = targetElement;\n    } else {\n      throw new Error(\"The provided 'targetElement' couldn't be resolved to any HTML element: \" + targetElement);\n    }\n    var video = this.createVideo();\n    this.initializeVideoProperties(video);\n    var insMode = !!insertMode ? insertMode : VideoInsertMode_1.VideoInsertMode.APPEND;\n    switch (insMode) {\n      case VideoInsertMode_1.VideoInsertMode.AFTER:\n        targEl.parentNode.insertBefore(video, targEl.nextSibling);\n        break;\n      case VideoInsertMode_1.VideoInsertMode.APPEND:\n        targEl.appendChild(video);\n        break;\n      case VideoInsertMode_1.VideoInsertMode.BEFORE:\n        targEl.parentNode.insertBefore(video, targEl);\n        break;\n      case VideoInsertMode_1.VideoInsertMode.PREPEND:\n        targEl.insertBefore(video, targEl.childNodes[0]);\n        break;\n      case VideoInsertMode_1.VideoInsertMode.REPLACE:\n        targEl.parentNode.replaceChild(video, targEl);\n        break;\n      default:\n        insMode = VideoInsertMode_1.VideoInsertMode.APPEND;\n        targEl.appendChild(video);\n        break;\n    }\n    var v = {\n      targetElement: targEl,\n      video: video,\n      insertMode: insMode,\n      id: video.id,\n      canplayListenerAdded: false\n    };\n    this.pushNewStreamManagerVideo(v);\n    this.ee.emitEvent('videoElementCreated', [new VideoElementEvent_1.VideoElementEvent(v.video, this, 'videoElementCreated')]);\n    this.lazyLaunchVideoElementCreatedEvent = !!this.firstVideoElement;\n    return video;\n  };\n  /**\n   * Updates the current configuration for the {@link PublisherSpeakingEvent} feature and the [StreamManagerEvent.streamAudioVolumeChange](/en/stable/api/openvidu-browser/classes/StreamManagerEvent.html) feature for this specific\n   * StreamManager audio stream, overriding the global options set with {@link OpenVidu.setAdvancedConfiguration}. This way you can customize the audio events options\n   * for each specific StreamManager and change them dynamically.\n   *\n   * @param publisherSpeakingEventsOptions New options to be applied to this StreamManager's audio stream. It is an object which includes the following optional properties:\n   * - `interval`: (number) how frequently the analyser polls the audio stream to check if speaking has started/stopped or audio volume has changed. Default **100** (ms)\n   * - `threshold`: (number) the volume at which _publisherStartSpeaking_, _publisherStopSpeaking_ events will be fired. Default **-50** (dB)\n   */\n  StreamManager.prototype.updatePublisherSpeakingEventsOptions = function (publisherSpeakingEventsOptions) {\n    var currentHarkOptions = !!this.stream.harkOptions ? this.stream.harkOptions : this.stream.session.openvidu.advancedConfiguration.publisherSpeakingEventsOptions || {};\n    var newInterval = typeof publisherSpeakingEventsOptions.interval === 'number' ? publisherSpeakingEventsOptions.interval : typeof currentHarkOptions.interval === 'number' ? currentHarkOptions.interval : 100;\n    var newThreshold = typeof publisherSpeakingEventsOptions.threshold === 'number' ? publisherSpeakingEventsOptions.threshold : typeof currentHarkOptions.threshold === 'number' ? currentHarkOptions.threshold : -50;\n    this.stream.harkOptions = {\n      interval: newInterval,\n      threshold: newThreshold\n    };\n    if (!!this.stream.speechEvent) {\n      this.stream.speechEvent.setInterval(newInterval);\n      this.stream.speechEvent.setThreshold(newThreshold);\n    }\n  };\n  /* Hidden methods */\n  /**\n   * @hidden\n   */\n  StreamManager.prototype.initializeVideoProperties = function (video) {\n    if (!(!this.remote && this.stream.displayMyRemote())) {\n      // Avoid setting the MediaStream into the srcObject if remote subscription before publishing\n      if (video.srcObject !== this.stream.getMediaStream()) {\n        // If srcObject already set don't do it again\n        video.srcObject = this.stream.getMediaStream();\n      }\n    }\n    video.autoplay = true;\n    video.controls = false;\n    if (platform.isSafariBrowser() || platform.isIPhoneOrIPad() && (platform.isChromeMobileBrowser() || platform.isEdgeMobileBrowser() || platform.isOperaMobileBrowser() || platform.isFirefoxMobileBrowser())) {\n      video.playsInline = true;\n    }\n    if (!video.id) {\n      video.id = (this.remote ? 'remote-' : 'local-') + 'video-' + this.stream.streamId;\n      // DEPRECATED property: assign once the property id if the user provided a valid targetElement\n      if (!this.id && !!this.targetElement) {\n        this.id = video.id;\n      }\n    }\n    if (this.remote && this.isMirroredVideo(video)) {\n      // Subscriber video associated to a previously mirrored video element\n      this.removeMirrorVideo(video);\n    } else if (!this.remote && !this.stream.displayMyRemote()) {\n      // Publisher video\n      video.muted = true;\n      if (this.isMirroredVideo(video) && !this.stream.outboundStreamOpts.publisherProperties.mirror) {\n        // If the video was already rotated and now is set to not mirror\n        this.removeMirrorVideo(video);\n      } else if (this.stream.outboundStreamOpts.publisherProperties.mirror && !this.stream.isSendScreen()) {\n        // If the video is now set to mirror and is not screen share\n        this.mirrorVideo(video);\n      }\n    }\n  };\n  /**\n   * @hidden\n   */\n  StreamManager.prototype.removeAllVideos = function () {\n    var _this = this;\n    for (var i = this.stream.session.streamManagers.length - 1; i >= 0; --i) {\n      if (this.stream.session.streamManagers[i] === this) {\n        this.stream.session.streamManagers.splice(i, 1);\n      }\n    }\n    this.videos.forEach(function (streamManagerVideo) {\n      // Remove oncanplay event listener (only OpenVidu browser listener, not the user ones)\n      if (!!streamManagerVideo.video && !!streamManagerVideo.video.removeEventListener) {\n        streamManagerVideo.video.removeEventListener('canplay', _this.canPlayListener);\n      }\n      streamManagerVideo.canplayListenerAdded = false;\n      if (!!streamManagerVideo.targetElement) {\n        // Only remove from DOM videos created by OpenVidu Browser (those generated by passing a valid targetElement in OpenVidu.initPublisher\n        // and Session.subscribe or those created by StreamManager.createVideoElement). All this videos triggered a videoElementCreated event\n        streamManagerVideo.video.parentNode.removeChild(streamManagerVideo.video);\n        _this.ee.emitEvent('videoElementDestroyed', [new VideoElementEvent_1.VideoElementEvent(streamManagerVideo.video, _this, 'videoElementDestroyed')]);\n      }\n      // Remove srcObject from the video\n      _this.removeSrcObject(streamManagerVideo);\n      // Remove from collection of videos every video managed by OpenVidu Browser\n      _this.videos.filter(function (v) {\n        return !v.targetElement;\n      });\n    });\n  };\n  /**\n   * @hidden\n   */\n  StreamManager.prototype.disassociateVideo = function (video) {\n    var disassociated = false;\n    for (var i = 0; i < this.videos.length; i++) {\n      if (this.videos[i].video === video) {\n        this.videos[i].video.removeEventListener('canplay', this.canPlayListener);\n        this.videos.splice(i, 1);\n        disassociated = true;\n        logger.info('Video element disassociated from ', this);\n        break;\n      }\n    }\n    return disassociated;\n  };\n  /**\n   * @hidden\n   */\n  StreamManager.prototype.addPlayEventToFirstVideo = function () {\n    if (!!this.videos[0] && !!this.videos[0].video && !this.videos[0].canplayListenerAdded) {\n      this.activateStreamPlayingEventExceptionTimeout();\n      this.videos[0].video.addEventListener('canplay', this.canPlayListener);\n      this.videos[0].canplayListenerAdded = true;\n    }\n  };\n  /**\n   * @hidden\n   */\n  StreamManager.prototype.updateMediaStream = function (mediaStream) {\n    this.videos.forEach(function (streamManagerVideo) {\n      streamManagerVideo.video.srcObject = mediaStream;\n      if (platform.isIonicIos()) {\n        // iOS Ionic. LIMITATION: must reinsert the video in the DOM for\n        // the media stream to be updated\n        var vParent = streamManagerVideo.video.parentElement;\n        var newVideo = streamManagerVideo.video;\n        vParent.replaceChild(newVideo, streamManagerVideo.video);\n        streamManagerVideo.video = newVideo;\n      }\n    });\n  };\n  /**\n   * @hidden\n   */\n  StreamManager.prototype.emitEvent = function (type, eventArray) {\n    this.ee.emitEvent(type, eventArray);\n  };\n  /**\n   * @hidden\n   */\n  StreamManager.prototype.createVideo = function () {\n    return document.createElement('video');\n  };\n  /**\n   * @hidden\n   */\n  StreamManager.prototype.removeSrcObject = function (streamManagerVideo) {\n    streamManagerVideo.video.srcObject = null;\n    this.deactivateStreamPlayingEventExceptionTimeout();\n  };\n  /* Private methods */\n  StreamManager.prototype.pushNewStreamManagerVideo = function (streamManagerVideo) {\n    this.videos.push(streamManagerVideo);\n    this.addPlayEventToFirstVideo();\n    if (this.stream.session.streamManagers.indexOf(this) === -1) {\n      this.stream.session.streamManagers.push(this);\n    }\n  };\n  StreamManager.prototype.mirrorVideo = function (video) {\n    if (!platform.isIonicIos()) {\n      video.style.transform = 'rotateY(180deg)';\n      video.style.webkitTransform = 'rotateY(180deg)';\n    }\n  };\n  StreamManager.prototype.removeMirrorVideo = function (video) {\n    video.style.transform = 'unset';\n    video.style.webkitTransform = 'unset';\n  };\n  StreamManager.prototype.isMirroredVideo = function (video) {\n    return video.style.transform === 'rotateY(180deg)' || video.style.webkitTransform === 'rotateY(180deg)';\n  };\n  StreamManager.prototype.activateStreamPlayingEventExceptionTimeout = function () {\n    var _this = this;\n    if (!this.remote) {\n      // ExceptionEvent NO_STREAM_PLAYING_EVENT is only for subscribers\n      return;\n    }\n    if (this.streamPlayingEventExceptionTimeout != null) {\n      // The timeout is already activated\n      return;\n    }\n    // Trigger ExceptionEvent NO_STREAM_PLAYING_EVENT if after timeout there is no 'canplay' event\n    var msTimeout = this.stream.session.openvidu.advancedConfiguration.noStreamPlayingEventExceptionTimeout || 4000;\n    this.streamPlayingEventExceptionTimeout = setTimeout(function () {\n      var msg = 'StreamManager of Stream ' + _this.stream.streamId + ' (' + (_this.remote ? 'Subscriber' : 'Publisher') + ') did not trigger \"streamPlaying\" event in ' + msTimeout + ' ms';\n      logger.warn(msg);\n      _this.stream.session.emitEvent('exception', [new ExceptionEvent_1.ExceptionEvent(_this.stream.session, ExceptionEvent_1.ExceptionEventName.NO_STREAM_PLAYING_EVENT, _this, msg)]);\n      delete _this.streamPlayingEventExceptionTimeout;\n    }, msTimeout);\n  };\n  StreamManager.prototype.deactivateStreamPlayingEventExceptionTimeout = function () {\n    clearTimeout(this.streamPlayingEventExceptionTimeout);\n    delete this.streamPlayingEventExceptionTimeout;\n  };\n  return StreamManager;\n}(EventDispatcher_1.EventDispatcher);\nexports.StreamManager = StreamManager;","map":{"version":3,"names":["EventDispatcher_1","require","StreamManagerEvent_1","VideoElementEvent_1","ExceptionEvent_1","VideoInsertMode_1","OpenViduLogger_1","Platform_1","logger","OpenViduLogger","getInstance","platform","StreamManager","_super","__extends","stream","targetElement","_this","call","videos","lazyLaunchVideoElementCreatedEvent","PlatformUtils","streamManager","remote","isLocal","targEl","document","getElementById","HTMLElement","firstVideoElement","video","createElement","id","canplayListenerAdded","isSafariBrowser","isIPhoneOrIPad","isChromeMobileBrowser","isEdgeMobileBrowser","isOperaMobileBrowser","isFirefoxMobileBrowser","playsInline","element","canPlayListener","deactivateStreamPlayingEventExceptionTimeout","ee","emitEvent","StreamManagerEvent","undefined","prototype","on","type","handler","onAux","VideoElementEvent","currentTime","paused","ended","readyState","hasAudio","enableHarkSpeakingEvent","enableHarkStoppedSpeakingEvent","enableHarkVolumeChangeEvent","once","onceAux","enableOnceHarkSpeakingEvent","enableOnceHarkStoppedSpeakingEvent","enableOnceHarkVolumeChangeEvent","off","offAux","remainingStartSpeakingEventListeners","getListeners","length","session","disableHarkSpeakingEvent","remainingStopSpeakingEventListeners","disableHarkStoppedSpeakingEvent","remainingVolumeEventListeners","disableHarkVolumeChangeEvent","addVideoElement","initializeVideoProperties","displayMyRemote","srcObject","getMediaStream","_i","_a","v","returnNumber","_b","_c","streamManagers","disassociateVideo","forEach","pushNewStreamManagerVideo","info","createVideoElement","insertMode","Error","createVideo","insMode","VideoInsertMode","APPEND","AFTER","parentNode","insertBefore","nextSibling","appendChild","BEFORE","PREPEND","childNodes","REPLACE","replaceChild","updatePublisherSpeakingEventsOptions","publisherSpeakingEventsOptions","currentHarkOptions","harkOptions","openvidu","advancedConfiguration","newInterval","interval","newThreshold","threshold","speechEvent","setInterval","setThreshold","autoplay","controls","streamId","isMirroredVideo","removeMirrorVideo","muted","outboundStreamOpts","publisherProperties","mirror","isSendScreen","mirrorVideo","removeAllVideos","i","splice","streamManagerVideo","removeEventListener","removeChild","removeSrcObject","filter","disassociated","addPlayEventToFirstVideo","activateStreamPlayingEventExceptionTimeout","addEventListener","updateMediaStream","mediaStream","isIonicIos","vParent","parentElement","newVideo","eventArray","push","indexOf","style","transform","webkitTransform","streamPlayingEventExceptionTimeout","msTimeout","noStreamPlayingEventExceptionTimeout","setTimeout","msg","warn","ExceptionEvent","ExceptionEventName","NO_STREAM_PLAYING_EVENT","clearTimeout","EventDispatcher","exports"],"sources":["C:\\Users\\SSAFY\\Desktop\\catchpalm\\my-app\\node_modules\\openvidu-browser\\src\\OpenVidu\\StreamManager.ts"],"sourcesContent":["/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Stream } from './Stream';\nimport { Subscriber } from './Subscriber';\nimport { EventDispatcher } from './EventDispatcher';\nimport { StreamManagerVideo } from '../OpenViduInternal/Interfaces/Public/StreamManagerVideo';\nimport { StreamManagerEventMap } from '../OpenViduInternal/Events/EventMap/StreamManagerEventMap';\nimport { StreamManagerEvent } from '../OpenViduInternal/Events/StreamManagerEvent';\nimport { VideoElementEvent } from '../OpenViduInternal/Events/VideoElementEvent';\nimport { ExceptionEvent, ExceptionEventName } from '../OpenViduInternal/Events/ExceptionEvent';\nimport { VideoInsertMode } from '../OpenViduInternal/Enums/VideoInsertMode';\nimport { OpenViduLogger } from '../OpenViduInternal/Logger/OpenViduLogger';\nimport { PlatformUtils } from '../OpenViduInternal/Utils/Platform';\n\n/**\n * @hidden\n */\nconst logger: OpenViduLogger = OpenViduLogger.getInstance();\n\n/**\n * @hidden\n */\nlet platform: PlatformUtils;\n\n/**\n * Interface in charge of displaying the media streams in the HTML DOM. This wraps any {@link Publisher} and {@link Subscriber} object.\n * You can insert as many video players fo the same Stream as you want by calling {@link StreamManager.addVideoElement} or\n * {@link StreamManager.createVideoElement}.\n * The use of StreamManager wrapper is particularly useful when you don't need to differentiate between Publisher or Subscriber streams or just\n * want to directly manage your own video elements (even more than one video element per Stream). This scenario is pretty common in\n * declarative, MVC frontend frameworks such as Angular, React or Vue.js\n *\n * See available event listeners at {@link StreamManagerEventMap}.\n */\nexport abstract class StreamManager extends EventDispatcher {\n    /**\n     * The Stream represented in the DOM by the Publisher/Subscriber\n     */\n    stream: Stream;\n\n    /**\n     * All the videos displaying the Stream of this Publisher/Subscriber\n     */\n    videos: StreamManagerVideo[] = [];\n\n    /**\n     * Whether the Stream represented in the DOM is local or remote\n     * - `false` for {@link Publisher}\n     * - `true` for {@link Subscriber}\n     */\n    remote: boolean;\n\n    /**\n     * The DOM HTMLElement assigned as target element when creating the video for the Publisher/Subscriber. This property is only defined if:\n     * - {@link Publisher} has been initialized by calling method {@link OpenVidu.initPublisher} with a valid `targetElement` parameter\n     * - {@link Subscriber} has been initialized by calling method {@link Session.subscribe} with a valid `targetElement` parameter\n     */\n    targetElement: HTMLElement;\n\n    /**\n     * `id` attribute of the DOM video element displaying the Publisher/Subscriber's stream. This property is only defined if:\n     * - {@link Publisher} has been initialized by calling method {@link OpenVidu.initPublisher} with a valid `targetElement` parameter\n     * - {@link Subscriber} has been initialized by calling method {@link Session.subscribe} with a valid `targetElement` parameter\n     */\n    id: string;\n\n    /**\n     * @hidden\n     */\n    protected firstVideoElement?: StreamManagerVideo;\n    /**\n     * @hidden\n     */\n    protected element: HTMLElement;\n    /**\n     * @hidden\n     */\n    protected canPlayListener: EventListener;\n    /**\n     * @hidden\n     */\n    private streamPlayingEventExceptionTimeout?: NodeJS.Timeout;\n    /**\n     * @hidden\n     */\n    private lazyLaunchVideoElementCreatedEvent = false;\n\n    /**\n     * @hidden\n     */\n    constructor(stream: Stream, targetElement?: HTMLElement | string) {\n        super();\n        platform = PlatformUtils.getInstance();\n        this.stream = stream;\n        this.stream.streamManager = this;\n        this.remote = !this.stream.isLocal();\n\n        if (!!targetElement) {\n            let targEl;\n            if (typeof targetElement === 'string') {\n                targEl = document.getElementById(targetElement);\n            } else if (targetElement instanceof HTMLElement) {\n                targEl = targetElement;\n            }\n\n            if (!!targEl) {\n                this.firstVideoElement = {\n                    targetElement: targEl,\n                    video: document.createElement('video'),\n                    id: '',\n                    canplayListenerAdded: false\n                };\n                if (\n                    platform.isSafariBrowser() ||\n                    (platform.isIPhoneOrIPad() &&\n                        (platform.isChromeMobileBrowser() ||\n                            platform.isEdgeMobileBrowser() ||\n                            platform.isOperaMobileBrowser() ||\n                            platform.isFirefoxMobileBrowser()))\n                ) {\n                    this.firstVideoElement.video.playsInline = true;\n                }\n                this.targetElement = targEl;\n                this.element = targEl;\n            }\n        }\n\n        this.canPlayListener = () => {\n            this.deactivateStreamPlayingEventExceptionTimeout();\n            this.ee.emitEvent('streamPlaying', [new StreamManagerEvent(this, 'streamPlaying', undefined)]);\n        };\n    }\n\n    /**\n     * See {@link EventDispatcher.on}\n     */\n    on<K extends keyof StreamManagerEventMap>(type: K, handler: (event: StreamManagerEventMap[K]) => void): this {\n        super.onAux(type, \"Event '\" + type + \"' triggered by '\" + (this.remote ? 'Subscriber' : 'Publisher') + \"'\", handler);\n\n        if (type === 'videoElementCreated') {\n            if (!!this.stream && this.lazyLaunchVideoElementCreatedEvent) {\n                this.ee.emitEvent('videoElementCreated', [new VideoElementEvent(this.videos[0].video, this, 'videoElementCreated')]);\n                this.lazyLaunchVideoElementCreatedEvent = false;\n            }\n        }\n        if (type === 'streamPlaying') {\n            if (\n                this.videos[0] &&\n                this.videos[0].video &&\n                this.videos[0].video.currentTime > 0 &&\n                this.videos[0].video.paused === false &&\n                this.videos[0].video.ended === false &&\n                this.videos[0].video.readyState === 4\n            ) {\n                this.ee.emitEvent('streamPlaying', [new StreamManagerEvent(this, 'streamPlaying', undefined)]);\n            }\n        }\n        if (this.stream.hasAudio) {\n            if (type === 'publisherStartSpeaking') {\n                this.stream.enableHarkSpeakingEvent();\n            }\n            if (type === 'publisherStopSpeaking') {\n                this.stream.enableHarkStoppedSpeakingEvent();\n            }\n            if (type === 'streamAudioVolumeChange') {\n                this.stream.enableHarkVolumeChangeEvent(false);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * See {@link EventDispatcher.once}\n     */\n    once<K extends keyof StreamManagerEventMap>(type: K, handler: (event: StreamManagerEventMap[K]) => void): this {\n        super.onceAux(type, \"Event '\" + type + \"' triggered once by '\" + (this.remote ? 'Subscriber' : 'Publisher') + \"'\", handler);\n\n        if (type === 'videoElementCreated') {\n            if (!!this.stream && this.lazyLaunchVideoElementCreatedEvent) {\n                this.ee.emitEvent('videoElementCreated', [new VideoElementEvent(this.videos[0].video, this, 'videoElementCreated')]);\n            }\n        }\n        if (type === 'streamPlaying') {\n            if (\n                this.videos[0] &&\n                this.videos[0].video &&\n                this.videos[0].video.currentTime > 0 &&\n                this.videos[0].video.paused === false &&\n                this.videos[0].video.ended === false &&\n                this.videos[0].video.readyState === 4\n            ) {\n                this.ee.emitEvent('streamPlaying', [new StreamManagerEvent(this, 'streamPlaying', undefined)]);\n            }\n        }\n        if (this.stream.hasAudio) {\n            if (type === 'publisherStartSpeaking') {\n                this.stream.enableOnceHarkSpeakingEvent();\n            }\n            if (type === 'publisherStopSpeaking') {\n                this.stream.enableOnceHarkStoppedSpeakingEvent();\n            }\n            if (type === 'streamAudioVolumeChange') {\n                this.stream.enableOnceHarkVolumeChangeEvent(false);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * See {@link EventDispatcher.off}\n     */\n    off<K extends keyof StreamManagerEventMap>(type: K, handler?: (event: StreamManagerEventMap[K]) => void): this {\n        super.offAux(type, handler);\n\n        if (type === 'publisherStartSpeaking') {\n            // Both StreamManager and Session can have \"publisherStartSpeaking\" event listeners\n            const remainingStartSpeakingEventListeners =\n                this.ee.getListeners(type).length + this.stream.session.ee.getListeners(type).length;\n            if (remainingStartSpeakingEventListeners === 0) {\n                this.stream.disableHarkSpeakingEvent(false);\n            }\n        }\n        if (type === 'publisherStopSpeaking') {\n            // Both StreamManager and Session can have \"publisherStopSpeaking\" event listeners\n            const remainingStopSpeakingEventListeners =\n                this.ee.getListeners(type).length + this.stream.session.ee.getListeners(type).length;\n            if (remainingStopSpeakingEventListeners === 0) {\n                this.stream.disableHarkStoppedSpeakingEvent(false);\n            }\n        }\n        if (type === 'streamAudioVolumeChange') {\n            // Only StreamManager can have \"streamAudioVolumeChange\" event listeners\n            const remainingVolumeEventListeners = this.ee.getListeners(type).length;\n            if (remainingVolumeEventListeners === 0) {\n                this.stream.disableHarkVolumeChangeEvent(false);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Makes `video` element parameter display this {@link stream}. This is useful when you are\n     * [managing the video elements on your own](/en/stable/cheatsheet/manage-videos/#you-take-care-of-the-video-players)\n     *\n     * Calling this method with a video already added to other Publisher/Subscriber will cause the video element to be\n     * disassociated from that previous Publisher/Subscriber and to be associated to this one.\n     *\n     * @returns 1 if the video wasn't associated to any other Publisher/Subscriber and has been successfully added to this one.\n     * 0 if the video was already added to this Publisher/Subscriber. -1 if the video was previously associated to any other\n     * Publisher/Subscriber and has been successfully disassociated from that one and properly added to this one.\n     */\n    addVideoElement(video: HTMLVideoElement): number {\n        this.initializeVideoProperties(video);\n\n        if (!this.remote && this.stream.displayMyRemote()) {\n            if (video.srcObject !== this.stream.getMediaStream()) {\n                video.srcObject = this.stream.getMediaStream();\n            }\n        }\n\n        // If the video element is already part of this StreamManager do nothing\n        for (const v of this.videos) {\n            if (v.video === video) {\n                return 0;\n            }\n        }\n\n        let returnNumber = 1;\n\n        for (const streamManager of this.stream.session.streamManagers) {\n            if (streamManager.disassociateVideo(video)) {\n                returnNumber = -1;\n                break;\n            }\n        }\n\n        this.stream.session.streamManagers.forEach((streamManager) => {\n            streamManager.disassociateVideo(video);\n        });\n\n        this.pushNewStreamManagerVideo({\n            video,\n            id: video.id,\n            canplayListenerAdded: false\n        });\n\n        logger.info('New video element associated to ', this);\n\n        return returnNumber;\n    }\n\n    /**\n     * Creates a new video element displaying this {@link stream}. This allows you to have multiple video elements displaying the same media stream.\n     *\n     * #### Events dispatched\n     *\n     * The Publisher/Subscriber object will dispatch a `videoElementCreated` event once the HTML video element has been added to DOM. See {@link VideoElementEvent}\n     *\n     * @param targetElement HTML DOM element (or its `id` attribute) in which the video element of the Publisher/Subscriber will be inserted\n     * @param insertMode How the video element will be inserted accordingly to `targetElemet`\n     *\n     * @returns The created HTMLVideoElement\n     */\n    createVideoElement(targetElement?: string | HTMLElement, insertMode?: VideoInsertMode): HTMLVideoElement {\n        let targEl;\n        if (typeof targetElement === 'string') {\n            targEl = document.getElementById(targetElement);\n            if (!targEl) {\n                throw new Error(\"The provided 'targetElement' couldn't be resolved to any HTML element: \" + targetElement);\n            }\n        } else if (targetElement instanceof HTMLElement) {\n            targEl = targetElement;\n        } else {\n            throw new Error(\"The provided 'targetElement' couldn't be resolved to any HTML element: \" + targetElement);\n        }\n\n        const video = this.createVideo();\n        this.initializeVideoProperties(video);\n\n        let insMode = !!insertMode ? insertMode : VideoInsertMode.APPEND;\n        switch (insMode) {\n            case VideoInsertMode.AFTER:\n                targEl.parentNode!!.insertBefore(video, targEl.nextSibling);\n                break;\n            case VideoInsertMode.APPEND:\n                targEl.appendChild(video);\n                break;\n            case VideoInsertMode.BEFORE:\n                targEl.parentNode!!.insertBefore(video, targEl);\n                break;\n            case VideoInsertMode.PREPEND:\n                targEl.insertBefore(video, targEl.childNodes[0]);\n                break;\n            case VideoInsertMode.REPLACE:\n                targEl.parentNode!!.replaceChild(video, targEl);\n                break;\n            default:\n                insMode = VideoInsertMode.APPEND;\n                targEl.appendChild(video);\n                break;\n        }\n\n        const v: StreamManagerVideo = {\n            targetElement: targEl,\n            video,\n            insertMode: insMode,\n            id: video.id,\n            canplayListenerAdded: false\n        };\n        this.pushNewStreamManagerVideo(v);\n\n        this.ee.emitEvent('videoElementCreated', [new VideoElementEvent(v.video, this, 'videoElementCreated')]);\n        this.lazyLaunchVideoElementCreatedEvent = !!this.firstVideoElement;\n\n        return video;\n    }\n\n    /**\n     * Updates the current configuration for the {@link PublisherSpeakingEvent} feature and the [StreamManagerEvent.streamAudioVolumeChange](/en/stable/api/openvidu-browser/classes/StreamManagerEvent.html) feature for this specific\n     * StreamManager audio stream, overriding the global options set with {@link OpenVidu.setAdvancedConfiguration}. This way you can customize the audio events options\n     * for each specific StreamManager and change them dynamically.\n     *\n     * @param publisherSpeakingEventsOptions New options to be applied to this StreamManager's audio stream. It is an object which includes the following optional properties:\n     * - `interval`: (number) how frequently the analyser polls the audio stream to check if speaking has started/stopped or audio volume has changed. Default **100** (ms)\n     * - `threshold`: (number) the volume at which _publisherStartSpeaking_, _publisherStopSpeaking_ events will be fired. Default **-50** (dB)\n     */\n    updatePublisherSpeakingEventsOptions(publisherSpeakingEventsOptions: { interval?: number; threshold?: number }): void {\n        const currentHarkOptions = !!this.stream.harkOptions\n            ? this.stream.harkOptions\n            : this.stream.session.openvidu.advancedConfiguration.publisherSpeakingEventsOptions || {};\n        const newInterval =\n            typeof publisherSpeakingEventsOptions.interval === 'number'\n                ? publisherSpeakingEventsOptions.interval\n                : typeof currentHarkOptions.interval === 'number'\n                ? currentHarkOptions.interval\n                : 100;\n        const newThreshold =\n            typeof publisherSpeakingEventsOptions.threshold === 'number'\n                ? publisherSpeakingEventsOptions.threshold\n                : typeof currentHarkOptions.threshold === 'number'\n                ? currentHarkOptions.threshold\n                : -50;\n        this.stream.harkOptions = {\n            interval: newInterval,\n            threshold: newThreshold\n        };\n        if (!!this.stream.speechEvent) {\n            this.stream.speechEvent.setInterval(newInterval);\n            this.stream.speechEvent.setThreshold(newThreshold);\n        }\n    }\n\n    /* Hidden methods */\n\n    /**\n     * @hidden\n     */\n    initializeVideoProperties(video: HTMLVideoElement): void {\n        if (!(!this.remote && this.stream.displayMyRemote())) {\n            // Avoid setting the MediaStream into the srcObject if remote subscription before publishing\n            if (video.srcObject !== this.stream.getMediaStream()) {\n                // If srcObject already set don't do it again\n                video.srcObject = this.stream.getMediaStream();\n            }\n        }\n        video.autoplay = true;\n        video.controls = false;\n\n        if (\n            platform.isSafariBrowser() ||\n            (platform.isIPhoneOrIPad() &&\n                (platform.isChromeMobileBrowser() ||\n                    platform.isEdgeMobileBrowser() ||\n                    platform.isOperaMobileBrowser() ||\n                    platform.isFirefoxMobileBrowser()))\n        ) {\n            video.playsInline = true;\n        }\n\n        if (!video.id) {\n            video.id = (this.remote ? 'remote-' : 'local-') + 'video-' + this.stream.streamId;\n            // DEPRECATED property: assign once the property id if the user provided a valid targetElement\n            if (!this.id && !!this.targetElement) {\n                this.id = video.id;\n            }\n        }\n\n        if (this.remote && this.isMirroredVideo(video)) {\n            // Subscriber video associated to a previously mirrored video element\n            this.removeMirrorVideo(video);\n        } else if (!this.remote && !this.stream.displayMyRemote()) {\n            // Publisher video\n            video.muted = true;\n            if (this.isMirroredVideo(video) && !this.stream.outboundStreamOpts.publisherProperties.mirror) {\n                // If the video was already rotated and now is set to not mirror\n                this.removeMirrorVideo(video);\n            } else if (this.stream.outboundStreamOpts.publisherProperties.mirror && !this.stream.isSendScreen()) {\n                // If the video is now set to mirror and is not screen share\n                this.mirrorVideo(video);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    removeAllVideos(): void {\n        for (let i = this.stream.session.streamManagers.length - 1; i >= 0; --i) {\n            if (this.stream.session.streamManagers[i] === this) {\n                this.stream.session.streamManagers.splice(i, 1);\n            }\n        }\n\n        this.videos.forEach((streamManagerVideo) => {\n            // Remove oncanplay event listener (only OpenVidu browser listener, not the user ones)\n            if (!!streamManagerVideo.video && !!streamManagerVideo.video.removeEventListener) {\n                streamManagerVideo.video.removeEventListener('canplay', this.canPlayListener);\n            }\n            streamManagerVideo.canplayListenerAdded = false;\n            if (!!streamManagerVideo.targetElement) {\n                // Only remove from DOM videos created by OpenVidu Browser (those generated by passing a valid targetElement in OpenVidu.initPublisher\n                // and Session.subscribe or those created by StreamManager.createVideoElement). All this videos triggered a videoElementCreated event\n                streamManagerVideo.video.parentNode!.removeChild(streamManagerVideo.video);\n                this.ee.emitEvent('videoElementDestroyed', [\n                    new VideoElementEvent(streamManagerVideo.video, this, 'videoElementDestroyed')\n                ]);\n            }\n            // Remove srcObject from the video\n            this.removeSrcObject(streamManagerVideo);\n            // Remove from collection of videos every video managed by OpenVidu Browser\n            this.videos.filter((v) => !v.targetElement);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    disassociateVideo(video: HTMLVideoElement): boolean {\n        let disassociated = false;\n        for (let i = 0; i < this.videos.length; i++) {\n            if (this.videos[i].video === video) {\n                this.videos[i].video.removeEventListener('canplay', this.canPlayListener);\n                this.videos.splice(i, 1);\n                disassociated = true;\n                logger.info('Video element disassociated from ', this);\n                break;\n            }\n        }\n        return disassociated;\n    }\n\n    /**\n     * @hidden\n     */\n    addPlayEventToFirstVideo() {\n        if (!!this.videos[0] && !!this.videos[0].video && !this.videos[0].canplayListenerAdded) {\n            this.activateStreamPlayingEventExceptionTimeout();\n            this.videos[0].video.addEventListener('canplay', this.canPlayListener);\n            this.videos[0].canplayListenerAdded = true;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    updateMediaStream(mediaStream: MediaStream) {\n        this.videos.forEach((streamManagerVideo) => {\n            streamManagerVideo.video.srcObject = mediaStream;\n            if (platform.isIonicIos()) {\n                // iOS Ionic. LIMITATION: must reinsert the video in the DOM for\n                // the media stream to be updated\n                const vParent = streamManagerVideo.video.parentElement;\n                const newVideo = streamManagerVideo.video;\n                vParent!!.replaceChild(newVideo, streamManagerVideo.video);\n                streamManagerVideo.video = newVideo;\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    emitEvent(type: string, eventArray: any[]): void {\n        this.ee.emitEvent(type, eventArray);\n    }\n\n    /**\n     * @hidden\n     */\n    createVideo(): HTMLVideoElement {\n        return document.createElement('video');\n    }\n\n    /**\n     * @hidden\n     */\n    removeSrcObject(streamManagerVideo: StreamManagerVideo) {\n        streamManagerVideo.video.srcObject = null;\n        this.deactivateStreamPlayingEventExceptionTimeout();\n    }\n\n    /**\n     * @hidden\n     */\n    abstract replaceTrackInMediaStream(track: MediaStreamTrack, updateLastConstraints: boolean): void;\n\n    /* Private methods */\n\n    protected pushNewStreamManagerVideo(streamManagerVideo: StreamManagerVideo) {\n        this.videos.push(streamManagerVideo);\n        this.addPlayEventToFirstVideo();\n        if (this.stream.session.streamManagers.indexOf(this) === -1) {\n            this.stream.session.streamManagers.push(this);\n        }\n    }\n\n    private mirrorVideo(video: HTMLVideoElement): void {\n        if (!platform.isIonicIos()) {\n            video.style.transform = 'rotateY(180deg)';\n            video.style.webkitTransform = 'rotateY(180deg)';\n        }\n    }\n\n    private removeMirrorVideo(video: HTMLVideoElement): void {\n        video.style.transform = 'unset';\n        video.style.webkitTransform = 'unset';\n    }\n\n    private isMirroredVideo(video: HTMLVideoElement): boolean {\n        return video.style.transform === 'rotateY(180deg)' || video.style.webkitTransform === 'rotateY(180deg)';\n    }\n\n    private activateStreamPlayingEventExceptionTimeout() {\n        if (!this.remote) {\n            // ExceptionEvent NO_STREAM_PLAYING_EVENT is only for subscribers\n            return;\n        }\n        if (this.streamPlayingEventExceptionTimeout != null) {\n            // The timeout is already activated\n            return;\n        }\n        // Trigger ExceptionEvent NO_STREAM_PLAYING_EVENT if after timeout there is no 'canplay' event\n        const msTimeout = this.stream.session.openvidu.advancedConfiguration.noStreamPlayingEventExceptionTimeout || 4000;\n        this.streamPlayingEventExceptionTimeout = setTimeout(() => {\n            const msg =\n                'StreamManager of Stream ' +\n                this.stream.streamId +\n                ' (' +\n                (this.remote ? 'Subscriber' : 'Publisher') +\n                ') did not trigger \"streamPlaying\" event in ' +\n                msTimeout +\n                ' ms';\n            logger.warn(msg);\n            this.stream.session.emitEvent('exception', [\n                new ExceptionEvent(this.stream.session, ExceptionEventName.NO_STREAM_PLAYING_EVENT, (<any>this) as Subscriber, msg)\n            ]);\n            delete this.streamPlayingEventExceptionTimeout;\n        }, msTimeout);\n    }\n\n    private deactivateStreamPlayingEventExceptionTimeout() {\n        clearTimeout(this.streamPlayingEventExceptionTimeout as any);\n        delete this.streamPlayingEventExceptionTimeout;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}