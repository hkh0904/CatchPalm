{"ast":null,"code":"\"use strict\";\n\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExceptionEvent = exports.ExceptionEventName = void 0;\nvar Event_1 = require(\"./Event\");\n/**\n * Defines property {@link ExceptionEvent.name}\n */\nvar ExceptionEventName;\n(function (ExceptionEventName) {\n  /**\n   * There was an unexpected error on the server-side processing an ICE candidate generated and sent by the client-side.\n   *\n   * {@link ExceptionEvent} objects with this {@link ExceptionEvent.name} will have as {@link ExceptionEvent.origin} property a {@link Session} object.\n   */\n  ExceptionEventName[\"ICE_CANDIDATE_ERROR\"] = \"ICE_CANDIDATE_ERROR\";\n  /**\n   * The [ICE connection state](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceConnectionState)\n   * of an [RTCPeerConnection](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection) reached `failed` status.\n   *\n   * This is a terminal error that won't have any kind of possible recovery. If the client is still connected to OpenVidu Server,\n   * then an automatic reconnection process of the media stream is immediately performed. If the ICE connection has broken due to\n   * a total network drop, then no automatic reconnection process will be possible.\n   *\n   * {@link ExceptionEvent} objects with this {@link ExceptionEvent.name} will have as {@link ExceptionEvent.origin} property a {@link Stream} object.\n   */\n  ExceptionEventName[\"ICE_CONNECTION_FAILED\"] = \"ICE_CONNECTION_FAILED\";\n  /**\n   * The [ICE connection state](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceConnectionState)\n   * of an [RTCPeerConnection](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection) reached `disconnected` status.\n   *\n   * This is not a terminal error, and it is possible for the ICE connection to be reconnected. If the client is still connected to\n   * OpenVidu Server and after certain timeout the ICE connection has not reached a success or terminal status, then an automatic\n   * reconnection process of the media stream is performed. If the ICE connection has broken due to a total network drop, then no\n   * automatic reconnection process will be possible.\n   *\n   * You can customize the timeout for the reconnection attempt with property {@link OpenViduAdvancedConfiguration.iceConnectionDisconnectedExceptionTimeout},\n   * which by default is 4000 milliseconds.\n   *\n   * {@link ExceptionEvent} objects with this {@link ExceptionEvent.name} will have as {@link ExceptionEvent.origin} property a {@link Stream} object.\n   */\n  ExceptionEventName[\"ICE_CONNECTION_DISCONNECTED\"] = \"ICE_CONNECTION_DISCONNECTED\";\n  /**\n   * A {@link Subscriber} object has not fired event `streamPlaying` after certain timeout. `streamPlaying` event belongs to {@link StreamManagerEvent}\n   * category. It wraps Web API native event [canplay](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplay_event).\n   *\n   * OpenVidu Browser can take care of the video players (see [here](/en/stable/cheatsheet/manage-videos/#let-openvidu-take-care-of-the-video-players)),\n   * or you can take care of video players on your own (see [here](/en/stable/cheatsheet/manage-videos/#you-take-care-of-the-video-players)).\n   * Either way, whenever a {@link Subscriber} object is commanded to attach its {@link Stream} to a video element, it is supposed to fire `streamPlaying`\n   * event shortly after. If it does not, then we can safely assume that something wrong has happened while playing the remote video and the\n   * application may be notified through this specific ExceptionEvent.\n   *\n   * The timeout can be configured with property {@link OpenViduAdvancedConfiguration.noStreamPlayingEventExceptionTimeout}. By default it is 4000 milliseconds.\n   *\n   * This is just an informative exception. It only means that a remote Stream that is supposed to be playing by a video player has not done so\n   * in a reasonable time. But the lack of the event can be caused by multiple reasons. If a Subscriber is not playing its Stream, the origin\n   * of the problem could be located at the Publisher side. Or may be caused by a transient network problem. But it also could be a problem with\n   * autoplay permissions. Bottom line, the cause can be very varied, and depending on the application the lack of the event could even be expected.\n   *\n   * {@link ExceptionEvent} objects with this {@link ExceptionEvent.name} will have as {@link ExceptionEvent.origin} property a {@link Subscriber} object.\n   */\n  ExceptionEventName[\"NO_STREAM_PLAYING_EVENT\"] = \"NO_STREAM_PLAYING_EVENT\";\n  /**\n   * There has been a server-side disconnection of the Speech To Text module. From the moment this exception is fired to the moment method\n   * {@link Session.subscribeToSpeechToText} is called again, the transcription of the audio stream will not be available and no {@link SpeechToTextEvent}\n   * will be fired.\n   *\n   * {@link ExceptionEvent} objects with this {@link ExceptionEvent.name} will have as {@link ExceptionEvent.origin} property a {@link Session} object.\n   */\n  ExceptionEventName[\"SPEECH_TO_TEXT_DISCONNECTED\"] = \"SPEECH_TO_TEXT_DISCONNECTED\";\n})(ExceptionEventName = exports.ExceptionEventName || (exports.ExceptionEventName = {}));\n/**\n * Triggered by {@link SessionEventMap.exception}\n */\nvar ExceptionEvent = /** @class */function (_super) {\n  __extends(ExceptionEvent, _super);\n  /**\n   * @hidden\n   */\n  function ExceptionEvent(session, name, origin, message, data) {\n    var _this = _super.call(this, false, session, 'exception') || this;\n    _this.name = name;\n    _this.origin = origin;\n    _this.message = message;\n    _this.data = data;\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n  // tslint:disable-next-line:no-empty\n  ExceptionEvent.prototype.callDefaultBehavior = function () {};\n  return ExceptionEvent;\n}(Event_1.Event);\nexports.ExceptionEvent = ExceptionEvent;","map":{"version":3,"names":["Event_1","require","ExceptionEventName","exports","ExceptionEvent","_super","__extends","session","name","origin","message","data","_this","call","prototype","callDefaultBehavior","Event"],"sources":["C:\\Users\\SSAFY\\Desktop\\catchpalm\\my-app\\node_modules\\openvidu-browser\\src\\OpenViduInternal\\Events\\ExceptionEvent.ts"],"sourcesContent":["/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Session } from '../../OpenVidu/Session';\nimport { Stream } from '../../OpenVidu/Stream';\nimport { Subscriber } from '../../OpenVidu/Subscriber';\nimport { Event } from './Event';\n\n/**\n * Defines property {@link ExceptionEvent.name}\n */\nexport enum ExceptionEventName {\n    /**\n     * There was an unexpected error on the server-side processing an ICE candidate generated and sent by the client-side.\n     *\n     * {@link ExceptionEvent} objects with this {@link ExceptionEvent.name} will have as {@link ExceptionEvent.origin} property a {@link Session} object.\n     */\n    ICE_CANDIDATE_ERROR = 'ICE_CANDIDATE_ERROR',\n\n    /**\n     * The [ICE connection state](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceConnectionState)\n     * of an [RTCPeerConnection](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection) reached `failed` status.\n     *\n     * This is a terminal error that won't have any kind of possible recovery. If the client is still connected to OpenVidu Server,\n     * then an automatic reconnection process of the media stream is immediately performed. If the ICE connection has broken due to\n     * a total network drop, then no automatic reconnection process will be possible.\n     *\n     * {@link ExceptionEvent} objects with this {@link ExceptionEvent.name} will have as {@link ExceptionEvent.origin} property a {@link Stream} object.\n     */\n    ICE_CONNECTION_FAILED = 'ICE_CONNECTION_FAILED',\n\n    /**\n     * The [ICE connection state](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceConnectionState)\n     * of an [RTCPeerConnection](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection) reached `disconnected` status.\n     *\n     * This is not a terminal error, and it is possible for the ICE connection to be reconnected. If the client is still connected to\n     * OpenVidu Server and after certain timeout the ICE connection has not reached a success or terminal status, then an automatic\n     * reconnection process of the media stream is performed. If the ICE connection has broken due to a total network drop, then no\n     * automatic reconnection process will be possible.\n     *\n     * You can customize the timeout for the reconnection attempt with property {@link OpenViduAdvancedConfiguration.iceConnectionDisconnectedExceptionTimeout},\n     * which by default is 4000 milliseconds.\n     *\n     * {@link ExceptionEvent} objects with this {@link ExceptionEvent.name} will have as {@link ExceptionEvent.origin} property a {@link Stream} object.\n     */\n    ICE_CONNECTION_DISCONNECTED = 'ICE_CONNECTION_DISCONNECTED',\n\n    /**\n     * A {@link Subscriber} object has not fired event `streamPlaying` after certain timeout. `streamPlaying` event belongs to {@link StreamManagerEvent}\n     * category. It wraps Web API native event [canplay](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplay_event).\n     *\n     * OpenVidu Browser can take care of the video players (see [here](/en/stable/cheatsheet/manage-videos/#let-openvidu-take-care-of-the-video-players)),\n     * or you can take care of video players on your own (see [here](/en/stable/cheatsheet/manage-videos/#you-take-care-of-the-video-players)).\n     * Either way, whenever a {@link Subscriber} object is commanded to attach its {@link Stream} to a video element, it is supposed to fire `streamPlaying`\n     * event shortly after. If it does not, then we can safely assume that something wrong has happened while playing the remote video and the\n     * application may be notified through this specific ExceptionEvent.\n     *\n     * The timeout can be configured with property {@link OpenViduAdvancedConfiguration.noStreamPlayingEventExceptionTimeout}. By default it is 4000 milliseconds.\n     *\n     * This is just an informative exception. It only means that a remote Stream that is supposed to be playing by a video player has not done so\n     * in a reasonable time. But the lack of the event can be caused by multiple reasons. If a Subscriber is not playing its Stream, the origin\n     * of the problem could be located at the Publisher side. Or may be caused by a transient network problem. But it also could be a problem with\n     * autoplay permissions. Bottom line, the cause can be very varied, and depending on the application the lack of the event could even be expected.\n     *\n     * {@link ExceptionEvent} objects with this {@link ExceptionEvent.name} will have as {@link ExceptionEvent.origin} property a {@link Subscriber} object.\n     */\n    NO_STREAM_PLAYING_EVENT = 'NO_STREAM_PLAYING_EVENT',\n\n    /**\n     * There has been a server-side disconnection of the Speech To Text module. From the moment this exception is fired to the moment method\n     * {@link Session.subscribeToSpeechToText} is called again, the transcription of the audio stream will not be available and no {@link SpeechToTextEvent}\n     * will be fired.\n     *\n     * {@link ExceptionEvent} objects with this {@link ExceptionEvent.name} will have as {@link ExceptionEvent.origin} property a {@link Session} object.\n     */\n    SPEECH_TO_TEXT_DISCONNECTED = 'SPEECH_TO_TEXT_DISCONNECTED',\n}\n\n/**\n * Triggered by {@link SessionEventMap.exception}\n */\nexport class ExceptionEvent extends Event {\n    /**\n     * Name of the exception\n     */\n    name: ExceptionEventName;\n\n    /**\n     * Object affected by the exception. Depending on the {@link ExceptionEvent.name} property:\n     * - {@link Session}: `ICE_CANDIDATE_ERROR`\n     * - {@link Stream}: `ICE_CONNECTION_FAILED`, `ICE_CONNECTION_DISCONNECTED`\n     * - {@link Subscriber}: `NO_STREAM_PLAYING_EVENT`\n     */\n    origin: Session | Stream | Subscriber;\n\n    /**\n     * Informative description of the exception\n     */\n    message: string;\n\n    /**\n     * Any extra information associated to the exception\n     */\n    data?: any;\n\n    /**\n     * @hidden\n     */\n    constructor(session: Session, name: ExceptionEventName, origin: Session | Stream | Subscriber, message: string, data?: any) {\n        super(false, session, 'exception');\n        this.name = name;\n        this.origin = origin;\n        this.message = message;\n        this.data = data;\n    }\n\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:no-empty\n    callDefaultBehavior() { }\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,IAAAA,OAAA,GAAAC,OAAA;AAEA;;;AAGA,IAAYC,kBAiEX;AAjED,WAAYA,kBAAkB;EAC1B;;;;;EAKAA,kBAAA,+CAA2C;EAE3C;;;;;;;;;;EAUAA,kBAAA,mDAA+C;EAE/C;;;;;;;;;;;;;;EAcAA,kBAAA,+DAA2D;EAE3D;;;;;;;;;;;;;;;;;;;EAmBAA,kBAAA,uDAAmD;EAEnD;;;;;;;EAOAA,kBAAA,+DAA2D;AAC/D,CAAC,EAjEWA,kBAAkB,GAAlBC,OAAA,CAAAD,kBAAkB,KAAlBC,OAAA,CAAAD,kBAAkB;AAmE9B;;;AAGA,IAAAE,cAAA,0BAAAC,MAAA;EAAoCC,SAAA,CAAAF,cAAA,EAAAC,MAAA;EAwBhC;;;EAGA,SAAAD,eAAYG,OAAgB,EAAEC,IAAwB,EAAEC,MAAqC,EAAEC,OAAe,EAAEC,IAAU;IAA1H,IAAAC,KAAA,GACIP,MAAA,CAAAQ,IAAA,OAAM,KAAK,EAAEN,OAAO,EAAE,WAAW,CAAC;IAClCK,KAAI,CAACJ,IAAI,GAAGA,IAAI;IAChBI,KAAI,CAACH,MAAM,GAAGA,MAAM;IACpBG,KAAI,CAACF,OAAO,GAAGA,OAAO;IACtBE,KAAI,CAACD,IAAI,GAAGA,IAAI;;EACpB;EAEA;;;EAGA;EACAP,cAAA,CAAAU,SAAA,CAAAC,mBAAmB,GAAnB,aAAwB,CAAC;EAC7B,OAAAX,cAAC;AAAD,CAAC,CAxCmCJ,OAAA,CAAAgB,KAAK;AAA5Bb,OAAA,CAAAC,cAAA,GAAAA,cAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}