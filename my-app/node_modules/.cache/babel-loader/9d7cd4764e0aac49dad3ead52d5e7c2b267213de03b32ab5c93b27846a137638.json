{"ast":null,"code":"\"use strict\";\n\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SpeechToTextEvent = void 0;\nvar Event_1 = require(\"./Event\");\n/**\n * Triggered by {@link SessionEventMap.speechToTextMessage}\n */\nvar SpeechToTextEvent = /** @class */function (_super) {\n  __extends(SpeechToTextEvent, _super);\n  /**\n   * @hidden\n   */\n  function SpeechToTextEvent(target, connection, text, reason, raw, lang) {\n    var _this = _super.call(this, false, target, 'speechToTextMessage') || this;\n    _this.connection = connection;\n    _this.text = text;\n    _this.reason = reason;\n    _this.raw = raw;\n    _this.lang = lang;\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n  // tslint:disable-next-line:no-empty\n  SpeechToTextEvent.prototype.callDefaultBehavior = function () {};\n  return SpeechToTextEvent;\n}(Event_1.Event);\nexports.SpeechToTextEvent = SpeechToTextEvent;","map":{"version":3,"names":["Event_1","require","SpeechToTextEvent","_super","__extends","target","connection","text","reason","raw","lang","_this","call","prototype","callDefaultBehavior","Event","exports"],"sources":["C:\\Users\\SSAFY\\Desktop\\catchpalm\\my-app\\node_modules\\openvidu-browser\\src\\OpenViduInternal\\Events\\SpeechToTextEvent.ts"],"sourcesContent":["/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Event } from './Event';\nimport { Connection } from '../../OpenVidu/Connection';\nimport { Session } from '../../OpenVidu/Session';\nimport { SpeechToTextEventReason } from './Types/Types';\n\n/**\n * Triggered by {@link SessionEventMap.speechToTextMessage}\n */\nexport class SpeechToTextEvent extends Event {\n\n    /**\n     * The {@link Connection} owning the Stream that produced the speech-to-text event.\n     * In other words, this is the participant that spoke and produced this transcription event.\n     */\n    connection: Connection;\n\n    /**\n     * The text of the event. This is the transcription for this specific piece of audio stream\n     */\n    text: string;\n\n    /**\n     * All speech-to-text events are generated \n     */\n    reason: SpeechToTextEventReason;\n\n    /**\n     * The original event from the speech to text engine. This can vary depending on the engine\n     */\n    raw: string;\n\n    /**\n     * [BCP-47](https://tools.ietf.org/html/bcp47) language tag (like \"en-US\" or \"es-ES\") of the recognized text. This will be the same as the language provided\n     * in method {@link Session.subscribeToSpeechToText} method\n     */\n    lang: string;\n\n    /**\n     * @hidden\n     */\n    constructor(target: Session, connection: Connection, text: string, reason: SpeechToTextEventReason, raw: string, lang: string) {\n        super(false, target, 'speechToTextMessage');\n        this.connection = connection;\n        this.text = text;\n        this.reason = reason;\n        this.raw = raw;\n        this.lang = lang;\n    }\n\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:no-empty\n    callDefaultBehavior() { }\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,IAAAA,OAAA,GAAAC,OAAA;AAKA;;;AAGA,IAAAC,iBAAA,0BAAAC,MAAA;EAAuCC,SAAA,CAAAF,iBAAA,EAAAC,MAAA;EA6BnC;;;EAGA,SAAAD,kBAAYG,MAAe,EAAEC,UAAsB,EAAEC,IAAY,EAAEC,MAA+B,EAAEC,GAAW,EAAEC,IAAY;IAA7H,IAAAC,KAAA,GACIR,MAAA,CAAAS,IAAA,OAAM,KAAK,EAAEP,MAAM,EAAE,qBAAqB,CAAC;IAC3CM,KAAI,CAACL,UAAU,GAAGA,UAAU;IAC5BK,KAAI,CAACJ,IAAI,GAAGA,IAAI;IAChBI,KAAI,CAACH,MAAM,GAAGA,MAAM;IACpBG,KAAI,CAACF,GAAG,GAAGA,GAAG;IACdE,KAAI,CAACD,IAAI,GAAGA,IAAI;;EACpB;EAEA;;;EAGA;EACAR,iBAAA,CAAAW,SAAA,CAAAC,mBAAmB,GAAnB,aAAwB,CAAC;EAC7B,OAAAZ,iBAAC;AAAD,CAAC,CA9CsCF,OAAA,CAAAe,KAAK;AAA/BC,OAAA,CAAAd,iBAAA,GAAAA,iBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}