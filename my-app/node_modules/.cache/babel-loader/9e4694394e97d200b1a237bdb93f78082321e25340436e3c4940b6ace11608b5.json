{"ast":null,"code":"\"use strict\";\n\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Connection = void 0;\nvar Stream_1 = require(\"./Stream\");\nvar OpenViduLogger_1 = require(\"../OpenViduInternal/Logger/OpenViduLogger\");\nvar ExceptionEvent_1 = require(\"../OpenViduInternal/Events/ExceptionEvent\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * Represents each one of the user's connection to the session (the local one and other user's connections).\n * Therefore each {@link Session} and {@link Stream} object has an attribute of type Connection\n */\nvar Connection = /** @class */function () {\n  /**\n   * @hidden\n   */\n  function Connection(session, connectionOptions) {\n    this.session = session;\n    /**\n     * @hidden\n     */\n    this.disposed = false;\n    var msg = \"'Connection' created \";\n    if (!!connectionOptions.role) {\n      // Connection is local\n      this.localOptions = connectionOptions;\n      this.connectionId = this.localOptions.id;\n      this.creationTime = this.localOptions.createdAt;\n      this.data = this.localOptions.metadata;\n      this.rpcSessionId = this.localOptions.sessionId;\n      this.role = this.localOptions.role;\n      this.record = this.localOptions.record;\n      msg += '(local)';\n    } else {\n      // Connection is remote\n      this.remoteOptions = connectionOptions;\n      this.connectionId = this.remoteOptions.id;\n      this.creationTime = this.remoteOptions.createdAt;\n      if (this.remoteOptions.metadata) {\n        this.data = this.remoteOptions.metadata;\n      }\n      if (this.remoteOptions.streams) {\n        this.initRemoteStreams(this.remoteOptions.streams);\n      }\n      msg += \"(remote) with 'connectionId' [\" + this.remoteOptions.id + ']';\n    }\n    logger.info(msg);\n  }\n  /* Hidden methods */\n  /**\n   * @hidden\n   */\n  Connection.prototype.sendIceCandidate = function (candidate) {\n    var _this = this;\n    if (!this.disposed) {\n      logger.debug((!!this.stream.outboundStreamOpts ? 'Local' : 'Remote') + 'candidate for' + this.connectionId, candidate);\n      this.session.openvidu.sendRequest('onIceCandidate', {\n        endpointName: this.connectionId,\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex\n      }, function (error, response) {\n        if (error) {\n          logger.error('Error sending ICE candidate: ' + JSON.stringify(error));\n          _this.session.emitEvent('exception', [new ExceptionEvent_1.ExceptionEvent(_this.session, ExceptionEvent_1.ExceptionEventName.ICE_CANDIDATE_ERROR, _this.session, 'There was an unexpected error on the server-side processing an ICE candidate generated and sent by the client-side', error)]);\n        }\n      });\n    } else {\n      logger.warn(\"Connection \".concat(this.connectionId, \" disposed when trying to send an ICE candidate. ICE candidate not sent\"));\n    }\n  };\n  /**\n   * @hidden\n   */\n  Connection.prototype.initRemoteStreams = function (options) {\n    var _this = this;\n    // This is ready for supporting multiple streams per Connection object. Right now the loop will always run just once\n    // this.stream should also be replaced by a collection of streams to support multiple streams per Connection\n    options.forEach(function (opts) {\n      var streamOptions = {\n        id: opts.id,\n        createdAt: opts.createdAt,\n        connection: _this,\n        hasAudio: opts.hasAudio,\n        hasVideo: opts.hasVideo,\n        audioActive: opts.audioActive,\n        videoActive: opts.videoActive,\n        typeOfVideo: opts.typeOfVideo,\n        frameRate: opts.frameRate,\n        videoDimensions: !!opts.videoDimensions ? JSON.parse(opts.videoDimensions) : undefined,\n        filter: !!opts.filter ? opts.filter : undefined\n      };\n      var stream = new Stream_1.Stream(_this.session, streamOptions);\n      _this.addStream(stream);\n    });\n    logger.info(\"Remote 'Connection' with 'connectionId' [\" + this.connectionId + '] is now configured for receiving Streams with options: ', this.stream.inboundStreamOpts);\n  };\n  /**\n   * @hidden\n   */\n  Connection.prototype.addStream = function (stream) {\n    stream.connection = this;\n    this.stream = stream;\n  };\n  /**\n   * @hidden\n   */\n  Connection.prototype.removeStream = function () {\n    delete this.stream;\n  };\n  /**\n   * @hidden\n   */\n  Connection.prototype.dispose = function () {\n    this.disposed = true;\n    this.removeStream();\n  };\n  return Connection;\n}();\nexports.Connection = Connection;","map":{"version":3,"names":["Stream_1","require","OpenViduLogger_1","ExceptionEvent_1","logger","OpenViduLogger","getInstance","Connection","session","connectionOptions","disposed","msg","role","localOptions","connectionId","id","creationTime","createdAt","data","metadata","rpcSessionId","sessionId","record","remoteOptions","streams","initRemoteStreams","info","prototype","sendIceCandidate","candidate","_this","debug","stream","outboundStreamOpts","openvidu","sendRequest","endpointName","sdpMid","sdpMLineIndex","error","response","JSON","stringify","emitEvent","ExceptionEvent","ExceptionEventName","ICE_CANDIDATE_ERROR","warn","concat","options","forEach","opts","streamOptions","connection","hasAudio","hasVideo","audioActive","videoActive","typeOfVideo","frameRate","videoDimensions","parse","undefined","filter","Stream","addStream","inboundStreamOpts","removeStream","dispose","exports"],"sources":["C:\\Users\\SSAFY\\Desktop\\catchpalm\\my-app\\node_modules\\openvidu-browser\\src\\OpenVidu\\Connection.ts"],"sourcesContent":["/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Session } from './Session';\nimport { Stream } from './Stream';\nimport { LocalConnectionOptions } from '../OpenViduInternal/Interfaces/Private/LocalConnectionOptions';\nimport { RemoteConnectionOptions } from '../OpenViduInternal/Interfaces/Private/RemoteConnectionOptions';\nimport { InboundStreamOptions } from '../OpenViduInternal/Interfaces/Private/InboundStreamOptions';\nimport { StreamOptionsServer } from '../OpenViduInternal/Interfaces/Private/StreamOptionsServer';\nimport { OpenViduLogger } from '../OpenViduInternal/Logger/OpenViduLogger';\nimport { ExceptionEvent, ExceptionEventName } from '../OpenViduInternal/Events/ExceptionEvent';\n\n/**\n * @hidden\n */\nconst logger: OpenViduLogger = OpenViduLogger.getInstance();\n\n/**\n * Represents each one of the user's connection to the session (the local one and other user's connections).\n * Therefore each {@link Session} and {@link Stream} object has an attribute of type Connection\n */\nexport class Connection {\n    /**\n     * Unique identifier of the connection\n     */\n    connectionId: string;\n\n    /**\n     * Time when this connection was created in OpenVidu Server (UTC milliseconds)\n     */\n    creationTime: number;\n\n    /**\n     * Data associated to this connection (and therefore to certain user). This is an important field:\n     * it allows you to broadcast all the information you want for each user (a username, for example)\n     */\n    data: string;\n\n    /**\n     * Role of the connection.\n     * - `SUBSCRIBER`: can subscribe to published Streams of other users by calling {@link Session.subscribe}\n     * - `PUBLISHER`: SUBSCRIBER permissions + can publish their own Streams by calling {@link Session.publish}\n     * - `MODERATOR`: SUBSCRIBER + PUBLISHER permissions + can force the unpublishing or disconnection over a third-party Stream or Connection by call {@link Session.forceUnpublish} and {@link Session.forceDisconnect}\n     *\n     * **Only defined for the local connection. In remote connections will be `undefined`**\n     */\n    role: string;\n\n    /**\n     * Whether the streams published by this Connection will be recorded or not. This only affects [INDIVIDUAL recording](/en/stable/advanced-features/recording/#individual-recording-selection) <a href=\"https://docs.openvidu.io/en/stable/openvidu-pro/\" style=\"display: inline-block; background-color: rgb(0, 136, 170); color: white; font-weight: bold; padding: 0px 5px; margin-right: 5px; border-radius: 3px; font-size: 13px; line-height:21px; font-family: Montserrat, sans-serif\">PRO</a>\n     *\n     * **Only defined for the local connection. In remote connections will be `undefined`**\n     */\n    record: boolean;\n\n    /**\n     * @hidden\n     */\n    stream?: Stream;\n\n    /**\n     * @hidden\n     */\n    localOptions: LocalConnectionOptions | undefined;\n\n    /**\n     * @hidden\n     */\n    remoteOptions: RemoteConnectionOptions | undefined;\n\n    /**\n     * @hidden\n     */\n    disposed = false;\n\n    /**\n     * @hidden\n     */\n    rpcSessionId: string;\n\n    /**\n     * @hidden\n     */\n    constructor(private session: Session, connectionOptions: LocalConnectionOptions | RemoteConnectionOptions) {\n        let msg = \"'Connection' created \";\n        if (!!(<LocalConnectionOptions>connectionOptions).role) {\n            // Connection is local\n            this.localOptions = <LocalConnectionOptions>connectionOptions;\n            this.connectionId = this.localOptions.id;\n            this.creationTime = this.localOptions.createdAt;\n            this.data = this.localOptions.metadata;\n            this.rpcSessionId = this.localOptions.sessionId;\n            this.role = this.localOptions.role;\n            this.record = this.localOptions.record;\n            msg += '(local)';\n        } else {\n            // Connection is remote\n            this.remoteOptions = <RemoteConnectionOptions>connectionOptions;\n            this.connectionId = this.remoteOptions.id;\n            this.creationTime = this.remoteOptions.createdAt;\n            if (this.remoteOptions.metadata) {\n                this.data = this.remoteOptions.metadata;\n            }\n            if (this.remoteOptions.streams) {\n                this.initRemoteStreams(this.remoteOptions.streams);\n            }\n            msg += \"(remote) with 'connectionId' [\" + this.remoteOptions.id + ']';\n        }\n        logger.info(msg);\n    }\n\n    /* Hidden methods */\n\n    /**\n     * @hidden\n     */\n    sendIceCandidate(candidate: RTCIceCandidate): void {\n\n        if (!this.disposed) {\n            logger.debug((!!this.stream!.outboundStreamOpts ? 'Local' : 'Remote') + 'candidate for' + this.connectionId, candidate);\n\n            this.session.openvidu.sendRequest(\n                'onIceCandidate',\n                {\n                    endpointName: this.connectionId,\n                    candidate: candidate.candidate,\n                    sdpMid: candidate.sdpMid,\n                    sdpMLineIndex: candidate.sdpMLineIndex\n                },\n                (error, response) => {\n                    if (error) {\n                        logger.error('Error sending ICE candidate: ' + JSON.stringify(error));\n                        this.session.emitEvent('exception', [\n                            new ExceptionEvent(\n                                this.session,\n                                ExceptionEventName.ICE_CANDIDATE_ERROR,\n                                this.session,\n                                'There was an unexpected error on the server-side processing an ICE candidate generated and sent by the client-side',\n                                error\n                            )\n                        ]);\n                    }\n                }\n            );\n        } else {\n            logger.warn(`Connection ${this.connectionId} disposed when trying to send an ICE candidate. ICE candidate not sent`);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    initRemoteStreams(options: StreamOptionsServer[]): void {\n        // This is ready for supporting multiple streams per Connection object. Right now the loop will always run just once\n        // this.stream should also be replaced by a collection of streams to support multiple streams per Connection\n        options.forEach((opts) => {\n            const streamOptions: InboundStreamOptions = {\n                id: opts.id,\n                createdAt: opts.createdAt,\n                connection: this,\n                hasAudio: opts.hasAudio,\n                hasVideo: opts.hasVideo,\n                audioActive: opts.audioActive,\n                videoActive: opts.videoActive,\n                typeOfVideo: opts.typeOfVideo,\n                frameRate: opts.frameRate,\n                videoDimensions: !!opts.videoDimensions ? JSON.parse(opts.videoDimensions) : undefined,\n                filter: !!opts.filter ? opts.filter : undefined\n            };\n            const stream = new Stream(this.session, streamOptions);\n\n            this.addStream(stream);\n        });\n\n        logger.info(\n            \"Remote 'Connection' with 'connectionId' [\" + this.connectionId + '] is now configured for receiving Streams with options: ',\n            this.stream!.inboundStreamOpts\n        );\n    }\n\n    /**\n     * @hidden\n     */\n    addStream(stream: Stream): void {\n        stream.connection = this;\n        this.stream = stream;\n    }\n\n    /**\n     * @hidden\n     */\n    removeStream(): void {\n        delete this.stream;\n    }\n\n    /**\n     * @hidden\n     */\n    dispose(): void {\n        this.disposed = true;\n        this.removeStream();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}