{"ast":null,"code":"globalThis.getScreenId = function (firefoxString, callback, custom_parameter) {\n  if (navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob)) {\n    callback({\n      video: true\n    });\n    return;\n  }\n  if (!!navigator.mozGetUserMedia) {\n    callback(null, 'firefox', {\n      video: {\n        mozMediaSource: firefoxString,\n        mediaSource: firefoxString\n      }\n    });\n    return;\n  }\n  globalThis.addEventListener('message', onIFrameCallback);\n  function onIFrameCallback(event) {\n    if (!event.data) return;\n    if (event.data.chromeMediaSourceId) {\n      if (event.data.chromeMediaSourceId === 'PermissionDeniedError') {\n        callback('permission-denied');\n      } else {\n        callback(null, event.data.chromeMediaSourceId, getScreenConstraints(null, event.data.chromeMediaSourceId, event.data.canRequestAudioTrack));\n      }\n      globalThis.removeEventListener('message', onIFrameCallback);\n    }\n    if (event.data.chromeExtensionStatus) {\n      callback(event.data.chromeExtensionStatus, null, getScreenConstraints(event.data.chromeExtensionStatus));\n      globalThis.removeEventListener('message', onIFrameCallback);\n    }\n  }\n  if (!custom_parameter) {\n    setTimeout(postGetSourceIdMessage, 100);\n  } else {\n    setTimeout(function () {\n      postGetSourceIdMessage(custom_parameter);\n    }, 100);\n  }\n};\nfunction getScreenConstraints(error, sourceId, canRequestAudioTrack) {\n  var screen_constraints = {\n    audio: false,\n    video: {\n      mandatory: {\n        chromeMediaSource: error ? 'screen' : 'desktop',\n        maxWidth: globalThis.screen.width > 1920 ? globalThis.screen.width : 1920,\n        maxHeight: globalThis.screen.height > 1080 ? globalThis.screen.height : 1080\n      },\n      optional: []\n    }\n  };\n  if (!!canRequestAudioTrack) {\n    screen_constraints.audio = {\n      mandatory: {\n        chromeMediaSource: error ? 'screen' : 'desktop'\n      },\n      optional: []\n    };\n  }\n  if (sourceId) {\n    screen_constraints.video.mandatory.chromeMediaSourceId = sourceId;\n    if (screen_constraints.audio && screen_constraints.audio.mandatory) {\n      screen_constraints.audio.mandatory.chromeMediaSourceId = sourceId;\n    }\n  }\n  return screen_constraints;\n}\nfunction postGetSourceIdMessage(custom_parameter) {\n  if (!iframe) {\n    loadIFrame(function () {\n      postGetSourceIdMessage(custom_parameter);\n    });\n    return;\n  }\n  if (!iframe.isLoaded) {\n    setTimeout(function () {\n      postGetSourceIdMessage(custom_parameter);\n    }, 100);\n    return;\n  }\n  if (!custom_parameter) {\n    iframe.contentWindow.postMessage({\n      captureSourceId: true\n    }, '*');\n  } else if (!!custom_parameter.forEach) {\n    iframe.contentWindow.postMessage({\n      captureCustomSourceId: custom_parameter\n    }, '*');\n  } else {\n    iframe.contentWindow.postMessage({\n      captureSourceIdWithAudio: true\n    }, '*');\n  }\n}\nvar iframe;\nglobalThis.getScreenConstraints = function (callback) {\n  loadIFrame(function () {\n    getScreenId(function (error, sourceId, screen_constraints) {\n      if (!screen_constraints) {\n        screen_constraints = {\n          video: true\n        };\n      }\n      callback(error, screen_constraints.video);\n    });\n  });\n};\nfunction loadIFrame(loadCallback) {\n  if (iframe) {\n    loadCallback();\n    return;\n  }\n  iframe = document.createElement('iframe');\n  iframe.onload = function () {\n    iframe.isLoaded = true;\n    loadCallback();\n  };\n  iframe.src = 'https://openvidu.github.io/openvidu-screen-sharing-chrome-extension/';\n  iframe.style.display = 'none';\n  (document.body || document.documentElement).appendChild(iframe);\n}\nglobalThis.getChromeExtensionStatus = function (callback) {\n  if (!!navigator.mozGetUserMedia) {\n    callback('installed-enabled');\n    return;\n  }\n  globalThis.addEventListener('message', onIFrameCallback);\n  function onIFrameCallback(event) {\n    if (!event.data) return;\n    if (event.data.chromeExtensionStatus) {\n      callback(event.data.chromeExtensionStatus);\n      globalThis.removeEventListener('message', onIFrameCallback);\n    }\n  }\n  setTimeout(postGetChromeExtensionStatusMessage, 100);\n};\nfunction postGetChromeExtensionStatusMessage() {\n  if (!iframe) {\n    loadIFrame(postGetChromeExtensionStatusMessage);\n    return;\n  }\n  if (!iframe.isLoaded) {\n    setTimeout(postGetChromeExtensionStatusMessage, 100);\n    return;\n  }\n  iframe.contentWindow.postMessage({\n    getChromeExtensionStatus: true\n  }, '*');\n}\nexports.getScreenId = globalThis.getScreenId;","map":{"version":3,"names":["globalThis","getScreenId","firefoxString","callback","custom_parameter","navigator","userAgent","indexOf","msSaveOrOpenBlob","msSaveBlob","video","mozGetUserMedia","mozMediaSource","mediaSource","addEventListener","onIFrameCallback","event","data","chromeMediaSourceId","getScreenConstraints","canRequestAudioTrack","removeEventListener","chromeExtensionStatus","setTimeout","postGetSourceIdMessage","error","sourceId","screen_constraints","audio","mandatory","chromeMediaSource","maxWidth","screen","width","maxHeight","height","optional","iframe","loadIFrame","isLoaded","contentWindow","postMessage","captureSourceId","forEach","captureCustomSourceId","captureSourceIdWithAudio","loadCallback","document","createElement","onload","src","style","display","body","documentElement","appendChild","getChromeExtensionStatus","postGetChromeExtensionStatusMessage","exports"],"sources":["C:\\Users\\SSAFY\\Desktop\\catchpalm\\my-app\\node_modules\\openvidu-browser\\src\\OpenViduInternal\\ScreenSharing\\Screen-Capturing-Auto.js"],"sourcesContent":["// Last time updated on June 08, 2018\n\n// Latest file can be found here: https://cdn.webrtc-experiment.com/getScreenId.js\n\n// Muaz Khan         - www.MuazKhan.com\n// MIT License       - www.WebRTC-Experiment.com/licence\n// Documentation     - https://github.com/muaz-khan/getScreenId.\n\n// ______________\n// getScreenId.js\n\n/*\ngetScreenId(function (error, sourceId, screen_constraints) {\n    // error    == null || 'permission-denied' || 'not-installed' || 'installed-disabled' || 'not-chrome'\n    // sourceId == null || 'string' || 'firefox'\n\n    if(microsoftEdge) {\n        navigator.getDisplayMedia(screen_constraints).then(onSuccess, onFailure);\n    }\n    else {\n        navigator.mediaDevices.getUserMedia(screen_constraints).then(onSuccess)catch(onFailure);\n    }\n}, 'pass second parameter only if you want system audio');\n*/\n\nglobalThis.getScreenId = function (firefoxString, callback, custom_parameter) {\n    if (navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob)) {\n        // microsoft edge => navigator.getDisplayMedia(screen_constraints).then(onSuccess, onFailure);\n        callback({\n            video: true\n        });\n        return;\n    }\n\n    // for Firefox:\n    // sourceId == 'firefox'\n    // screen_constraints = {...}\n    if (!!navigator.mozGetUserMedia) {\n        callback(null, 'firefox', {\n            video: {\n                mozMediaSource: firefoxString,\n                mediaSource: firefoxString\n            }\n        });\n        return;\n    }\n\n    globalThis.addEventListener('message', onIFrameCallback);\n\n    function onIFrameCallback(event) {\n        if (!event.data) return;\n\n        if (event.data.chromeMediaSourceId) {\n            if (event.data.chromeMediaSourceId === 'PermissionDeniedError') {\n                callback('permission-denied');\n            } else {\n                callback(\n                    null,\n                    event.data.chromeMediaSourceId,\n                    getScreenConstraints(null, event.data.chromeMediaSourceId, event.data.canRequestAudioTrack)\n                );\n            }\n\n            // this event listener is no more needed\n            globalThis.removeEventListener('message', onIFrameCallback);\n        }\n\n        if (event.data.chromeExtensionStatus) {\n            callback(event.data.chromeExtensionStatus, null, getScreenConstraints(event.data.chromeExtensionStatus));\n\n            // this event listener is no more needed\n            globalThis.removeEventListener('message', onIFrameCallback);\n        }\n    }\n\n    if (!custom_parameter) {\n        setTimeout(postGetSourceIdMessage, 100);\n    } else {\n        setTimeout(function () {\n            postGetSourceIdMessage(custom_parameter);\n        }, 100);\n    }\n};\n\nfunction getScreenConstraints(error, sourceId, canRequestAudioTrack) {\n    var screen_constraints = {\n        audio: false,\n        video: {\n            mandatory: {\n                chromeMediaSource: error ? 'screen' : 'desktop',\n                maxWidth: globalThis.screen.width > 1920 ? globalThis.screen.width : 1920,\n                maxHeight: globalThis.screen.height > 1080 ? globalThis.screen.height : 1080\n            },\n            optional: []\n        }\n    };\n\n    if (!!canRequestAudioTrack) {\n        screen_constraints.audio = {\n            mandatory: {\n                chromeMediaSource: error ? 'screen' : 'desktop'\n                // echoCancellation: true\n            },\n            optional: []\n        };\n    }\n\n    if (sourceId) {\n        screen_constraints.video.mandatory.chromeMediaSourceId = sourceId;\n\n        if (screen_constraints.audio && screen_constraints.audio.mandatory) {\n            screen_constraints.audio.mandatory.chromeMediaSourceId = sourceId;\n        }\n    }\n\n    return screen_constraints;\n}\n\nfunction postGetSourceIdMessage(custom_parameter) {\n    if (!iframe) {\n        loadIFrame(function () {\n            postGetSourceIdMessage(custom_parameter);\n        });\n        return;\n    }\n\n    if (!iframe.isLoaded) {\n        setTimeout(function () {\n            postGetSourceIdMessage(custom_parameter);\n        }, 100);\n        return;\n    }\n\n    if (!custom_parameter) {\n        iframe.contentWindow.postMessage(\n            {\n                captureSourceId: true\n            },\n            '*'\n        );\n    } else if (!!custom_parameter.forEach) {\n        iframe.contentWindow.postMessage(\n            {\n                captureCustomSourceId: custom_parameter\n            },\n            '*'\n        );\n    } else {\n        iframe.contentWindow.postMessage(\n            {\n                captureSourceIdWithAudio: true\n            },\n            '*'\n        );\n    }\n}\n\nvar iframe;\n\n// this function is used in RTCMultiConnection v3\nglobalThis.getScreenConstraints = function (callback) {\n    loadIFrame(function () {\n        getScreenId(function (error, sourceId, screen_constraints) {\n            if (!screen_constraints) {\n                screen_constraints = {\n                    video: true\n                };\n            }\n\n            callback(error, screen_constraints.video);\n        });\n    });\n};\n\nfunction loadIFrame(loadCallback) {\n    if (iframe) {\n        loadCallback();\n        return;\n    }\n\n    iframe = document.createElement('iframe');\n    iframe.onload = function () {\n        iframe.isLoaded = true;\n        loadCallback();\n    };\n    iframe.src = 'https://openvidu.github.io/openvidu-screen-sharing-chrome-extension/';\n    iframe.style.display = 'none';\n    (document.body || document.documentElement).appendChild(iframe);\n}\n\nglobalThis.getChromeExtensionStatus = function (callback) {\n    // for Firefox:\n    if (!!navigator.mozGetUserMedia) {\n        callback('installed-enabled');\n        return;\n    }\n\n    globalThis.addEventListener('message', onIFrameCallback);\n\n    function onIFrameCallback(event) {\n        if (!event.data) return;\n\n        if (event.data.chromeExtensionStatus) {\n            callback(event.data.chromeExtensionStatus);\n\n            // this event listener is no more needed\n            globalThis.removeEventListener('message', onIFrameCallback);\n        }\n    }\n\n    setTimeout(postGetChromeExtensionStatusMessage, 100);\n};\n\nfunction postGetChromeExtensionStatusMessage() {\n    if (!iframe) {\n        loadIFrame(postGetChromeExtensionStatusMessage);\n        return;\n    }\n\n    if (!iframe.isLoaded) {\n        setTimeout(postGetChromeExtensionStatusMessage, 100);\n        return;\n    }\n\n    iframe.contentWindow.postMessage(\n        {\n            getChromeExtensionStatus: true\n        },\n        '*'\n    );\n}\n\nexports.getScreenId = globalThis.getScreenId;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}