{"ast":null,"code":"\"use strict\";\n\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OpenVidu = void 0;\nvar LocalRecorder_1 = require(\"./LocalRecorder\");\nvar Publisher_1 = require(\"./Publisher\");\nvar Session_1 = require(\"./Session\");\nvar SessionDisconnectedEvent_1 = require(\"../OpenViduInternal/Events/SessionDisconnectedEvent\");\nvar StreamPropertyChangedEvent_1 = require(\"../OpenViduInternal/Events/StreamPropertyChangedEvent\");\nvar OpenViduError_1 = require(\"../OpenViduInternal/Enums/OpenViduError\");\nvar VideoInsertMode_1 = require(\"../OpenViduInternal/Enums/VideoInsertMode\");\nvar OpenViduLogger_1 = require(\"../OpenViduInternal/Logger/OpenViduLogger\");\nvar Platform_1 = require(\"../OpenViduInternal/Utils/Platform\");\nvar screenSharingAuto = require(\"../OpenViduInternal/ScreenSharing/Screen-Capturing-Auto\");\nvar screenSharing = require(\"../OpenViduInternal/ScreenSharing/Screen-Capturing\");\nvar OpenViduLoggerConfiguration_1 = require(\"../OpenViduInternal/Logger/OpenViduLoggerConfiguration\");\n/**\n * @hidden\n */\nvar EventEmitter = require(\"wolfy87-eventemitter\");\n/**\n * @hidden\n */\nvar RpcBuilder = require(\"../OpenViduInternal/KurentoUtils/kurento-jsonrpc\");\n/**\n * @hidden\n */\nvar packageJson = require('../../package.json');\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * @hidden\n */\nvar platform;\n/**\n * Entrypoint of OpenVidu Browser library.\n * Use it to initialize objects of type {@link Session}, {@link Publisher} and {@link LocalRecorder}\n */\nvar OpenVidu = /** @class */function () {\n  function OpenVidu() {\n    var _this = this;\n    this.masterNodeHasCrashed = false;\n    /**\n     * @hidden\n     */\n    this.publishers = [];\n    /**\n     * @hidden\n     */\n    this.secret = '';\n    /**\n     * @hidden\n     */\n    this.recorder = false;\n    /**\n     * @hidden\n     */\n    this.stt = false;\n    /**\n     * @hidden\n     */\n    this.life = -1;\n    /**\n     * @hidden\n     */\n    this.advancedConfiguration = {};\n    /**\n     * @hidden\n     */\n    this.webrtcStatsInterval = -1;\n    /**\n     * @hidden\n     */\n    this.sendBrowserLogs = OpenViduLoggerConfiguration_1.OpenViduLoggerConfiguration.disabled;\n    /**\n     * @hidden\n     */\n    this.isAtLeastPro = false;\n    /**\n     * @hidden\n     */\n    this.isEnterprise = false;\n    /**\n     * @hidden\n     */\n    this.ee = new EventEmitter();\n    platform = Platform_1.PlatformUtils.getInstance();\n    this.libraryVersion = packageJson.version;\n    logger.info('OpenVidu initialized');\n    logger.info('Platform detected: ' + platform.getDescription());\n    logger.info('openvidu-browser version: ' + this.libraryVersion);\n    if (platform.isMobileDevice() || platform.isReactNative()) {\n      // Listen to orientationchange only on mobile devices\n      this.onOrientationChanged(function () {\n        _this.publishers.forEach(function (publisher) {\n          if (publisher.stream.isLocalStreamPublished && !!publisher.stream && !!publisher.stream.hasVideo) {\n            _this.sendNewVideoDimensionsIfRequired(publisher, 'deviceRotated', 75, 10);\n          }\n        });\n      });\n    }\n  }\n  /**\n   * Returns new session\n   */\n  OpenVidu.prototype.initSession = function () {\n    this.session = new Session_1.Session(this);\n    return this.session;\n  };\n  /**\n   * Returns a new publisher\n   *\n   * #### Events dispatched\n   *\n   * The {@link Publisher} object will dispatch an `accessDialogOpened` event, only if the pop-up shown by the browser to request permissions for the camera is opened. You can use this event to alert the user about granting permissions\n   * for your website. An `accessDialogClosed` event will also be dispatched after user clicks on \"Allow\" or \"Block\" in the pop-up.\n   *\n   * The {@link Publisher} object will dispatch an `accessAllowed` or `accessDenied` event once it has been granted access to the requested input devices or not.\n   *\n   * The {@link Publisher} object will dispatch a `videoElementCreated` event once a HTML video element has been added to DOM (only if you\n   * [let OpenVidu take care of the video players](/en/stable/cheatsheet/manage-videos/#let-openvidu-take-care-of-the-video-players)). See {@link VideoElementEvent} to learn more.\n   *\n   * The {@link Publisher} object will dispatch a `streamPlaying` event once the local streams starts playing. See {@link StreamManagerEvent} to learn more.\n   *\n   * @param targetElement  HTML DOM element (or its `id` attribute) in which the video element of the Publisher will be inserted (see {@link PublisherProperties.insertMode}). If *null* or *undefined* no default video will be created for this Publisher.\n   * You can always call method {@link Publisher.addVideoElement} or {@link Publisher.createVideoElement} to manage the video elements on your own (see [Manage video players](/en/stable/cheatsheet/manage-videos) section)\n   * @param completionHandler `error` parameter is null if `initPublisher` succeeds, and is defined if it fails.\n   *                          `completionHandler` function is called before the Publisher dispatches an `accessAllowed` or an `accessDenied` event\n   */\n  OpenVidu.prototype.initPublisher = function (targetElement, param2, param3) {\n    var properties;\n    if (!!param2 && typeof param2 !== 'function') {\n      // Matches 'initPublisher(targetElement, properties)' or 'initPublisher(targetElement, properties, completionHandler)'\n      properties = param2;\n      properties = {\n        audioSource: typeof properties.audioSource !== 'undefined' ? properties.audioSource : undefined,\n        frameRate: typeof MediaStreamTrack !== 'undefined' && properties.videoSource instanceof MediaStreamTrack ? undefined : typeof properties.frameRate !== 'undefined' ? properties.frameRate : undefined,\n        insertMode: typeof properties.insertMode !== 'undefined' ? typeof properties.insertMode === 'string' ? VideoInsertMode_1.VideoInsertMode[properties.insertMode] : properties.insertMode : VideoInsertMode_1.VideoInsertMode.APPEND,\n        mirror: typeof properties.mirror !== 'undefined' ? properties.mirror : true,\n        publishAudio: typeof properties.publishAudio !== 'undefined' ? properties.publishAudio : true,\n        publishVideo: typeof properties.publishVideo !== 'undefined' ? properties.publishVideo : true,\n        resolution: typeof MediaStreamTrack !== 'undefined' && properties.videoSource instanceof MediaStreamTrack ? undefined : typeof properties.resolution !== 'undefined' ? properties.resolution : '640x480',\n        videoSource: typeof properties.videoSource !== 'undefined' ? properties.videoSource : undefined,\n        videoSimulcast: properties.videoSimulcast,\n        filter: properties.filter\n      };\n    } else {\n      // Matches 'initPublisher(targetElement)' or 'initPublisher(targetElement, completionHandler)'\n      properties = {\n        insertMode: VideoInsertMode_1.VideoInsertMode.APPEND,\n        mirror: true,\n        publishAudio: true,\n        publishVideo: true,\n        resolution: '640x480'\n      };\n    }\n    var publisher = new Publisher_1.Publisher(targetElement, properties, this);\n    var completionHandler;\n    if (!!param2 && typeof param2 === 'function') {\n      completionHandler = param2;\n    } else if (!!param3) {\n      completionHandler = param3;\n    }\n    publisher.initialize().then(function () {\n      if (completionHandler !== undefined) {\n        completionHandler(undefined);\n      }\n      publisher.emitEvent('accessAllowed', []);\n    }).catch(function (error) {\n      if (completionHandler !== undefined) {\n        completionHandler(error);\n      }\n      publisher.emitEvent('accessDenied', [error]);\n    });\n    this.publishers.push(publisher);\n    return publisher;\n  };\n  OpenVidu.prototype.initPublisherAsync = function (targetElement, properties) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var publisher;\n      var callback = function (error) {\n        if (!!error) {\n          return reject(error);\n        } else {\n          return resolve(publisher);\n        }\n      };\n      if (!!properties) {\n        publisher = _this.initPublisher(targetElement, properties, callback);\n      } else {\n        publisher = _this.initPublisher(targetElement, callback);\n      }\n    });\n  };\n  /**\n   * Returns a new local recorder for recording streams straight away from the browser\n   * @param stream  Stream to record\n   */\n  OpenVidu.prototype.initLocalRecorder = function (stream) {\n    return new LocalRecorder_1.LocalRecorder(stream);\n  };\n  /**\n   * Checks if the browser supports OpenVidu\n   * @returns 1 if the browser supports OpenVidu, 0 otherwise\n   */\n  OpenVidu.prototype.checkSystemRequirements = function () {\n    // Specific iOS platform support (iPhone, iPad)\n    if (platform.isIPhoneOrIPad()) {\n      return platform.isIOSWithSafari() || platform.isChromeMobileBrowser() || platform.isFirefoxMobileBrowser() || platform.isOperaMobileBrowser() || platform.isEdgeMobileBrowser() || platform.isIonicIos() // Ionic apps for iOS\n      ;\n    }\n    // General platform support for web clients (Desktop, Mobile)\n    return platform.isChromeBrowser() || platform.isChromeMobileBrowser() || platform.isFirefoxBrowser() || platform.isFirefoxMobileBrowser() || platform.isOperaBrowser() || platform.isOperaMobileBrowser() || platform.isEdgeBrowser() || platform.isEdgeMobileBrowser() || platform.isSamsungBrowser() || platform.isSafariBrowser() || platform.isAndroidBrowser() ||\n    // Android WebView & Ionic apps for Android\n    platform.isElectron() || platform.isNodeJs() ||\n    // TODO: remove when updating platform detection library\n    platform.isMotorolaEdgeDevice();\n  };\n  /**\n   * Checks if the browser supports screen-sharing. Desktop Chrome, Firefox and Opera support screen-sharing\n   * @returns 1 if the browser supports screen-sharing, 0 otherwise\n   */\n  OpenVidu.prototype.checkScreenSharingCapabilities = function () {\n    return platform.canScreenShare();\n  };\n  /**\n   * Collects information about the media input devices available on the system. You can pass property `deviceId` of a {@link Device} object as value of `audioSource` or `videoSource` properties in {@link initPublisher} method\n   */\n  OpenVidu.prototype.getDevices = function () {\n    return new Promise(function (resolve, reject) {\n      navigator.mediaDevices.enumerateDevices().then(function (deviceInfos) {\n        var _a;\n        var devices = [];\n        // Ionic Android  devices\n        if (platform.isIonicAndroid() && typeof cordova != 'undefined' && ((_a = cordova === null || cordova === void 0 ? void 0 : cordova.plugins) === null || _a === void 0 ? void 0 : _a.EnumerateDevicesPlugin)) {\n          cordova.plugins.EnumerateDevicesPlugin.getEnumerateDevices().then(function (pluginDevices) {\n            var pluginAudioDevices = [];\n            var videoDevices = [];\n            var audioDevices = [];\n            pluginAudioDevices = pluginDevices.filter(function (device) {\n              return device.kind === 'audioinput';\n            });\n            videoDevices = deviceInfos.filter(function (device) {\n              return device.kind === 'videoinput';\n            });\n            audioDevices = deviceInfos.filter(function (device) {\n              return device.kind === 'audioinput';\n            });\n            videoDevices.forEach(function (deviceInfo, index) {\n              if (!deviceInfo.label) {\n                var label = '';\n                if (index === 0) {\n                  label = 'Front Camera';\n                } else if (index === 1) {\n                  label = 'Back Camera';\n                } else {\n                  label = 'Unknown Camera';\n                }\n                devices.push({\n                  kind: deviceInfo.kind,\n                  deviceId: deviceInfo.deviceId,\n                  label: label\n                });\n              } else {\n                devices.push({\n                  kind: deviceInfo.kind,\n                  deviceId: deviceInfo.deviceId,\n                  label: deviceInfo.label\n                });\n              }\n            });\n            audioDevices.forEach(function (deviceInfo, index) {\n              if (!deviceInfo.label) {\n                var label = '';\n                switch (index) {\n                  case 0:\n                    // Default Microphone\n                    label = 'Default';\n                    break;\n                  case 1:\n                    // Microphone + Speakerphone\n                    var defaultMatch = pluginAudioDevices.filter(function (d) {\n                      return d.label.includes('Built');\n                    })[0];\n                    label = defaultMatch ? defaultMatch.label : 'Built-in Microphone';\n                    break;\n                  case 2:\n                    // Headset Microphone\n                    var wiredMatch = pluginAudioDevices.filter(function (d) {\n                      return d.label.includes('Wired');\n                    })[0];\n                    if (wiredMatch) {\n                      label = wiredMatch.label;\n                    } else {\n                      label = 'Headset earpiece';\n                    }\n                    break;\n                  case 3:\n                    var wirelessMatch = pluginAudioDevices.filter(function (d) {\n                      return d.label.includes('Bluetooth');\n                    })[0];\n                    label = wirelessMatch ? wirelessMatch.label : 'Wireless';\n                    break;\n                  default:\n                    label = 'Unknown Microphone';\n                    break;\n                }\n                devices.push({\n                  kind: deviceInfo.kind,\n                  deviceId: deviceInfo.deviceId,\n                  label: label\n                });\n              } else {\n                devices.push({\n                  kind: deviceInfo.kind,\n                  deviceId: deviceInfo.deviceId,\n                  label: deviceInfo.label\n                });\n              }\n            });\n            return resolve(devices);\n          });\n        } else {\n          // Rest of platforms\n          deviceInfos.forEach(function (deviceInfo) {\n            if (deviceInfo.kind === 'audioinput' || deviceInfo.kind === 'videoinput') {\n              devices.push({\n                kind: deviceInfo.kind,\n                deviceId: deviceInfo.deviceId,\n                label: deviceInfo.label\n              });\n            }\n          });\n          return resolve(devices);\n        }\n      }).catch(function (error) {\n        logger.error('Error getting devices', error);\n        return reject(error);\n      });\n    });\n  };\n  /**\n   * Get a MediaStream object that you can customize before calling {@link initPublisher} (pass _MediaStreamTrack_ property of the _MediaStream_ value resolved by the Promise as `audioSource` or `videoSource` properties in {@link initPublisher})\n   *\n   * Parameter `options` is the same as in {@link initPublisher} second parameter (of type {@link PublisherProperties}), but only the following properties will be applied: `audioSource`, `videoSource`, `frameRate`, `resolution`\n   *\n   * To customize the Publisher's video, the API for HTMLCanvasElement is very useful. For example, to get a black-and-white video at 10 fps and HD resolution with no sound:\n   * ```\n   * var OV = new OpenVidu();\n   * var FRAME_RATE = 10;\n   *\n   * OV.getUserMedia({\n   *    audioSource: false,\n   *    videoSource: undefined,\n   *    resolution: '1280x720',\n   *    frameRate: FRAME_RATE\n   * })\n   * .then(mediaStream => {\n   *\n   *    var videoTrack = mediaStream.getVideoTracks()[0];\n   *    var video = document.createElement('video');\n   *    video.srcObject = new MediaStream([videoTrack]);\n   *\n   *    var canvas = document.createElement('canvas');\n   *    var ctx = canvas.getContext('2d');\n   *    ctx.filter = 'grayscale(100%)';\n   *\n   *    video.addEventListener('play', () => {\n   *      var loop = () => {\n   *        if (!video.paused && !video.ended) {\n   *          ctx.drawImage(video, 0, 0, 300, 170);\n   *          setTimeout(loop, 1000/ FRAME_RATE); // Drawing at 10 fps\n   *        }\n   *      };\n   *      loop();\n   *    });\n   *    video.play();\n   *\n   *    var grayVideoTrack = canvas.captureStream(FRAME_RATE).getVideoTracks()[0];\n   *    var publisher = this.OV.initPublisher(\n   *      myHtmlTarget,\n   *      {\n   *        audioSource: false,\n   *        videoSource: grayVideoTrack\n   *      });\n   * });\n   * ```\n   */\n  OpenVidu.prototype.getUserMedia = function (options) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var askForAudioStreamOnly, myConstraints, mustAskForAudioTrackLater, mediaStream, error_1, errorName, errorMessage, constraintsAux, mediaStream, error_2, errorName, errorMessage, error_3;\n      var _this = this;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            askForAudioStreamOnly = function (previousMediaStream, constraints) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var definedAudioConstraint, constraintsAux, audioOnlyStream, error_4;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      definedAudioConstraint = constraints.audio === undefined ? true : constraints.audio;\n                      constraintsAux = {\n                        audio: definedAudioConstraint,\n                        video: false\n                      };\n                      _a.label = 1;\n                    case 1:\n                      _a.trys.push([1, 3,, 4]);\n                      return [4 /*yield*/, navigator.mediaDevices.getUserMedia(constraintsAux)];\n                    case 2:\n                      audioOnlyStream = _a.sent();\n                      previousMediaStream.addTrack(audioOnlyStream.getAudioTracks()[0]);\n                      return [2 /*return*/, previousMediaStream];\n                    case 3:\n                      error_4 = _a.sent();\n                      previousMediaStream.getAudioTracks().forEach(function (track) {\n                        track.stop();\n                      });\n                      previousMediaStream.getVideoTracks().forEach(function (track) {\n                        track.stop();\n                      });\n                      throw this.generateAudioDeviceError(error_4, constraintsAux);\n                    case 4:\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            };\n\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1, 20,, 21]);\n            return [4 /*yield*/, this.generateMediaConstraints(options)];\n          case 2:\n            myConstraints = _c.sent();\n            if (!(!!myConstraints.videoTrack && !!myConstraints.audioTrack || !!myConstraints.audioTrack && ((_a = myConstraints.constraints) === null || _a === void 0 ? void 0 : _a.video) === false || !!myConstraints.videoTrack && ((_b = myConstraints.constraints) === null || _b === void 0 ? void 0 : _b.audio) === false)) return [3 /*break*/, 3];\n            // No need to call getUserMedia at all. Both tracks provided, or only AUDIO track provided or only VIDEO track provided\n            return [2 /*return*/, this.addAlreadyProvidedTracks(myConstraints, new MediaStream())];\n          case 3:\n            // getUserMedia must be called. AUDIO or VIDEO are requesting a new track\n            // Delete already provided constraints for audio or video\n            if (!!myConstraints.videoTrack) {\n              delete myConstraints.constraints.video;\n            }\n            if (!!myConstraints.audioTrack) {\n              delete myConstraints.constraints.audio;\n            }\n            mustAskForAudioTrackLater = false;\n            if (!(typeof options.videoSource === 'string')) return [3 /*break*/, 12];\n            if (!(options.videoSource === 'screen' || options.videoSource === 'window' || platform.isElectron() && options.videoSource.startsWith('screen:'))) return [3 /*break*/, 12];\n            // Video is screen sharing\n            mustAskForAudioTrackLater = !myConstraints.audioTrack && options.audioSource !== null && options.audioSource !== false;\n            if (!(navigator.mediaDevices['getDisplayMedia'] && !platform.isElectron())) return [3 /*break*/, 11];\n            _c.label = 4;\n          case 4:\n            _c.trys.push([4, 9,, 10]);\n            return [4 /*yield*/, navigator.mediaDevices['getDisplayMedia']({\n              video: true\n            })];\n          case 5:\n            mediaStream = _c.sent();\n            this.addAlreadyProvidedTracks(myConstraints, mediaStream);\n            if (!mustAskForAudioTrackLater) return [3 /*break*/, 7];\n            return [4 /*yield*/, askForAudioStreamOnly(mediaStream, myConstraints.constraints)];\n          case 6:\n            return [2 /*return*/, _c.sent()];\n          case 7:\n            return [2 /*return*/, mediaStream];\n          case 8:\n            return [3 /*break*/, 10];\n          case 9:\n            error_1 = _c.sent();\n            errorName = OpenViduError_1.OpenViduErrorName.SCREEN_CAPTURE_DENIED;\n            errorMessage = error_1.toString();\n            throw new OpenViduError_1.OpenViduError(errorName, errorMessage);\n          case 10:\n            return [3 /*break*/, 11];\n          case 11:\n            return [3 /*break*/, 12];\n          case 12:\n            constraintsAux = mustAskForAudioTrackLater ? {\n              video: myConstraints.constraints.video\n            } : myConstraints.constraints;\n            _c.label = 13;\n          case 13:\n            _c.trys.push([13, 18,, 19]);\n            return [4 /*yield*/, navigator.mediaDevices.getUserMedia(constraintsAux)];\n          case 14:\n            mediaStream = _c.sent();\n            this.addAlreadyProvidedTracks(myConstraints, mediaStream);\n            if (!mustAskForAudioTrackLater) return [3 /*break*/, 16];\n            return [4 /*yield*/, askForAudioStreamOnly(mediaStream, myConstraints.constraints)];\n          case 15:\n            return [2 /*return*/, _c.sent()];\n          case 16:\n            return [2 /*return*/, mediaStream];\n          case 17:\n            return [3 /*break*/, 19];\n          case 18:\n            error_2 = _c.sent();\n            errorName = void 0;\n            errorMessage = error_2.toString();\n            if (!(options.videoSource === 'screen')) {\n              errorName = OpenViduError_1.OpenViduErrorName.DEVICE_ACCESS_DENIED;\n            } else {\n              errorName = OpenViduError_1.OpenViduErrorName.SCREEN_CAPTURE_DENIED;\n            }\n            throw new OpenViduError_1.OpenViduError(errorName, errorMessage);\n          case 19:\n            return [3 /*break*/, 21];\n          case 20:\n            error_3 = _c.sent();\n            throw error_3;\n          case 21:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /* tslint:disable:no-empty */\n  /**\n   * Disable all logging except error level\n   */\n  OpenVidu.prototype.enableProdMode = function () {\n    logger.enableProdMode();\n  };\n  /* tslint:enable:no-empty */\n  /**\n   * Set OpenVidu advanced configuration options. `configuration` is an object of type {@link OpenViduAdvancedConfiguration}. Call this method to override previous values at any moment.\n   */\n  OpenVidu.prototype.setAdvancedConfiguration = function (configuration) {\n    this.advancedConfiguration = configuration;\n  };\n  /* Hidden methods */\n  /**\n   * @hidden\n   */\n  OpenVidu.prototype.onOrientationChanged = function (handler) {\n    globalThis.addEventListener('orientationchange', handler);\n  };\n  /**\n   * @hidden\n   */\n  OpenVidu.prototype.sendNewVideoDimensionsIfRequired = function (publisher, reason, WAIT_INTERVAL, MAX_ATTEMPTS) {\n    var _this = this;\n    var _a, _b, _c, _d;\n    var attempts = 0;\n    var oldWidth = ((_b = (_a = publisher === null || publisher === void 0 ? void 0 : publisher.stream) === null || _a === void 0 ? void 0 : _a.videoDimensions) === null || _b === void 0 ? void 0 : _b.width) || 0;\n    var oldHeight = ((_d = (_c = publisher === null || publisher === void 0 ? void 0 : publisher.stream) === null || _c === void 0 ? void 0 : _c.videoDimensions) === null || _d === void 0 ? void 0 : _d.height) || 0;\n    var repeatUntilChangeOrMaxAttempts = setInterval(function () {\n      attempts++;\n      if (attempts > MAX_ATTEMPTS) {\n        clearTimeout(repeatUntilChangeOrMaxAttempts);\n      }\n      publisher.getVideoDimensions().then(function (newDimensions) {\n        if (newDimensions.width !== oldWidth || newDimensions.height !== oldHeight) {\n          clearTimeout(repeatUntilChangeOrMaxAttempts);\n          _this.sendVideoDimensionsChangedEvent(publisher, reason, oldWidth, oldHeight, newDimensions.width, newDimensions.height);\n        }\n      });\n    }, WAIT_INTERVAL);\n  };\n  /**\n   * @hidden\n   */\n  OpenVidu.prototype.sendVideoDimensionsChangedEvent = function (publisher, reason, oldWidth, oldHeight, newWidth, newHeight) {\n    var _this = this;\n    publisher.stream.videoDimensions = {\n      width: newWidth || 0,\n      height: newHeight || 0\n    };\n    this.sendRequest('streamPropertyChanged', {\n      streamId: publisher.stream.streamId,\n      property: 'videoDimensions',\n      newValue: JSON.stringify(publisher.stream.videoDimensions),\n      reason: reason\n    }, function (error, response) {\n      if (error) {\n        logger.error(\"Error sending 'streamPropertyChanged' event\", error);\n      } else {\n        _this.session.emitEvent('streamPropertyChanged', [new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.session, publisher.stream, 'videoDimensions', publisher.stream.videoDimensions, {\n          width: oldWidth,\n          height: oldHeight\n        }, reason)]);\n        publisher.emitEvent('streamPropertyChanged', [new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(publisher, publisher.stream, 'videoDimensions', publisher.stream.videoDimensions, {\n          width: oldWidth,\n          height: oldHeight\n        }, reason)]);\n        _this.session.sendVideoData(publisher);\n      }\n    });\n  };\n  /**\n   * @hidden\n   */\n  OpenVidu.prototype.sendTrackChangedEvent = function (publisher, oldLabel, newLabel, propertyType) {\n    var _this = this;\n    var oldValue = {\n      label: oldLabel\n    };\n    var newValue = {\n      label: newLabel\n    };\n    var reason = 'trackReplaced';\n    if (publisher.stream.isLocalStreamPublished) {\n      this.sendRequest('streamPropertyChanged', {\n        streamId: publisher.stream.streamId,\n        property: propertyType,\n        newValue: newValue,\n        reason: reason\n      }, function (error, response) {\n        if (error) {\n          logger.error(\"Error sending 'streamPropertyChanged' event\", error);\n        } else {\n          _this.session.emitEvent('streamPropertyChanged', [new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(_this.session, publisher.stream, propertyType, newValue, oldValue, reason)]);\n          publisher.emitEvent('streamPropertyChanged', [new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(publisher, publisher.stream, propertyType, newValue, oldValue, reason)]);\n        }\n      });\n    } else {\n      this.session.emitEvent('streamPropertyChanged', [new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(this.session, publisher.stream, propertyType, newValue, oldValue, reason)]);\n      publisher.emitEvent('streamPropertyChanged', [new StreamPropertyChangedEvent_1.StreamPropertyChangedEvent(publisher, publisher.stream, propertyType, newValue, oldValue, reason)]);\n    }\n  };\n  /**\n   * @hidden\n   */\n  OpenVidu.prototype.generateMediaConstraints = function (publisherProperties) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var myConstraints = {\n        audioTrack: undefined,\n        videoTrack: undefined,\n        constraints: {\n          audio: undefined,\n          video: undefined\n        }\n      };\n      var audioSource = publisherProperties.audioSource;\n      var videoSource = publisherProperties.videoSource;\n      // CASE 1: null/false\n      if (audioSource === null || audioSource === false) {\n        // No audio track\n        myConstraints.constraints.audio = false;\n      }\n      if (videoSource === null || videoSource === false) {\n        // No video track\n        myConstraints.constraints.video = false;\n      }\n      if (myConstraints.constraints.audio === false && myConstraints.constraints.video === false) {\n        // ERROR! audioSource and videoSource cannot be both false at the same time\n        return reject(new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.NO_INPUT_SOURCE_SET, \"Properties 'audioSource' and 'videoSource' cannot be set to false or null at the same time\"));\n      }\n      // CASE 2: MediaStreamTracks\n      if (typeof MediaStreamTrack !== 'undefined' && audioSource instanceof MediaStreamTrack) {\n        // Already provided audio track\n        myConstraints.audioTrack = audioSource;\n      }\n      if (typeof MediaStreamTrack !== 'undefined' && videoSource instanceof MediaStreamTrack) {\n        // Already provided video track\n        myConstraints.videoTrack = videoSource;\n      }\n      // CASE 3: Default tracks\n      if (audioSource === undefined) {\n        myConstraints.constraints.audio = true;\n      }\n      if (videoSource === undefined) {\n        myConstraints.constraints.video = {\n          width: {\n            ideal: 640\n          },\n          height: {\n            ideal: 480\n          }\n        };\n      }\n      // CASE 3.5: give values to resolution and frameRate if video not null/false\n      if (videoSource !== null && videoSource !== false) {\n        if (!!publisherProperties.resolution) {\n          var widthAndHeight = publisherProperties.resolution.toLowerCase().split('x');\n          var idealWidth = Number(widthAndHeight[0]);\n          var idealHeight = Number(widthAndHeight[1]);\n          myConstraints.constraints.video = {\n            width: {\n              ideal: idealWidth\n            },\n            height: {\n              ideal: idealHeight\n            }\n          };\n        }\n        if (!!publisherProperties.frameRate) {\n          myConstraints.constraints.video.frameRate = {\n            ideal: publisherProperties.frameRate\n          };\n        }\n      }\n      // CASE 4: deviceId or screen sharing\n      _this.configureDeviceIdOrScreensharing(myConstraints, publisherProperties, resolve, reject);\n      return resolve(myConstraints);\n    });\n  };\n  /**\n   * @hidden\n   */\n  OpenVidu.prototype.startWs = function (onConnectSucces) {\n    var config = {\n      heartbeat: 5000,\n      ws: {\n        uri: this.wsUri + '?sessionId=' + this.session.sessionId,\n        onconnected: onConnectSucces,\n        ondisconnect: this.disconnectCallback.bind(this),\n        onreconnecting: this.reconnectingCallback.bind(this),\n        onreconnected: this.reconnectedCallback.bind(this),\n        ismasternodecrashed: this.isMasterNodeCrashed.bind(this)\n      },\n      rpc: {\n        requestTimeout: 10000,\n        heartbeatRequestTimeout: 5000,\n        participantJoined: this.session.onParticipantJoined.bind(this.session),\n        participantPublished: this.session.onParticipantPublished.bind(this.session),\n        participantUnpublished: this.session.onParticipantUnpublished.bind(this.session),\n        participantLeft: this.session.onParticipantLeft.bind(this.session),\n        participantEvicted: this.session.onParticipantEvicted.bind(this.session),\n        recordingStarted: this.session.onRecordingStarted.bind(this.session),\n        recordingStopped: this.session.onRecordingStopped.bind(this.session),\n        broadcastStarted: this.session.onBroadcastStarted.bind(this.session),\n        broadcastStopped: this.session.onBroadcastStopped.bind(this.session),\n        sendMessage: this.session.onNewMessage.bind(this.session),\n        streamPropertyChanged: this.session.onStreamPropertyChanged.bind(this.session),\n        connectionPropertyChanged: this.session.onConnectionPropertyChanged.bind(this.session),\n        networkQualityLevelChanged: this.session.onNetworkQualityLevelChangedChanged.bind(this.session),\n        filterEventDispatched: this.session.onFilterEventDispatched.bind(this.session),\n        iceCandidate: this.session.recvIceCandidate.bind(this.session),\n        mediaError: this.session.onMediaError.bind(this.session),\n        masterNodeCrashedNotification: this.onMasterNodeCrashedNotification.bind(this),\n        forciblyReconnectSubscriber: this.session.onForciblyReconnectSubscriber.bind(this.session),\n        speechToTextMessage: this.session.onSpeechToTextMessage.bind(this.session),\n        speechToTextDisconnected: this.session.onSpeechToTextDisconnected.bind(this.session)\n      }\n    };\n    this.jsonRpcClient = new RpcBuilder.clients.JsonRpcClient(config);\n  };\n  /**\n   * @hidden\n   */\n  OpenVidu.prototype.onMasterNodeCrashedNotification = function (response) {\n    console.error('Master Node has crashed');\n    this.masterNodeHasCrashed = true;\n    this.session.onLostConnection('nodeCrashed');\n    this.jsonRpcClient.close(4103, 'Master Node has crashed');\n  };\n  /**\n   * @hidden\n   */\n  OpenVidu.prototype.getWsReadyState = function () {\n    return this.jsonRpcClient.getReadyState();\n  };\n  /**\n   * @hidden\n   */\n  OpenVidu.prototype.closeWs = function () {\n    this.jsonRpcClient.close(4102, 'Connection closed by client');\n  };\n  /**\n   * @hidden\n   */\n  OpenVidu.prototype.sendRequest = function (method, params, callback) {\n    var _a;\n    if (params && params instanceof Function) {\n      callback = params;\n      params = {};\n    }\n    logger.debug('Sending request: {method:\"' + method + '\", params: ' + JSON.stringify(params) + '}');\n    (_a = this.jsonRpcClient) === null || _a === void 0 ? void 0 : _a.send(method, params, callback);\n  };\n  /**\n   * @hidden\n   */\n  OpenVidu.prototype.getWsUri = function () {\n    return this.wsUri;\n  };\n  /**\n   * @hidden\n   */\n  OpenVidu.prototype.getSecret = function () {\n    return this.secret;\n  };\n  /**\n   * @hidden\n   */\n  OpenVidu.prototype.getRecorder = function () {\n    return this.recorder;\n  };\n  /**\n   * @hidden\n   */\n  OpenVidu.prototype.getStt = function () {\n    return this.stt;\n  };\n  /**\n   * @hidden\n   */\n  OpenVidu.prototype.generateAudioDeviceError = function (error, constraints) {\n    if (error.name === 'Error') {\n      // Safari OverConstrainedError has as name property 'Error' instead of 'OverConstrainedError'\n      error.name = error.constructor.name;\n    }\n    var errorName, errorMessage;\n    switch (error.name.toLowerCase()) {\n      case 'notfounderror':\n        errorName = OpenViduError_1.OpenViduErrorName.INPUT_AUDIO_DEVICE_NOT_FOUND;\n        errorMessage = error.toString();\n        return new OpenViduError_1.OpenViduError(errorName, errorMessage);\n      case 'notallowederror':\n        errorName = OpenViduError_1.OpenViduErrorName.DEVICE_ACCESS_DENIED;\n        errorMessage = error.toString();\n        return new OpenViduError_1.OpenViduError(errorName, errorMessage);\n      case 'overconstrainederror':\n        if (error.constraint.toLowerCase() === 'deviceid') {\n          errorName = OpenViduError_1.OpenViduErrorName.INPUT_AUDIO_DEVICE_NOT_FOUND;\n          errorMessage = \"Audio input device with deviceId '\" + constraints.audio.deviceId.exact + \"' not found\";\n        } else {\n          errorName = OpenViduError_1.OpenViduErrorName.PUBLISHER_PROPERTIES_ERROR;\n          errorMessage = \"Audio input device doesn't support the value passed for constraint '\" + error.constraint + \"'\";\n        }\n        return new OpenViduError_1.OpenViduError(errorName, errorMessage);\n      case 'notreadableerror':\n        errorName = OpenViduError_1.OpenViduErrorName.DEVICE_ALREADY_IN_USE;\n        errorMessage = error.toString();\n        return new OpenViduError_1.OpenViduError(errorName, errorMessage);\n      default:\n        return new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.INPUT_AUDIO_DEVICE_GENERIC_ERROR, error.toString());\n    }\n  };\n  /**\n   * @hidden\n   */\n  OpenVidu.prototype.addAlreadyProvidedTracks = function (myConstraints, mediaStream, stream) {\n    if (!!myConstraints.videoTrack) {\n      mediaStream.addTrack(myConstraints.videoTrack);\n      if (!!stream) {\n        if (!!myConstraints.constraints.video) {\n          stream.lastVideoTrackConstraints = myConstraints.constraints.video;\n        } else {\n          stream.lastVideoTrackConstraints = myConstraints.videoTrack.getConstraints();\n        }\n      }\n    }\n    if (!!myConstraints.audioTrack) {\n      mediaStream.addTrack(myConstraints.audioTrack);\n    }\n    return mediaStream;\n  };\n  /**\n   * @hidden\n   */\n  OpenVidu.prototype.configureDeviceIdOrScreensharing = function (myConstraints, publisherProperties, resolve, reject) {\n    var _this = this;\n    var audioSource = publisherProperties.audioSource;\n    var videoSource = publisherProperties.videoSource;\n    if (typeof audioSource === 'string') {\n      myConstraints.constraints.audio = {\n        deviceId: {\n          exact: audioSource\n        }\n      };\n    }\n    if (typeof videoSource === 'string') {\n      if (!this.isScreenShare(videoSource)) {\n        this.setVideoSource(myConstraints, videoSource);\n      } else {\n        // Screen sharing\n        if (!this.checkScreenSharingCapabilities()) {\n          var error = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_SHARING_NOT_SUPPORTED, 'You can only screen share in desktop Chrome, Firefox, Opera, Safari (>=13.0), Edge (>= 80) or Electron. Detected client: ' + platform.getName() + ' ' + platform.getVersion());\n          logger.error(error);\n          return reject(error);\n        } else {\n          if (platform.isElectron()) {\n            var prefix = 'screen:';\n            var videoSourceString = videoSource;\n            var electronScreenId = videoSourceString.substr(videoSourceString.indexOf(prefix) + prefix.length);\n            myConstraints.constraints.video = {\n              mandatory: {\n                chromeMediaSource: 'desktop',\n                chromeMediaSourceId: electronScreenId\n              }\n            };\n            return resolve(myConstraints);\n          } else {\n            if (!!this.advancedConfiguration.screenShareChromeExtension && !(platform.isFirefoxBrowser() || platform.isFirefoxMobileBrowser()) && !navigator.mediaDevices['getDisplayMedia']) {\n              // Custom screen sharing extension for Chrome (and Opera) and no support for MediaDevices.getDisplayMedia()\n              screenSharing.getScreenConstraints(function (error, screenConstraints) {\n                if (!!error || !!screenConstraints.mandatory && screenConstraints.mandatory.chromeMediaSource === 'screen') {\n                  if (error === 'permission-denied' || error === 'PermissionDeniedError') {\n                    var error_5 = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_CAPTURE_DENIED, 'You must allow access to one window of your desktop');\n                    logger.error(error_5);\n                    return reject(error_5);\n                  } else {\n                    var extensionId = _this.advancedConfiguration.screenShareChromeExtension.split('/').pop().trim();\n                    screenSharing.getChromeExtensionStatus(extensionId, function (status) {\n                      if (status === 'installed-disabled') {\n                        var error_6 = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_EXTENSION_DISABLED, 'You must enable the screen extension');\n                        logger.error(error_6);\n                        return reject(error_6);\n                      }\n                      if (status === 'not-installed') {\n                        var error_7 = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_EXTENSION_NOT_INSTALLED, _this.advancedConfiguration.screenShareChromeExtension);\n                        logger.error(error_7);\n                        return reject(error_7);\n                      }\n                    });\n                    return;\n                  }\n                } else {\n                  myConstraints.constraints.video = screenConstraints;\n                  return resolve(myConstraints);\n                }\n              });\n              return;\n            } else {\n              if (navigator.mediaDevices['getDisplayMedia']) {\n                // getDisplayMedia support (Chrome >= 72, Firefox >= 66, Safari >= 13)\n                return resolve(myConstraints);\n              } else {\n                // Default screen sharing extension for Chrome/Opera, or is Firefox < 66\n                var firefoxString = platform.isFirefoxBrowser() || platform.isFirefoxMobileBrowser() ? publisherProperties.videoSource : undefined;\n                screenSharingAuto.getScreenId(firefoxString, function (error, sourceId, screenConstraints) {\n                  if (!!error) {\n                    if (error === 'not-installed') {\n                      var extensionUrl = !!_this.advancedConfiguration.screenShareChromeExtension ? _this.advancedConfiguration.screenShareChromeExtension : 'https://chrome.google.com/webstore/detail/openvidu-screensharing/lfcgfepafnobdloecchnfaclibenjold';\n                      var err = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_EXTENSION_NOT_INSTALLED, extensionUrl);\n                      logger.error(err);\n                      return reject(err);\n                    } else if (error === 'installed-disabled') {\n                      var err = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_EXTENSION_DISABLED, 'You must enable the screen extension');\n                      logger.error(err);\n                      return reject(err);\n                    } else if (error === 'permission-denied') {\n                      var err = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.SCREEN_CAPTURE_DENIED, 'You must allow access to one window of your desktop');\n                      logger.error(err);\n                      return reject(err);\n                    } else {\n                      var err = new OpenViduError_1.OpenViduError(OpenViduError_1.OpenViduErrorName.GENERIC_ERROR, 'Unknown error when accessing screen share');\n                      logger.error(err);\n                      logger.error(error);\n                      return reject(err);\n                    }\n                  } else {\n                    myConstraints.constraints.video = screenConstraints.video;\n                    return resolve(myConstraints);\n                  }\n                });\n                return;\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n  /**\n   * @hidden\n   */\n  OpenVidu.prototype.setVideoSource = function (myConstraints, videoSource) {\n    if (!myConstraints.constraints.video) {\n      myConstraints.constraints.video = {};\n    }\n    myConstraints.constraints.video['deviceId'] = {\n      exact: videoSource\n    };\n  };\n  /* Private methods */\n  OpenVidu.prototype.disconnectCallback = function () {\n    logger.warn('Websocket connection lost');\n    if (this.isRoomAvailable()) {\n      this.session.onLostConnection('networkDisconnect');\n    } else {\n      alert('Connection error. Please reload page.');\n    }\n  };\n  OpenVidu.prototype.reconnectingCallback = function () {\n    logger.warn('Websocket connection lost (reconnecting)');\n    if (!this.isRoomAvailable()) {\n      alert('Connection error. Please reload page.');\n    } else {\n      this.session.emitEvent('reconnecting', []);\n    }\n  };\n  OpenVidu.prototype.reconnectWebsocketThroughRpcConnectMethod = function (rpcSessionId) {\n    var _this = this;\n    // This RPC method allows checking:\n    // Single Master: if success, connection recovered\n    //                if error, no Master Node crashed and life will be -1. onLostConnection with reason networkDisconnect will be triggered\n    // Multi Master: if success, connection recovered\n    //               if error and Master Node crashed notification was already received, nothing must be done\n    //               if error and Master Node NOT crashed, sessionStatus method must be sent:\n    //                 if life is equal, networkDisconnect\n    //                 if life is greater, nodeCrashed\n    this.sendRequest('connect', {\n      sessionId: rpcSessionId,\n      reconnect: true\n    }, function (error, response) {\n      if (!!error) {\n        if (_this.isMasterNodeCrashed()) {\n          logger.warn('Master Node has crashed!');\n        } else {\n          logger.error(error);\n          var notifyLostConnection_1 = function (reason, errorMsg) {\n            logger.warn(errorMsg);\n            _this.session.onLostConnection(reason);\n            _this.jsonRpcClient.close(4101, 'Reconnection fault: ' + errorMsg);\n          };\n          var rpcSessionStatus = function () {\n            if (_this.life === -1) {\n              // Single Master\n              notifyLostConnection_1('networkDisconnect', 'WS successfully reconnected but the user was already evicted due to timeout');\n            } else {\n              // Multi Master\n              // This RPC method is only required to find out the reason of the disconnection:\n              // whether the client lost its network connection or a Master Node crashed\n              _this.sendRequest('sessionStatus', {\n                sessionId: _this.session.sessionId\n              }, function (error, response) {\n                if (error != null) {\n                  console.error('Error checking session status', error);\n                } else {\n                  if (_this.life === response.life) {\n                    // If the life stored in the client matches the life stored in the server, it means that the client lost its network connection\n                    notifyLostConnection_1('networkDisconnect', 'WS successfully reconnected but the user was already evicted due to timeout');\n                  } else {\n                    // If the life stored in the client is below the life stored in the server, it means that the Master Node has crashed\n                    notifyLostConnection_1('nodeCrashed', 'WS successfully reconnected to OpenVidu Server but your Master Node crashed');\n                  }\n                }\n              });\n            }\n          };\n          if (error.code === 40007 && error.message === 'reconnection error') {\n            // Kurento error: invalid RPC sessionId. This means that the kurento-jsonrpc-server of openvidu-server where kurento-jsonrpc-client\n            // is trying to reconnect does not know about this sessionId. This can mean two things:\n            // 1) openvidu-browser managed to reconnect after a while, but openvidu-server already evicted the user for not receiving ping.\n            // 2) openvidu-server process is a different one because of a node crash.\n            // Send a \"sessionStatus\" method to check the reason\n            console.error('Invalid RPC sessionId. Client network disconnection or Master Node crash');\n            rpcSessionStatus();\n          } else {\n            rpcSessionStatus();\n          }\n        }\n      } else {\n        _this.jsonRpcClient.resetPing();\n        _this.session.onRecoveredConnection();\n      }\n    });\n  };\n  OpenVidu.prototype.reconnectedCallback = function () {\n    logger.warn('Websocket reconnected');\n    if (this.isRoomAvailable()) {\n      if (!!this.session.connection) {\n        this.reconnectWebsocketThroughRpcConnectMethod(this.session.connection.rpcSessionId);\n      } else {\n        logger.warn('There was no previous connection when running reconnection callback');\n        // Make Session object dispatch 'sessionDisconnected' event\n        var sessionDisconnectEvent = new SessionDisconnectedEvent_1.SessionDisconnectedEvent(this.session, 'networkDisconnect');\n        this.session.ee.emitEvent('sessionDisconnected', [sessionDisconnectEvent]);\n        sessionDisconnectEvent.callDefaultBehavior();\n      }\n    } else {\n      alert('Connection error. Please reload page.');\n    }\n  };\n  OpenVidu.prototype.isMasterNodeCrashed = function () {\n    return this.masterNodeHasCrashed;\n  };\n  OpenVidu.prototype.isRoomAvailable = function () {\n    if (this.session !== undefined && this.session instanceof Session_1.Session) {\n      return true;\n    } else {\n      logger.warn('Session instance not found');\n      return false;\n    }\n  };\n  OpenVidu.prototype.isScreenShare = function (videoSource) {\n    return videoSource === 'screen' || videoSource === 'window' || platform.isElectron() && videoSource.startsWith('screen:');\n  };\n  return OpenVidu;\n}();\nexports.OpenVidu = OpenVidu;","map":{"version":3,"names":["LocalRecorder_1","require","Publisher_1","Session_1","SessionDisconnectedEvent_1","StreamPropertyChangedEvent_1","OpenViduError_1","VideoInsertMode_1","OpenViduLogger_1","Platform_1","screenSharingAuto","screenSharing","OpenViduLoggerConfiguration_1","EventEmitter","RpcBuilder","packageJson","logger","OpenViduLogger","getInstance","platform","OpenVidu","_this","masterNodeHasCrashed","publishers","secret","recorder","stt","life","advancedConfiguration","webrtcStatsInterval","sendBrowserLogs","OpenViduLoggerConfiguration","disabled","isAtLeastPro","isEnterprise","ee","PlatformUtils","libraryVersion","version","info","getDescription","isMobileDevice","isReactNative","onOrientationChanged","forEach","publisher","stream","isLocalStreamPublished","hasVideo","sendNewVideoDimensionsIfRequired","prototype","initSession","session","Session","initPublisher","targetElement","param2","param3","properties","audioSource","undefined","frameRate","MediaStreamTrack","videoSource","insertMode","VideoInsertMode","APPEND","mirror","publishAudio","publishVideo","resolution","videoSimulcast","filter","Publisher","completionHandler","initialize","then","emitEvent","catch","error","push","initPublisherAsync","Promise","resolve","reject","callback","initLocalRecorder","LocalRecorder","checkSystemRequirements","isIPhoneOrIPad","isIOSWithSafari","isChromeMobileBrowser","isFirefoxMobileBrowser","isOperaMobileBrowser","isEdgeMobileBrowser","isIonicIos","isChromeBrowser","isFirefoxBrowser","isOperaBrowser","isEdgeBrowser","isSamsungBrowser","isSafariBrowser","isAndroidBrowser","isElectron","isNodeJs","isMotorolaEdgeDevice","checkScreenSharingCapabilities","canScreenShare","getDevices","navigator","mediaDevices","enumerateDevices","deviceInfos","devices","isIonicAndroid","cordova","_a","plugins","EnumerateDevicesPlugin","getEnumerateDevices","pluginDevices","pluginAudioDevices","videoDevices","audioDevices","device","kind","deviceInfo","index","label","deviceId","defaultMatch","d","includes","wiredMatch","wirelessMatch","getUserMedia","options","askForAudioStreamOnly","previousMediaStream","constraints","__awaiter","definedAudioConstraint","audio","constraintsAux","video","audioOnlyStream","sent","addTrack","getAudioTracks","track","stop","getVideoTracks","generateAudioDeviceError","error_4","generateMediaConstraints","myConstraints","_c","videoTrack","audioTrack","_b","addAlreadyProvidedTracks","MediaStream","mustAskForAudioTrackLater","startsWith","mediaStream","errorName","OpenViduErrorName","SCREEN_CAPTURE_DENIED","errorMessage","error_1","toString","OpenViduError","error_2","DEVICE_ACCESS_DENIED","error_3","enableProdMode","setAdvancedConfiguration","configuration","handler","globalThis","addEventListener","reason","WAIT_INTERVAL","MAX_ATTEMPTS","attempts","oldWidth","videoDimensions","width","oldHeight","_d","height","repeatUntilChangeOrMaxAttempts","setInterval","clearTimeout","getVideoDimensions","newDimensions","sendVideoDimensionsChangedEvent","newWidth","newHeight","sendRequest","streamId","property","newValue","JSON","stringify","response","StreamPropertyChangedEvent","sendVideoData","sendTrackChangedEvent","oldLabel","newLabel","propertyType","oldValue","publisherProperties","NO_INPUT_SOURCE_SET","ideal","widthAndHeight","toLowerCase","split","idealWidth","Number","idealHeight","configureDeviceIdOrScreensharing","startWs","onConnectSucces","config","heartbeat","ws","uri","wsUri","sessionId","onconnected","ondisconnect","disconnectCallback","bind","onreconnecting","reconnectingCallback","onreconnected","reconnectedCallback","ismasternodecrashed","isMasterNodeCrashed","rpc","requestTimeout","heartbeatRequestTimeout","participantJoined","onParticipantJoined","participantPublished","onParticipantPublished","participantUnpublished","onParticipantUnpublished","participantLeft","onParticipantLeft","participantEvicted","onParticipantEvicted","recordingStarted","onRecordingStarted","recordingStopped","onRecordingStopped","broadcastStarted","onBroadcastStarted","broadcastStopped","onBroadcastStopped","sendMessage","onNewMessage","streamPropertyChanged","onStreamPropertyChanged","connectionPropertyChanged","onConnectionPropertyChanged","networkQualityLevelChanged","onNetworkQualityLevelChangedChanged","filterEventDispatched","onFilterEventDispatched","iceCandidate","recvIceCandidate","mediaError","onMediaError","masterNodeCrashedNotification","onMasterNodeCrashedNotification","forciblyReconnectSubscriber","onForciblyReconnectSubscriber","speechToTextMessage","onSpeechToTextMessage","speechToTextDisconnected","onSpeechToTextDisconnected","jsonRpcClient","clients","JsonRpcClient","console","onLostConnection","close","getWsReadyState","getReadyState","closeWs","method","params","Function","debug","send","getWsUri","getSecret","getRecorder","getStt","name","constructor","INPUT_AUDIO_DEVICE_NOT_FOUND","constraint","exact","PUBLISHER_PROPERTIES_ERROR","DEVICE_ALREADY_IN_USE","INPUT_AUDIO_DEVICE_GENERIC_ERROR","lastVideoTrackConstraints","getConstraints","isScreenShare","setVideoSource","SCREEN_SHARING_NOT_SUPPORTED","getName","getVersion","prefix","videoSourceString","electronScreenId","substr","indexOf","length","mandatory","chromeMediaSource","chromeMediaSourceId","screenShareChromeExtension","getScreenConstraints","screenConstraints","error_5","extensionId","pop","trim","getChromeExtensionStatus","status","error_6","SCREEN_EXTENSION_DISABLED","error_7","SCREEN_EXTENSION_NOT_INSTALLED","firefoxString","getScreenId","sourceId","extensionUrl","err","GENERIC_ERROR","warn","isRoomAvailable","alert","reconnectWebsocketThroughRpcConnectMethod","rpcSessionId","reconnect","notifyLostConnection_1","errorMsg","rpcSessionStatus","code","message","resetPing","onRecoveredConnection","connection","sessionDisconnectEvent","SessionDisconnectedEvent","callDefaultBehavior","exports"],"sources":["C:\\Users\\SSAFY\\Desktop\\catchpalm\\my-app\\node_modules\\openvidu-browser\\src\\OpenVidu\\OpenVidu.ts"],"sourcesContent":["/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { LocalRecorder } from './LocalRecorder';\nimport { Publisher } from './Publisher';\nimport { Session } from './Session';\nimport { Stream } from './Stream';\nimport { SessionDisconnectedEvent } from '../OpenViduInternal/Events/SessionDisconnectedEvent';\nimport { StreamPropertyChangedEvent } from '../OpenViduInternal/Events/StreamPropertyChangedEvent';\nimport { Device } from '../OpenViduInternal/Interfaces/Public/Device';\nimport { OpenViduAdvancedConfiguration } from '../OpenViduInternal/Interfaces/Public/OpenViduAdvancedConfiguration';\nimport { PublisherProperties } from '../OpenViduInternal/Interfaces/Public/PublisherProperties';\nimport { CustomMediaStreamConstraints } from '../OpenViduInternal/Interfaces/Private/CustomMediaStreamConstraints';\nimport { OpenViduError, OpenViduErrorName } from '../OpenViduInternal/Enums/OpenViduError';\nimport { VideoInsertMode } from '../OpenViduInternal/Enums/VideoInsertMode';\nimport { OpenViduLogger } from '../OpenViduInternal/Logger/OpenViduLogger';\nimport { PlatformUtils } from '../OpenViduInternal/Utils/Platform';\nimport { StreamPropertyChangedEventReason, ChangedPropertyType } from '../OpenViduInternal/Events/Types/Types';\n\nimport * as screenSharingAuto from '../OpenViduInternal/ScreenSharing/Screen-Capturing-Auto';\nimport * as screenSharing from '../OpenViduInternal/ScreenSharing/Screen-Capturing';\nimport { OpenViduLoggerConfiguration } from '../OpenViduInternal/Logger/OpenViduLoggerConfiguration';\n/**\n * @hidden\n */\nimport EventEmitter = require('wolfy87-eventemitter');\n/**\n * @hidden\n */\nimport RpcBuilder = require('../OpenViduInternal/KurentoUtils/kurento-jsonrpc');\n\n/**\n * @hidden\n */\nconst packageJson = require('../../package.json');\n/**\n * @hidden\n */\ndeclare var cordova: any;\n/**\n * @hidden\n */\nconst logger: OpenViduLogger = OpenViduLogger.getInstance();\n\n/**\n * @hidden\n */\nlet platform: PlatformUtils;\n\n/**\n * Entrypoint of OpenVidu Browser library.\n * Use it to initialize objects of type {@link Session}, {@link Publisher} and {@link LocalRecorder}\n */\nexport class OpenVidu {\n    private jsonRpcClient: any;\n    private masterNodeHasCrashed = false;\n\n    /**\n     * @hidden\n     */\n    session: Session;\n    /**\n     * @hidden\n     */\n    publishers: Publisher[] = [];\n    /**\n     * @hidden\n     */\n    wsUri: string;\n    /**\n     * @hidden\n     */\n    httpUri: string;\n    /**\n     * @hidden\n     */\n    secret = '';\n    /**\n     * @hidden\n     */\n    recorder = false;\n    /**\n     * @hidden\n     */\n    stt = false;\n    /**\n     * @hidden\n     */\n    iceServers: RTCIceServer[];\n    /**\n     * @hidden\n     */\n    role: string;\n    /**\n     * @hidden\n     */\n    finalUserId: string;\n    /**\n     * @hidden\n     */\n    mediaServer: string;\n    /**\n     * @hidden\n     */\n    videoSimulcast: boolean;\n    /**\n     * @hidden\n     */\n    life: number = -1;\n    /**\n     * @hidden\n     */\n    advancedConfiguration: OpenViduAdvancedConfiguration = {};\n    /**\n     * @hidden\n     */\n    webrtcStatsInterval: number = -1;\n    /**\n     * @hidden\n     */\n    sendBrowserLogs: OpenViduLoggerConfiguration = OpenViduLoggerConfiguration.disabled;\n    /**\n     * @hidden\n     */\n    isAtLeastPro: boolean = false;\n    /**\n     * @hidden\n     */\n    isEnterprise: boolean = false;\n    /**\n     * @hidden\n     */\n    libraryVersion: string;\n    /**\n     * @hidden\n     */\n    ee = new EventEmitter();\n\n    constructor() {\n        platform = PlatformUtils.getInstance();\n        this.libraryVersion = packageJson.version;\n        logger.info('OpenVidu initialized');\n        logger.info('Platform detected: ' + platform.getDescription());\n        logger.info('openvidu-browser version: ' + this.libraryVersion);\n\n        if (platform.isMobileDevice() || platform.isReactNative()) {\n            // Listen to orientationchange only on mobile devices\n            this.onOrientationChanged(() => {\n                this.publishers.forEach((publisher) => {\n                    if (publisher.stream.isLocalStreamPublished && !!publisher.stream && !!publisher.stream.hasVideo) {\n                        this.sendNewVideoDimensionsIfRequired(publisher, 'deviceRotated', 75, 10);\n                    }\n                });\n            });\n        }\n    }\n\n    /**\n     * Returns new session\n     */\n    initSession(): Session {\n        this.session = new Session(this);\n        return this.session;\n    }\n\n    initPublisher(targetElement: string | HTMLElement | undefined): Publisher;\n    initPublisher(targetElement: string | HTMLElement | undefined, properties: PublisherProperties): Publisher;\n    initPublisher(targetElement: string | HTMLElement | undefined, completionHandler: (error: Error | undefined) => void): Publisher;\n    initPublisher(\n        targetElement: string | HTMLElement | undefined,\n        properties: PublisherProperties,\n        completionHandler: (error: Error | undefined) => void\n    ): Publisher;\n\n    /**\n     * Returns a new publisher\n     *\n     * #### Events dispatched\n     *\n     * The {@link Publisher} object will dispatch an `accessDialogOpened` event, only if the pop-up shown by the browser to request permissions for the camera is opened. You can use this event to alert the user about granting permissions\n     * for your website. An `accessDialogClosed` event will also be dispatched after user clicks on \"Allow\" or \"Block\" in the pop-up.\n     *\n     * The {@link Publisher} object will dispatch an `accessAllowed` or `accessDenied` event once it has been granted access to the requested input devices or not.\n     *\n     * The {@link Publisher} object will dispatch a `videoElementCreated` event once a HTML video element has been added to DOM (only if you\n     * [let OpenVidu take care of the video players](/en/stable/cheatsheet/manage-videos/#let-openvidu-take-care-of-the-video-players)). See {@link VideoElementEvent} to learn more.\n     *\n     * The {@link Publisher} object will dispatch a `streamPlaying` event once the local streams starts playing. See {@link StreamManagerEvent} to learn more.\n     *\n     * @param targetElement  HTML DOM element (or its `id` attribute) in which the video element of the Publisher will be inserted (see {@link PublisherProperties.insertMode}). If *null* or *undefined* no default video will be created for this Publisher.\n     * You can always call method {@link Publisher.addVideoElement} or {@link Publisher.createVideoElement} to manage the video elements on your own (see [Manage video players](/en/stable/cheatsheet/manage-videos) section)\n     * @param completionHandler `error` parameter is null if `initPublisher` succeeds, and is defined if it fails.\n     *                          `completionHandler` function is called before the Publisher dispatches an `accessAllowed` or an `accessDenied` event\n     */\n    initPublisher(targetElement: string | HTMLElement | undefined, param2?, param3?): Publisher {\n        let properties: PublisherProperties;\n\n        if (!!param2 && typeof param2 !== 'function') {\n            // Matches 'initPublisher(targetElement, properties)' or 'initPublisher(targetElement, properties, completionHandler)'\n\n            properties = <PublisherProperties>param2;\n\n            properties = {\n                audioSource: typeof properties.audioSource !== 'undefined' ? properties.audioSource : undefined,\n                frameRate:\n                    typeof MediaStreamTrack !== 'undefined' && properties.videoSource instanceof MediaStreamTrack\n                        ? undefined\n                        : typeof properties.frameRate !== 'undefined'\n                            ? properties.frameRate\n                            : undefined,\n                insertMode:\n                    typeof properties.insertMode !== 'undefined'\n                        ? typeof properties.insertMode === 'string'\n                            ? VideoInsertMode[properties.insertMode]\n                            : properties.insertMode\n                        : VideoInsertMode.APPEND,\n                mirror: typeof properties.mirror !== 'undefined' ? properties.mirror : true,\n                publishAudio: typeof properties.publishAudio !== 'undefined' ? properties.publishAudio : true,\n                publishVideo: typeof properties.publishVideo !== 'undefined' ? properties.publishVideo : true,\n                resolution:\n                    typeof MediaStreamTrack !== 'undefined' && properties.videoSource instanceof MediaStreamTrack\n                        ? undefined\n                        : typeof properties.resolution !== 'undefined'\n                            ? properties.resolution\n                            : '640x480',\n                videoSource: typeof properties.videoSource !== 'undefined' ? properties.videoSource : undefined,\n                videoSimulcast: properties.videoSimulcast,\n                filter: properties.filter\n            };\n        } else {\n            // Matches 'initPublisher(targetElement)' or 'initPublisher(targetElement, completionHandler)'\n\n            properties = {\n                insertMode: VideoInsertMode.APPEND,\n                mirror: true,\n                publishAudio: true,\n                publishVideo: true,\n                resolution: '640x480'\n            };\n        }\n\n        const publisher: Publisher = new Publisher(targetElement, properties, this);\n\n        let completionHandler: (error: Error | undefined) => void;\n        if (!!param2 && typeof param2 === 'function') {\n            completionHandler = param2;\n        } else if (!!param3) {\n            completionHandler = param3;\n        }\n\n        publisher\n            .initialize()\n            .then(() => {\n                if (completionHandler !== undefined) {\n                    completionHandler(undefined);\n                }\n                publisher.emitEvent('accessAllowed', []);\n            })\n            .catch((error) => {\n                if (completionHandler !== undefined) {\n                    completionHandler(error);\n                }\n                publisher.emitEvent('accessDenied', [error]);\n            });\n\n        this.publishers.push(publisher);\n        return publisher;\n    }\n\n    /**\n     * Promisified version of {@link OpenVidu.initPublisher}\n     *\n     * > WARNING: events `accessDialogOpened` and `accessDialogClosed` will not be dispatched if using this method instead of {@link OpenVidu.initPublisher}\n     */\n    initPublisherAsync(targetElement: string | HTMLElement | undefined): Promise<Publisher>;\n    initPublisherAsync(targetElement: string | HTMLElement | undefined, properties: PublisherProperties): Promise<Publisher>;\n\n    initPublisherAsync(targetElement: string | HTMLElement | undefined, properties?: PublisherProperties): Promise<Publisher> {\n        return new Promise<Publisher>((resolve, reject) => {\n            let publisher: Publisher;\n\n            const callback = (error: Error) => {\n                if (!!error) {\n                    return reject(error);\n                } else {\n                    return resolve(publisher);\n                }\n            };\n\n            if (!!properties) {\n                publisher = this.initPublisher(targetElement, properties, callback);\n            } else {\n                publisher = this.initPublisher(targetElement, callback);\n            }\n        });\n    }\n\n    /**\n     * Returns a new local recorder for recording streams straight away from the browser\n     * @param stream  Stream to record\n     */\n    initLocalRecorder(stream: Stream): LocalRecorder {\n        return new LocalRecorder(stream);\n    }\n\n    /**\n     * Checks if the browser supports OpenVidu\n     * @returns 1 if the browser supports OpenVidu, 0 otherwise\n     */\n    checkSystemRequirements(): boolean {\n        // Specific iOS platform support (iPhone, iPad)\n        if (platform.isIPhoneOrIPad()) {\n            return (\n                platform.isIOSWithSafari() ||\n                platform.isChromeMobileBrowser() ||\n                platform.isFirefoxMobileBrowser() ||\n                platform.isOperaMobileBrowser() ||\n                platform.isEdgeMobileBrowser() ||\n                platform.isIonicIos() // Ionic apps for iOS\n            );\n        }\n\n        // General platform support for web clients (Desktop, Mobile)\n        return (\n            platform.isChromeBrowser() ||\n            platform.isChromeMobileBrowser() ||\n            platform.isFirefoxBrowser() ||\n            platform.isFirefoxMobileBrowser() ||\n            platform.isOperaBrowser() ||\n            platform.isOperaMobileBrowser() ||\n            platform.isEdgeBrowser() ||\n            platform.isEdgeMobileBrowser() ||\n            platform.isSamsungBrowser() ||\n            platform.isSafariBrowser() ||\n            platform.isAndroidBrowser() || // Android WebView & Ionic apps for Android\n            platform.isElectron() ||\n            platform.isNodeJs() ||\n            // TODO: remove when updating platform detection library\n            platform.isMotorolaEdgeDevice()\n        );\n    }\n\n    /**\n     * Checks if the browser supports screen-sharing. Desktop Chrome, Firefox and Opera support screen-sharing\n     * @returns 1 if the browser supports screen-sharing, 0 otherwise\n     */\n    checkScreenSharingCapabilities(): boolean {\n        return platform.canScreenShare();\n    }\n\n    /**\n     * Collects information about the media input devices available on the system. You can pass property `deviceId` of a {@link Device} object as value of `audioSource` or `videoSource` properties in {@link initPublisher} method\n     */\n    getDevices(): Promise<Device[]> {\n        return new Promise<Device[]>((resolve, reject) => {\n            navigator.mediaDevices\n                .enumerateDevices()\n                .then((deviceInfos) => {\n                    const devices: Device[] = [];\n\n                    // Ionic Android  devices\n                    if (platform.isIonicAndroid() && typeof cordova != 'undefined' && cordova?.plugins?.EnumerateDevicesPlugin) {\n                        cordova.plugins.EnumerateDevicesPlugin.getEnumerateDevices().then((pluginDevices: Device[]) => {\n                            let pluginAudioDevices: Device[] = [];\n                            let videoDevices: Device[] = [];\n                            let audioDevices: Device[] = [];\n                            pluginAudioDevices = pluginDevices.filter((device: Device) => device.kind === 'audioinput');\n                            videoDevices = deviceInfos.filter((device: MediaDeviceInfo) => device.kind === 'videoinput') as any;\n                            audioDevices = deviceInfos.filter((device: MediaDeviceInfo) => device.kind === 'audioinput') as any;\n                            videoDevices.forEach((deviceInfo, index) => {\n                                if (!deviceInfo.label) {\n                                    let label = '';\n                                    if (index === 0) {\n                                        label = 'Front Camera';\n                                    } else if (index === 1) {\n                                        label = 'Back Camera';\n                                    } else {\n                                        label = 'Unknown Camera';\n                                    }\n                                    devices.push({\n                                        kind: deviceInfo.kind,\n                                        deviceId: deviceInfo.deviceId,\n                                        label: label\n                                    });\n                                } else {\n                                    devices.push({\n                                        kind: deviceInfo.kind,\n                                        deviceId: deviceInfo.deviceId,\n                                        label: deviceInfo.label\n                                    });\n                                }\n                            });\n                            audioDevices.forEach((deviceInfo, index) => {\n                                if (!deviceInfo.label) {\n                                    let label = '';\n                                    switch (index) {\n                                        case 0: // Default Microphone\n                                            label = 'Default';\n                                            break;\n                                        case 1: // Microphone + Speakerphone\n                                            const defaultMatch = pluginAudioDevices.filter((d) => d.label.includes('Built'))[0];\n                                            label = defaultMatch ? defaultMatch.label : 'Built-in Microphone';\n                                            break;\n                                        case 2: // Headset Microphone\n                                            const wiredMatch = pluginAudioDevices.filter((d) => d.label.includes('Wired'))[0];\n                                            if (wiredMatch) {\n                                                label = wiredMatch.label;\n                                            } else {\n                                                label = 'Headset earpiece';\n                                            }\n                                            break;\n                                        case 3:\n                                            const wirelessMatch = pluginAudioDevices.filter((d) => d.label.includes('Bluetooth'))[0];\n                                            label = wirelessMatch ? wirelessMatch.label : 'Wireless';\n                                            break;\n                                        default:\n                                            label = 'Unknown Microphone';\n                                            break;\n                                    }\n                                    devices.push({\n                                        kind: deviceInfo.kind,\n                                        deviceId: deviceInfo.deviceId,\n                                        label: label\n                                    });\n                                } else {\n                                    devices.push({\n                                        kind: deviceInfo.kind,\n                                        deviceId: deviceInfo.deviceId,\n                                        label: deviceInfo.label\n                                    });\n                                }\n                            });\n                            return resolve(devices);\n                        });\n                    } else {\n                        // Rest of platforms\n                        deviceInfos.forEach((deviceInfo) => {\n                            if (deviceInfo.kind === 'audioinput' || deviceInfo.kind === 'videoinput') {\n                                devices.push({\n                                    kind: deviceInfo.kind,\n                                    deviceId: deviceInfo.deviceId,\n                                    label: deviceInfo.label\n                                });\n                            }\n                        });\n                        return resolve(devices);\n                    }\n                })\n                .catch((error) => {\n                    logger.error('Error getting devices', error);\n                    return reject(error);\n                });\n        });\n    }\n\n    /**\n     * Get a MediaStream object that you can customize before calling {@link initPublisher} (pass _MediaStreamTrack_ property of the _MediaStream_ value resolved by the Promise as `audioSource` or `videoSource` properties in {@link initPublisher})\n     *\n     * Parameter `options` is the same as in {@link initPublisher} second parameter (of type {@link PublisherProperties}), but only the following properties will be applied: `audioSource`, `videoSource`, `frameRate`, `resolution`\n     *\n     * To customize the Publisher's video, the API for HTMLCanvasElement is very useful. For example, to get a black-and-white video at 10 fps and HD resolution with no sound:\n     * ```\n     * var OV = new OpenVidu();\n     * var FRAME_RATE = 10;\n     *\n     * OV.getUserMedia({\n     *    audioSource: false,\n     *    videoSource: undefined,\n     *    resolution: '1280x720',\n     *    frameRate: FRAME_RATE\n     * })\n     * .then(mediaStream => {\n     *\n     *    var videoTrack = mediaStream.getVideoTracks()[0];\n     *    var video = document.createElement('video');\n     *    video.srcObject = new MediaStream([videoTrack]);\n     *\n     *    var canvas = document.createElement('canvas');\n     *    var ctx = canvas.getContext('2d');\n     *    ctx.filter = 'grayscale(100%)';\n     *\n     *    video.addEventListener('play', () => {\n     *      var loop = () => {\n     *        if (!video.paused && !video.ended) {\n     *          ctx.drawImage(video, 0, 0, 300, 170);\n     *          setTimeout(loop, 1000/ FRAME_RATE); // Drawing at 10 fps\n     *        }\n     *      };\n     *      loop();\n     *    });\n     *    video.play();\n     *\n     *    var grayVideoTrack = canvas.captureStream(FRAME_RATE).getVideoTracks()[0];\n     *    var publisher = this.OV.initPublisher(\n     *      myHtmlTarget,\n     *      {\n     *        audioSource: false,\n     *        videoSource: grayVideoTrack\n     *      });\n     * });\n     * ```\n     */\n    async getUserMedia(options: PublisherProperties): Promise<MediaStream> {\n        const askForAudioStreamOnly = async (previousMediaStream: MediaStream, constraints: MediaStreamConstraints) => {\n            const definedAudioConstraint = constraints.audio === undefined ? true : constraints.audio;\n            const constraintsAux: MediaStreamConstraints = { audio: definedAudioConstraint, video: false };\n            try {\n                const audioOnlyStream = await navigator.mediaDevices.getUserMedia(constraintsAux);\n                previousMediaStream.addTrack(audioOnlyStream.getAudioTracks()[0]);\n                return previousMediaStream;\n            } catch (error) {\n                previousMediaStream.getAudioTracks().forEach((track) => {\n                    track.stop();\n                });\n                previousMediaStream.getVideoTracks().forEach((track) => {\n                    track.stop();\n                });\n                throw this.generateAudioDeviceError(error, constraintsAux);\n            }\n        };\n\n        try {\n            const myConstraints = await this.generateMediaConstraints(options);\n            if (\n                (!!myConstraints.videoTrack && !!myConstraints.audioTrack) ||\n                (!!myConstraints.audioTrack && myConstraints.constraints?.video === false) ||\n                (!!myConstraints.videoTrack && myConstraints.constraints?.audio === false)\n            ) {\n                // No need to call getUserMedia at all. Both tracks provided, or only AUDIO track provided or only VIDEO track provided\n                return this.addAlreadyProvidedTracks(myConstraints, new MediaStream());\n            } else {\n                // getUserMedia must be called. AUDIO or VIDEO are requesting a new track\n\n                // Delete already provided constraints for audio or video\n                if (!!myConstraints.videoTrack) {\n                    delete myConstraints.constraints!.video;\n                }\n                if (!!myConstraints.audioTrack) {\n                    delete myConstraints.constraints!.audio;\n                }\n\n                let mustAskForAudioTrackLater = false;\n                if (typeof options.videoSource === 'string') {\n                    // Video is deviceId or screen sharing\n                    if (\n                        options.videoSource === 'screen' ||\n                        options.videoSource === 'window' ||\n                        (platform.isElectron() && options.videoSource.startsWith('screen:'))\n                    ) {\n                        // Video is screen sharing\n                        mustAskForAudioTrackLater =\n                            !myConstraints.audioTrack && options.audioSource !== null && options.audioSource !== false;\n                        if (navigator.mediaDevices['getDisplayMedia'] && !platform.isElectron()) {\n                            // getDisplayMedia supported\n                            try {\n                                const mediaStream = await navigator.mediaDevices['getDisplayMedia']({ video: true });\n                                this.addAlreadyProvidedTracks(myConstraints, mediaStream);\n                                if (mustAskForAudioTrackLater) {\n                                    return await askForAudioStreamOnly(mediaStream, <MediaStreamConstraints>myConstraints.constraints);\n                                } else {\n                                    return mediaStream;\n                                }\n                            } catch (error) {\n                                let errorName: OpenViduErrorName = OpenViduErrorName.SCREEN_CAPTURE_DENIED;\n                                const errorMessage = error.toString();\n                                throw new OpenViduError(errorName, errorMessage);\n                            }\n                        } else {\n                            // getDisplayMedia NOT supported. Can perform getUserMedia below with already calculated constraints\n                        }\n                    } else {\n                        // Video is deviceId. Can perform getUserMedia below with already calculated constraints\n                    }\n                }\n                // Use already calculated constraints\n                const constraintsAux = mustAskForAudioTrackLater\n                    ? { video: myConstraints.constraints!.video }\n                    : myConstraints.constraints;\n                try {\n                    const mediaStream = await navigator.mediaDevices.getUserMedia(constraintsAux);\n                    this.addAlreadyProvidedTracks(myConstraints, mediaStream);\n                    if (mustAskForAudioTrackLater) {\n                        return await askForAudioStreamOnly(mediaStream, <MediaStreamConstraints>myConstraints.constraints);\n                    } else {\n                        return mediaStream;\n                    }\n                } catch (error) {\n                    let errorName: OpenViduErrorName;\n                    const errorMessage = error.toString();\n                    if (!(options.videoSource === 'screen')) {\n                        errorName = OpenViduErrorName.DEVICE_ACCESS_DENIED;\n                    } else {\n                        errorName = OpenViduErrorName.SCREEN_CAPTURE_DENIED;\n                    }\n                    throw new OpenViduError(errorName, errorMessage);\n                }\n            }\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /* tslint:disable:no-empty */\n    /**\n     * Disable all logging except error level\n     */\n    enableProdMode(): void {\n        logger.enableProdMode();\n    }\n    /* tslint:enable:no-empty */\n\n    /**\n     * Set OpenVidu advanced configuration options. `configuration` is an object of type {@link OpenViduAdvancedConfiguration}. Call this method to override previous values at any moment.\n     */\n    setAdvancedConfiguration(configuration: OpenViduAdvancedConfiguration): void {\n        this.advancedConfiguration = configuration;\n    }\n\n    /* Hidden methods */\n\n    /**\n     * @hidden\n     */\n    onOrientationChanged(handler): void {\n        (globalThis as any).addEventListener('orientationchange', handler);\n    }\n\n    /**\n     * @hidden\n     */\n    sendNewVideoDimensionsIfRequired(publisher: Publisher, reason: StreamPropertyChangedEventReason, WAIT_INTERVAL: number, MAX_ATTEMPTS: number) {\n        let attempts = 0;\n        const oldWidth = publisher?.stream?.videoDimensions?.width || 0;\n        const oldHeight = publisher?.stream?.videoDimensions?.height || 0;\n\n        const repeatUntilChangeOrMaxAttempts: NodeJS.Timeout = setInterval(() => {\n            attempts++;\n            if (attempts > MAX_ATTEMPTS) {\n                clearTimeout(repeatUntilChangeOrMaxAttempts);\n            }\n            publisher.getVideoDimensions().then((newDimensions) => {\n                if (newDimensions.width !== oldWidth || newDimensions.height !== oldHeight) {\n                    clearTimeout(repeatUntilChangeOrMaxAttempts);\n                    this.sendVideoDimensionsChangedEvent(publisher, reason, oldWidth, oldHeight, newDimensions.width, newDimensions.height);\n                }\n            });\n        }, WAIT_INTERVAL);\n    }\n\n    /**\n     * @hidden\n     */\n    sendVideoDimensionsChangedEvent(\n        publisher: Publisher,\n        reason: StreamPropertyChangedEventReason,\n        oldWidth: number,\n        oldHeight: number,\n        newWidth: number,\n        newHeight: number\n    ) {\n        publisher.stream.videoDimensions = {\n            width: newWidth || 0,\n            height: newHeight || 0\n        };\n        this.sendRequest(\n            'streamPropertyChanged',\n            {\n                streamId: publisher.stream.streamId,\n                property: 'videoDimensions',\n                newValue: JSON.stringify(publisher.stream.videoDimensions),\n                reason\n            },\n            (error, response) => {\n                if (error) {\n                    logger.error(\"Error sending 'streamPropertyChanged' event\", error);\n                } else {\n                    this.session.emitEvent('streamPropertyChanged', [\n                        new StreamPropertyChangedEvent(\n                            this.session,\n                            publisher.stream,\n                            'videoDimensions',\n                            publisher.stream.videoDimensions,\n                            { width: oldWidth, height: oldHeight },\n                            reason\n                        )\n                    ]);\n                    publisher.emitEvent('streamPropertyChanged', [\n                        new StreamPropertyChangedEvent(\n                            publisher,\n                            publisher.stream,\n                            'videoDimensions',\n                            publisher.stream.videoDimensions,\n                            { width: oldWidth, height: oldHeight },\n                            reason\n                        )\n                    ]);\n                    this.session.sendVideoData(publisher);\n                }\n            }\n        );\n    }\n\n    /**\n     * @hidden\n     */\n    sendTrackChangedEvent(publisher: Publisher, oldLabel: string, newLabel: string, propertyType: ChangedPropertyType) {\n        const oldValue = { label: oldLabel };\n        const newValue = { label: newLabel };\n        const reason = 'trackReplaced';\n\n        if (publisher.stream.isLocalStreamPublished) {\n            this.sendRequest(\n                'streamPropertyChanged',\n                {\n                    streamId: publisher.stream.streamId,\n                    property: propertyType,\n                    newValue: newValue,\n                    reason\n                },\n                (error, response) => {\n                    if (error) {\n                        logger.error(\"Error sending 'streamPropertyChanged' event\", error);\n                    } else {\n                        this.session.emitEvent('streamPropertyChanged', [\n                            new StreamPropertyChangedEvent(this.session, publisher.stream, propertyType, newValue, oldValue, reason)\n                        ]);\n                        publisher.emitEvent('streamPropertyChanged', [\n                            new StreamPropertyChangedEvent(publisher, publisher.stream, propertyType, newValue, oldValue, reason)\n                        ]);\n                    }\n                }\n            );\n        } else {\n            this.session.emitEvent('streamPropertyChanged', [\n                new StreamPropertyChangedEvent(this.session, publisher.stream, propertyType, newValue, oldValue, reason)\n            ]);\n            publisher.emitEvent('streamPropertyChanged', [\n                new StreamPropertyChangedEvent(publisher, publisher.stream, propertyType, newValue, oldValue, reason)\n            ]);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    generateMediaConstraints(publisherProperties: PublisherProperties): Promise<CustomMediaStreamConstraints> {\n        return new Promise<CustomMediaStreamConstraints>((resolve, reject) => {\n            const myConstraints: CustomMediaStreamConstraints = {\n                audioTrack: undefined,\n                videoTrack: undefined,\n                constraints: {\n                    audio: undefined,\n                    video: undefined\n                }\n            };\n            const audioSource = publisherProperties.audioSource;\n            const videoSource = publisherProperties.videoSource;\n\n            // CASE 1: null/false\n            if (audioSource === null || audioSource === false) {\n                // No audio track\n                myConstraints.constraints!.audio = false;\n            }\n            if (videoSource === null || videoSource === false) {\n                // No video track\n                myConstraints.constraints!.video = false;\n            }\n            if (myConstraints.constraints!.audio === false && myConstraints.constraints!.video === false) {\n                // ERROR! audioSource and videoSource cannot be both false at the same time\n                return reject(\n                    new OpenViduError(\n                        OpenViduErrorName.NO_INPUT_SOURCE_SET,\n                        \"Properties 'audioSource' and 'videoSource' cannot be set to false or null at the same time\"\n                    )\n                );\n            }\n\n            // CASE 2: MediaStreamTracks\n            if (typeof MediaStreamTrack !== 'undefined' && audioSource instanceof MediaStreamTrack) {\n                // Already provided audio track\n                myConstraints.audioTrack = audioSource;\n            }\n            if (typeof MediaStreamTrack !== 'undefined' && videoSource instanceof MediaStreamTrack) {\n                // Already provided video track\n                myConstraints.videoTrack = videoSource;\n            }\n\n            // CASE 3: Default tracks\n            if (audioSource === undefined) {\n                myConstraints.constraints!.audio = true;\n            }\n            if (videoSource === undefined) {\n                myConstraints.constraints!.video = {\n                    width: {\n                        ideal: 640\n                    },\n                    height: {\n                        ideal: 480\n                    }\n                };\n            }\n\n            // CASE 3.5: give values to resolution and frameRate if video not null/false\n            if (videoSource !== null && videoSource !== false) {\n                if (!!publisherProperties.resolution) {\n                    const widthAndHeight = publisherProperties.resolution.toLowerCase().split('x');\n                    const idealWidth = Number(widthAndHeight[0]);\n                    const idealHeight = Number(widthAndHeight[1]);\n                    myConstraints.constraints!.video = {\n                        width: {\n                            ideal: idealWidth\n                        },\n                        height: {\n                            ideal: idealHeight\n                        }\n                    };\n                }\n                if (!!publisherProperties.frameRate) {\n                    (<MediaTrackConstraints>myConstraints.constraints!.video).frameRate = { ideal: publisherProperties.frameRate };\n                }\n            }\n\n            // CASE 4: deviceId or screen sharing\n            this.configureDeviceIdOrScreensharing(myConstraints, publisherProperties, resolve, reject);\n\n            return resolve(myConstraints);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    startWs(onConnectSucces: (error: Error) => void): void {\n        const config = {\n            heartbeat: 5000,\n            ws: {\n                uri: this.wsUri + '?sessionId=' + this.session.sessionId,\n                onconnected: onConnectSucces,\n                ondisconnect: this.disconnectCallback.bind(this),\n                onreconnecting: this.reconnectingCallback.bind(this),\n                onreconnected: this.reconnectedCallback.bind(this),\n                ismasternodecrashed: this.isMasterNodeCrashed.bind(this)\n            },\n            rpc: {\n                requestTimeout: 10000,\n                heartbeatRequestTimeout: 5000,\n                participantJoined: this.session.onParticipantJoined.bind(this.session),\n                participantPublished: this.session.onParticipantPublished.bind(this.session),\n                participantUnpublished: this.session.onParticipantUnpublished.bind(this.session),\n                participantLeft: this.session.onParticipantLeft.bind(this.session),\n                participantEvicted: this.session.onParticipantEvicted.bind(this.session),\n                recordingStarted: this.session.onRecordingStarted.bind(this.session),\n                recordingStopped: this.session.onRecordingStopped.bind(this.session),\n                broadcastStarted: this.session.onBroadcastStarted.bind(this.session),\n                broadcastStopped: this.session.onBroadcastStopped.bind(this.session),\n                sendMessage: this.session.onNewMessage.bind(this.session),\n                streamPropertyChanged: this.session.onStreamPropertyChanged.bind(this.session),\n                connectionPropertyChanged: this.session.onConnectionPropertyChanged.bind(this.session),\n                networkQualityLevelChanged: this.session.onNetworkQualityLevelChangedChanged.bind(this.session),\n                filterEventDispatched: this.session.onFilterEventDispatched.bind(this.session),\n                iceCandidate: this.session.recvIceCandidate.bind(this.session),\n                mediaError: this.session.onMediaError.bind(this.session),\n                masterNodeCrashedNotification: this.onMasterNodeCrashedNotification.bind(this),\n                forciblyReconnectSubscriber: this.session.onForciblyReconnectSubscriber.bind(this.session),\n                speechToTextMessage: this.session.onSpeechToTextMessage.bind(this.session),\n                speechToTextDisconnected: this.session.onSpeechToTextDisconnected.bind(this.session)\n            }\n        };\n        this.jsonRpcClient = new RpcBuilder.clients.JsonRpcClient(config);\n    }\n\n    /**\n     * @hidden\n     */\n    onMasterNodeCrashedNotification(response): void {\n        console.error('Master Node has crashed');\n        this.masterNodeHasCrashed = true;\n        this.session.onLostConnection('nodeCrashed');\n        this.jsonRpcClient.close(4103, 'Master Node has crashed');\n    }\n\n    /**\n     * @hidden\n     */\n    getWsReadyState(): number {\n        return this.jsonRpcClient.getReadyState();\n    }\n\n    /**\n     * @hidden\n     */\n    closeWs(): void {\n        this.jsonRpcClient.close(4102, 'Connection closed by client');\n    }\n\n    /**\n     * @hidden\n     */\n    sendRequest(method: string, params: any, callback?): void {\n        if (params && params instanceof Function) {\n            callback = params;\n            params = {};\n        }\n        logger.debug('Sending request: {method:\"' + method + '\", params: ' + JSON.stringify(params) + '}');\n        this.jsonRpcClient?.send(method, params, callback);\n    }\n\n    /**\n     * @hidden\n     */\n    getWsUri(): string {\n        return this.wsUri;\n    }\n\n    /**\n     * @hidden\n     */\n    getSecret(): string {\n        return this.secret;\n    }\n\n    /**\n     * @hidden\n     */\n    getRecorder(): boolean {\n        return this.recorder;\n    }\n\n    /**\n     * @hidden\n     */\n    getStt(): boolean {\n        return this.stt;\n    }\n\n    /**\n     * @hidden\n     */\n    generateAudioDeviceError(error, constraints: MediaStreamConstraints): OpenViduError {\n        if (error.name === 'Error') {\n            // Safari OverConstrainedError has as name property 'Error' instead of 'OverConstrainedError'\n            error.name = error.constructor.name;\n        }\n        let errorName, errorMessage: string;\n        switch (error.name.toLowerCase()) {\n            case 'notfounderror':\n                errorName = OpenViduErrorName.INPUT_AUDIO_DEVICE_NOT_FOUND;\n                errorMessage = error.toString();\n                return new OpenViduError(errorName, errorMessage);\n            case 'notallowederror':\n                errorName = OpenViduErrorName.DEVICE_ACCESS_DENIED;\n                errorMessage = error.toString();\n                return new OpenViduError(errorName, errorMessage);\n            case 'overconstrainederror':\n                if (error.constraint.toLowerCase() === 'deviceid') {\n                    errorName = OpenViduErrorName.INPUT_AUDIO_DEVICE_NOT_FOUND;\n                    errorMessage =\n                        \"Audio input device with deviceId '\" +\n                        (<ConstrainDOMStringParameters>(<MediaTrackConstraints>constraints.audio).deviceId!!).exact +\n                        \"' not found\";\n                } else {\n                    errorName = OpenViduErrorName.PUBLISHER_PROPERTIES_ERROR;\n                    errorMessage = \"Audio input device doesn't support the value passed for constraint '\" + error.constraint + \"'\";\n                }\n                return new OpenViduError(errorName, errorMessage);\n            case 'notreadableerror':\n                errorName = OpenViduErrorName.DEVICE_ALREADY_IN_USE;\n                errorMessage = error.toString();\n                return new OpenViduError(errorName, errorMessage);\n            default:\n                return new OpenViduError(OpenViduErrorName.INPUT_AUDIO_DEVICE_GENERIC_ERROR, error.toString());\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    addAlreadyProvidedTracks(myConstraints: CustomMediaStreamConstraints, mediaStream: MediaStream, stream?: Stream): MediaStream {\n        if (!!myConstraints.videoTrack) {\n            mediaStream.addTrack(myConstraints.videoTrack);\n            if (!!stream) {\n                if (!!myConstraints.constraints.video) {\n                    stream.lastVideoTrackConstraints = myConstraints.constraints.video;\n                } else {\n                    stream.lastVideoTrackConstraints = myConstraints.videoTrack.getConstraints();\n                }\n            }\n        }\n        if (!!myConstraints.audioTrack) {\n            mediaStream.addTrack(myConstraints.audioTrack);\n        }\n        return mediaStream;\n    }\n\n    /**\n     * @hidden\n     */\n    protected configureDeviceIdOrScreensharing(\n        myConstraints: CustomMediaStreamConstraints,\n        publisherProperties: PublisherProperties,\n        resolve,\n        reject\n    ) {\n        const audioSource = publisherProperties.audioSource;\n        const videoSource = publisherProperties.videoSource;\n        if (typeof audioSource === 'string') {\n            myConstraints.constraints!.audio = { deviceId: { exact: audioSource } };\n        }\n\n        if (typeof videoSource === 'string') {\n            if (!this.isScreenShare(videoSource)) {\n                this.setVideoSource(myConstraints, videoSource);\n            } else {\n                // Screen sharing\n\n                if (!this.checkScreenSharingCapabilities()) {\n                    const error = new OpenViduError(\n                        OpenViduErrorName.SCREEN_SHARING_NOT_SUPPORTED,\n                        'You can only screen share in desktop Chrome, Firefox, Opera, Safari (>=13.0), Edge (>= 80) or Electron. Detected client: ' +\n                        platform.getName() +\n                        ' ' +\n                        platform.getVersion()\n                    );\n                    logger.error(error);\n                    return reject(error);\n                } else {\n                    if (platform.isElectron()) {\n                        const prefix = 'screen:';\n                        const videoSourceString: string = videoSource;\n                        const electronScreenId = videoSourceString.substr(videoSourceString.indexOf(prefix) + prefix.length);\n                        (<any>myConstraints.constraints!.video) = {\n                            mandatory: {\n                                chromeMediaSource: 'desktop',\n                                chromeMediaSourceId: electronScreenId\n                            }\n                        };\n                        return resolve(myConstraints);\n                    } else {\n                        if (\n                            !!this.advancedConfiguration.screenShareChromeExtension &&\n                            !(platform.isFirefoxBrowser() || platform.isFirefoxMobileBrowser()) &&\n                            !navigator.mediaDevices['getDisplayMedia']\n                        ) {\n                            // Custom screen sharing extension for Chrome (and Opera) and no support for MediaDevices.getDisplayMedia()\n\n                            screenSharing.getScreenConstraints((error, screenConstraints) => {\n                                if (\n                                    !!error ||\n                                    (!!screenConstraints.mandatory && screenConstraints.mandatory.chromeMediaSource === 'screen')\n                                ) {\n                                    if (error === 'permission-denied' || error === 'PermissionDeniedError') {\n                                        const error = new OpenViduError(\n                                            OpenViduErrorName.SCREEN_CAPTURE_DENIED,\n                                            'You must allow access to one window of your desktop'\n                                        );\n                                        logger.error(error);\n                                        return reject(error);\n                                    } else {\n                                        const extensionId = this.advancedConfiguration\n                                            .screenShareChromeExtension!.split('/')\n                                            .pop()!!\n                                            .trim();\n                                        screenSharing.getChromeExtensionStatus(extensionId, (status) => {\n                                            if (status === 'installed-disabled') {\n                                                const error = new OpenViduError(\n                                                    OpenViduErrorName.SCREEN_EXTENSION_DISABLED,\n                                                    'You must enable the screen extension'\n                                                );\n                                                logger.error(error);\n                                                return reject(error);\n                                            }\n                                            if (status === 'not-installed') {\n                                                const error = new OpenViduError(\n                                                    OpenViduErrorName.SCREEN_EXTENSION_NOT_INSTALLED,\n                                                    <string>this.advancedConfiguration.screenShareChromeExtension\n                                                );\n                                                logger.error(error);\n                                                return reject(error);\n                                            }\n                                        });\n                                        return;\n                                    }\n                                } else {\n                                    myConstraints.constraints!.video = screenConstraints;\n                                    return resolve(myConstraints);\n                                }\n                            });\n                            return;\n                        } else {\n                            if (navigator.mediaDevices['getDisplayMedia']) {\n                                // getDisplayMedia support (Chrome >= 72, Firefox >= 66, Safari >= 13)\n                                return resolve(myConstraints);\n                            } else {\n                                // Default screen sharing extension for Chrome/Opera, or is Firefox < 66\n                                const firefoxString =\n                                    platform.isFirefoxBrowser() || platform.isFirefoxMobileBrowser()\n                                        ? publisherProperties.videoSource\n                                        : undefined;\n\n                                screenSharingAuto.getScreenId(firefoxString, (error, sourceId, screenConstraints) => {\n                                    if (!!error) {\n                                        if (error === 'not-installed') {\n                                            const extensionUrl = !!this.advancedConfiguration.screenShareChromeExtension\n                                                ? this.advancedConfiguration.screenShareChromeExtension\n                                                : 'https://chrome.google.com/webstore/detail/openvidu-screensharing/lfcgfepafnobdloecchnfaclibenjold';\n                                            const err = new OpenViduError(OpenViduErrorName.SCREEN_EXTENSION_NOT_INSTALLED, extensionUrl);\n                                            logger.error(err);\n                                            return reject(err);\n                                        } else if (error === 'installed-disabled') {\n                                            const err = new OpenViduError(\n                                                OpenViduErrorName.SCREEN_EXTENSION_DISABLED,\n                                                'You must enable the screen extension'\n                                            );\n                                            logger.error(err);\n                                            return reject(err);\n                                        } else if (error === 'permission-denied') {\n                                            const err = new OpenViduError(\n                                                OpenViduErrorName.SCREEN_CAPTURE_DENIED,\n                                                'You must allow access to one window of your desktop'\n                                            );\n                                            logger.error(err);\n                                            return reject(err);\n                                        } else {\n                                            const err = new OpenViduError(\n                                                OpenViduErrorName.GENERIC_ERROR,\n                                                'Unknown error when accessing screen share'\n                                            );\n                                            logger.error(err);\n                                            logger.error(error);\n                                            return reject(err);\n                                        }\n                                    } else {\n                                        myConstraints.constraints!.video = screenConstraints.video;\n                                        return resolve(myConstraints);\n                                    }\n                                });\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected setVideoSource(myConstraints: CustomMediaStreamConstraints, videoSource: string) {\n        if (!myConstraints.constraints!.video) {\n            myConstraints.constraints!.video = {};\n        }\n        (<MediaTrackConstraints>myConstraints.constraints!.video)['deviceId'] = { exact: videoSource };\n    }\n\n    /* Private methods */\n\n    private disconnectCallback(): void {\n        logger.warn('Websocket connection lost');\n        if (this.isRoomAvailable()) {\n            this.session.onLostConnection('networkDisconnect');\n        } else {\n            alert('Connection error. Please reload page.');\n        }\n    }\n\n    private reconnectingCallback(): void {\n        logger.warn('Websocket connection lost (reconnecting)');\n        if (!this.isRoomAvailable()) {\n            alert('Connection error. Please reload page.');\n        } else {\n            this.session.emitEvent('reconnecting', []);\n        }\n    }\n\n    private reconnectWebsocketThroughRpcConnectMethod(rpcSessionId) {\n        // This RPC method allows checking:\n        // Single Master: if success, connection recovered\n        //                if error, no Master Node crashed and life will be -1. onLostConnection with reason networkDisconnect will be triggered\n        // Multi Master: if success, connection recovered\n        //               if error and Master Node crashed notification was already received, nothing must be done\n        //               if error and Master Node NOT crashed, sessionStatus method must be sent:\n        //                 if life is equal, networkDisconnect\n        //                 if life is greater, nodeCrashed\n        this.sendRequest('connect', { sessionId: rpcSessionId, reconnect: true }, (error, response) => {\n            if (!!error) {\n                if (this.isMasterNodeCrashed()) {\n                    logger.warn('Master Node has crashed!');\n                } else {\n                    logger.error(error);\n\n                    const notifyLostConnection = (reason, errorMsg) => {\n                        logger.warn(errorMsg);\n                        this.session.onLostConnection(reason);\n                        this.jsonRpcClient.close(4101, 'Reconnection fault: ' + errorMsg);\n                    };\n\n                    const rpcSessionStatus = () => {\n                        if (this.life === -1) {\n                            // Single Master\n                            notifyLostConnection(\n                                'networkDisconnect',\n                                'WS successfully reconnected but the user was already evicted due to timeout'\n                            );\n                        } else {\n                            // Multi Master\n                            // This RPC method is only required to find out the reason of the disconnection:\n                            // whether the client lost its network connection or a Master Node crashed\n                            this.sendRequest('sessionStatus', { sessionId: this.session.sessionId }, (error, response) => {\n                                if (error != null) {\n                                    console.error('Error checking session status', error);\n                                } else {\n                                    if (this.life === response.life) {\n                                        // If the life stored in the client matches the life stored in the server, it means that the client lost its network connection\n                                        notifyLostConnection(\n                                            'networkDisconnect',\n                                            'WS successfully reconnected but the user was already evicted due to timeout'\n                                        );\n                                    } else {\n                                        // If the life stored in the client is below the life stored in the server, it means that the Master Node has crashed\n                                        notifyLostConnection(\n                                            'nodeCrashed',\n                                            'WS successfully reconnected to OpenVidu Server but your Master Node crashed'\n                                        );\n                                    }\n                                }\n                            });\n                        }\n                    };\n\n                    if (error.code === 40007 && error.message === 'reconnection error') {\n                        // Kurento error: invalid RPC sessionId. This means that the kurento-jsonrpc-server of openvidu-server where kurento-jsonrpc-client\n                        // is trying to reconnect does not know about this sessionId. This can mean two things:\n                        // 1) openvidu-browser managed to reconnect after a while, but openvidu-server already evicted the user for not receiving ping.\n                        // 2) openvidu-server process is a different one because of a node crash.\n                        // Send a \"sessionStatus\" method to check the reason\n                        console.error('Invalid RPC sessionId. Client network disconnection or Master Node crash');\n                        rpcSessionStatus();\n                    } else {\n                        rpcSessionStatus();\n                    }\n                }\n            } else {\n                this.jsonRpcClient.resetPing();\n                this.session.onRecoveredConnection();\n            }\n        });\n    }\n\n    private reconnectedCallback(): void {\n        logger.warn('Websocket reconnected');\n        if (this.isRoomAvailable()) {\n            if (!!this.session.connection) {\n                this.reconnectWebsocketThroughRpcConnectMethod(this.session.connection.rpcSessionId);\n            } else {\n                logger.warn('There was no previous connection when running reconnection callback');\n                // Make Session object dispatch 'sessionDisconnected' event\n                const sessionDisconnectEvent = new SessionDisconnectedEvent(this.session, 'networkDisconnect');\n                this.session.ee.emitEvent('sessionDisconnected', [sessionDisconnectEvent]);\n                sessionDisconnectEvent.callDefaultBehavior();\n            }\n        } else {\n            alert('Connection error. Please reload page.');\n        }\n    }\n\n    private isMasterNodeCrashed() {\n        return this.masterNodeHasCrashed;\n    }\n\n    private isRoomAvailable(): boolean {\n        if (this.session !== undefined && this.session instanceof Session) {\n            return true;\n        } else {\n            logger.warn('Session instance not found');\n            return false;\n        }\n    }\n\n    private isScreenShare(videoSource: string) {\n        return videoSource === 'screen' || videoSource === 'window' || (platform.isElectron() && videoSource.startsWith('screen:'));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}