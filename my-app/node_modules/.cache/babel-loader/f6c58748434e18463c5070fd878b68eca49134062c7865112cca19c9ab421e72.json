{"ast":null,"code":"\"use strict\";\n\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Event = void 0;\nvar Event = /** @class */function () {\n  /**\n   * @hidden\n   */\n  function Event(cancelable, target, type) {\n    /**\n     * @hidden\n     */\n    this.hasBeenPrevented = false;\n    this.cancelable = cancelable;\n    this.target = target;\n    this.type = type;\n  }\n  /**\n   * Whether the default beahivour of the event has been prevented or not. Call {@link Event.preventDefault} to prevent it\n   */\n  Event.prototype.isDefaultPrevented = function () {\n    return this.hasBeenPrevented;\n  };\n  /**\n   * Prevents the default behavior of the event. The following events have a default behavior:\n   *\n   * - `sessionDisconnected`: dispatched by {@link Session} object, automatically unsubscribes the leaving participant from every Subscriber object of the session (this includes closing the RTCPeerConnection and disposing all MediaStreamTracks)\n   * and also deletes any HTML video element associated to each Subscriber (only those created by OpenVidu Browser, either by passing a valid parameter as `targetElement` in method {@link Session.subscribe} or\n   * by calling {@link Subscriber.createVideoElement}). For every video removed, each Subscriber object will also dispatch a `videoElementDestroyed` event.\n   *\n   * - `streamDestroyed`:\n   *   - If dispatched by a {@link Publisher} (*you* have unpublished): automatically stops all media tracks and deletes any HTML video element associated to it (only those created by OpenVidu Browser, either by passing a valid parameter as `targetElement`\n   * in method {@link OpenVidu.initPublisher} or by calling {@link Publisher.createVideoElement}). For every video removed, the Publisher object will also dispatch a `videoElementDestroyed` event.\n   *   - If dispatched by {@link Session} (*other user* has unpublished): automatically unsubscribes the proper Subscriber object from the session (this includes closing the RTCPeerConnection and disposing all MediaStreamTracks)\n   * and also deletes any HTML video element associated to that Subscriber (only those created by OpenVidu Browser, either by passing a valid parameter as `targetElement` in method {@link Session.subscribe} or\n   * by calling {@link Subscriber.createVideoElement}). For every video removed, the Subscriber object will also dispatch a `videoElementDestroyed` event.\n   */\n  Event.prototype.preventDefault = function () {\n    // tslint:disable-next-line:no-empty\n    this.callDefaultBehavior = function () {};\n    this.hasBeenPrevented = true;\n  };\n  return Event;\n}();\nexports.Event = Event;","map":{"version":3,"names":["Event","cancelable","target","type","hasBeenPrevented","prototype","isDefaultPrevented","preventDefault","callDefaultBehavior","exports"],"sources":["C:\\Users\\SSAFY\\Desktop\\catchpalm\\my-app\\node_modules\\openvidu-browser\\src\\OpenViduInternal\\Events\\Event.ts"],"sourcesContent":["/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Filter } from '../../OpenVidu/Filter';\nimport { StreamManager } from '../../OpenVidu/StreamManager';\nimport { Session } from '../../OpenVidu/Session';\n\nexport abstract class Event {\n    /**\n     * Whether the event has a default behavior that may be prevented by calling {@link Event.preventDefault}\n     */\n    cancelable: boolean;\n\n    /**\n     * The object that dispatched the event\n     */\n    target: Session | StreamManager | Filter;\n\n    /**\n     * The type of event. This is the same string you pass as first parameter when calling method `on()` of any object implementing {@link EventDispatcher} interface\n     */\n    type: string;\n\n    /**\n     * @hidden\n     */\n    hasBeenPrevented = false;\n\n    /**\n     * @hidden\n     */\n    constructor(cancelable: boolean, target: Session | StreamManager | Filter, type: string) {\n        this.cancelable = cancelable;\n        this.target = target;\n        this.type = type;\n    }\n\n    /**\n     * Whether the default beahivour of the event has been prevented or not. Call {@link Event.preventDefault} to prevent it\n     */\n    isDefaultPrevented(): boolean {\n        return this.hasBeenPrevented;\n    }\n\n    /**\n     * Prevents the default behavior of the event. The following events have a default behavior:\n     *\n     * - `sessionDisconnected`: dispatched by {@link Session} object, automatically unsubscribes the leaving participant from every Subscriber object of the session (this includes closing the RTCPeerConnection and disposing all MediaStreamTracks)\n     * and also deletes any HTML video element associated to each Subscriber (only those created by OpenVidu Browser, either by passing a valid parameter as `targetElement` in method {@link Session.subscribe} or\n     * by calling {@link Subscriber.createVideoElement}). For every video removed, each Subscriber object will also dispatch a `videoElementDestroyed` event.\n     *\n     * - `streamDestroyed`:\n     *   - If dispatched by a {@link Publisher} (*you* have unpublished): automatically stops all media tracks and deletes any HTML video element associated to it (only those created by OpenVidu Browser, either by passing a valid parameter as `targetElement`\n     * in method {@link OpenVidu.initPublisher} or by calling {@link Publisher.createVideoElement}). For every video removed, the Publisher object will also dispatch a `videoElementDestroyed` event.\n     *   - If dispatched by {@link Session} (*other user* has unpublished): automatically unsubscribes the proper Subscriber object from the session (this includes closing the RTCPeerConnection and disposing all MediaStreamTracks)\n     * and also deletes any HTML video element associated to that Subscriber (only those created by OpenVidu Browser, either by passing a valid parameter as `targetElement` in method {@link Session.subscribe} or\n     * by calling {@link Subscriber.createVideoElement}). For every video removed, the Subscriber object will also dispatch a `videoElementDestroyed` event.\n     */\n    preventDefault() {\n        // tslint:disable-next-line:no-empty\n        this.callDefaultBehavior = () => {};\n        this.hasBeenPrevented = true;\n    }\n\n    /**\n     * @hidden\n     */\n    abstract callDefaultBehavior();\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAqBA,IAAAA,KAAA;EAqBI;;;EAGA,SAAAA,MAAYC,UAAmB,EAAEC,MAAwC,EAAEC,IAAY;IARvF;;;IAGA,KAAAC,gBAAgB,GAAG,KAAK;IAMpB,IAAI,CAACH,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,IAAI,GAAGA,IAAI;EACpB;EAEA;;;EAGAH,KAAA,CAAAK,SAAA,CAAAC,kBAAkB,GAAlB;IACI,OAAO,IAAI,CAACF,gBAAgB;EAChC,CAAC;EAED;;;;;;;;;;;;;;EAcAJ,KAAA,CAAAK,SAAA,CAAAE,cAAc,GAAd;IACI;IACA,IAAI,CAACC,mBAAmB,GAAG,aAAO,CAAC;IACnC,IAAI,CAACJ,gBAAgB,GAAG,IAAI;EAChC,CAAC;EAML,OAAAJ,KAAC;AAAD,CAAC,CA7DD;AAAsBS,OAAA,CAAAT,KAAA,GAAAA,KAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}